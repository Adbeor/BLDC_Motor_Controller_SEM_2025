
BLDC_Motor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee8  08005ee8  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee8  08005ee8  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee8  08005ee8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08005ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000040  08005f30  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005f30  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad6  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f76  00000000  00000000  0002cb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017956  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d51c  00000000  00000000  00047cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bff2  00000000  00000000  000551f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e11e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  000e1238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000040 	.word	0x20000040
 800012c:	00000000 	.word	0x00000000
 8000130:	08005eb0 	.word	0x08005eb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000044 	.word	0x20000044
 800014c:	08005eb0 	.word	0x08005eb0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <PIDController_Init>:
 *      Author: del
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
	pid->prevError  = 0.0f;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000fae:	b5b0      	push	{r4, r5, r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f7ff fce9 	bl	8000994 <__aeabi_fsub>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff fdeb 	bl	8000ba8 <__aeabi_fmul>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	69dc      	ldr	r4, [r3, #28]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fde0 	bl	8000ba8 <__aeabi_fmul>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f7ff fdd8 	bl	8000ba8 <__aeabi_fmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fcc8 	bl	8000998 <__addsf3>
 8001008:	4603      	mov	r3, r0
 800100a:	4619      	mov	r1, r3
 800100c:	4628      	mov	r0, r5
 800100e:	f7ff fdcb 	bl	8000ba8 <__aeabi_fmul>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fcbe 	bl	8000998 <__addsf3>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	61da      	str	r2, [r3, #28]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMax) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f7ff ff76 	bl	8000f20 <__aeabi_fcmpgt>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <PIDController_Update+0x96>

        pid->integrator = pid->limMax;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	61da      	str	r2, [r3, #28]
 8001042:	e00e      	b.n	8001062 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMin) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff48 	bl	8000ee4 <__aeabi_fcmplt>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <PIDController_Update+0xb4>

        pid->integrator = pid->limMin;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	61da      	str	r2, [r3, #28]

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4619      	mov	r1, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc95 	bl	8000998 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	461c      	mov	r4, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fc8b 	bl	8000994 <__aeabi_fsub>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd90 	bl	8000ba8 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4619      	mov	r1, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc80 	bl	8000998 <__addsf3>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f7ff fc76 	bl	8000994 <__aeabi_fsub>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fd78 	bl	8000ba8 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fc6b 	bl	8000998 <__addsf3>
 80010c2:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010c4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc62 	bl	8000998 <__addsf3>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff fc5a 	bl	8000998 <__addsf3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fe11 	bl	8000d10 <__aeabi_fdiv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc4b 	bl	8000998 <__addsf3>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fc43 	bl	8000998 <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f7ff fefb 	bl	8000f20 <__aeabi_fcmpgt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
 8001138:	e00e      	b.n	8001158 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff fecd 	bl	8000ee4 <__aeabi_fcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}

08001170 <PIDController_Reset>:

void PIDController_Reset(PIDController *pid) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
 	pid->prevError  = 0.0f;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_CAN_RxFifo0MsgPendingCallback>:
//PID
PIDController pid = { PID_KP, PID_KI, PID_KD, PID_TAU,
						PID_LIM_MIN, PID_LIM_MAX, SAMPLE_TIME_S };

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f002 f8c7 	bl	800334e <HAL_CAN_GetRxMessage>

	if (RxData[0] == 96 && RxData[1] == 234){ // HMI Page 60000
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b60      	cmp	r3, #96	; 0x60
 80011c6:	d12d      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	2bea      	cmp	r3, #234	; 0xea
 80011ce:	d129      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>

		if (RxData[4] == 1){ //HMI button 1
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			power = 1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		}
		if (RxData[4] == 2){ //HMI button 2
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d102      	bne.n	80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
			power = 0;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		}


		if (RxData[5] == 16){ //HMI down button
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d102      	bne.n	80011fa <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			TxData[4] = 0;		//Change button color
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	711a      	strb	r2, [r3, #4]

		}
		if (RxData[5] == 8){ //HMI left button
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d102      	bne.n	8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
			TxData[4] = 1; 		//Change button color
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001204:	2201      	movs	r2, #1
 8001206:	711a      	strb	r2, [r3, #4]

		}
		if (RxData[5] == 32){ //HMI right button
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800120a:	795b      	ldrb	r3, [r3, #5]
 800120c:	2b20      	cmp	r3, #32
 800120e:	d102      	bne.n	8001216 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			TxData[4] = 2;		//Change button color
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001212:	2202      	movs	r2, #2
 8001214:	711a      	strb	r2, [r3, #4]

		}
		if (RxData[5] == 2){ //HMI up button
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d102      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
			TxData[4] = 3;		//Change button color
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001220:	2203      	movs	r2, #3
 8001222:	711a      	strb	r2, [r3, #4]
		}

	}


}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001c0 	.word	0x200001c0
 8001230:	20000228 	.word	0x20000228
 8001234:	20000000 	.word	0x20000000
 8001238:	2000016c 	.word	0x2000016c
 800123c:	00000000 	.word	0x00000000

08001240 <get_temp>:
#define V25  1.43
#define Avg_Slope .0043
#define VSENSE 3.3/4096   // 3.3 v and 12 bits so 4096

float get_temp (uint32_t variable)   // function to read temp from the value
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	return (((V25 - VSENSE*variable) / Avg_Slope) + 25);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f8c3 	bl	80003d4 <__aeabi_ui2d>
 800124e:	a314      	add	r3, pc, #80	; (adr r3, 80012a0 <get_temp+0x60>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f938 	bl	80004c8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	a112      	add	r1, pc, #72	; (adr r1, 80012a8 <get_temp+0x68>)
 800125e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001262:	f7fe ff79 	bl	8000158 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	a310      	add	r3, pc, #64	; (adr r3, 80012b0 <get_temp+0x70>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff fa52 	bl	800071c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <get_temp+0x78>)
 8001286:	f7fe ff69 	bl	800015c <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fb2b 	bl	80008ec <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	66666666 	.word	0x66666666
 80012a4:	3f4a6666 	.word	0x3f4a6666
 80012a8:	ae147ae1 	.word	0xae147ae1
 80012ac:	3ff6e147 	.word	0x3ff6e147
 80012b0:	75f6fd22 	.word	0x75f6fd22
 80012b4:	3f719ce0 	.word	0x3f719ce0
 80012b8:	40390000 	.word	0x40390000

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b598      	push	{r3, r4, r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f001 f902 	bl	80024c8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f8fc 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 fbf4 	bl	8001ab4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012cc:	f000 fa30 	bl	8001730 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012d0:	f000 fae6 	bl	80018a0 <MX_TIM2_Init>
  MX_CAN_Init();
 80012d4:	f000 f9da 	bl	800168c <MX_CAN_Init>
  MX_DMA_Init();
 80012d8:	f000 fbce 	bl	8001a78 <MX_DMA_Init>
  MX_TIM3_Init();
 80012dc:	f000 fb56 	bl	800198c <MX_TIM3_Init>
  MX_ADC1_Init();
 80012e0:	f000 f93e 	bl	8001560 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  //Starting timer2 (0.5 seconds) to show speed
  HAL_TIM_Base_Start_IT(&htim2);
 80012e4:	4866      	ldr	r0, [pc, #408]	; (8001480 <main+0x1c4>)
 80012e6:	f003 fd43 	bl	8004d70 <HAL_TIM_Base_Start_IT>

  //Starting timer3 (0.01 seconds) for speed control
  HAL_TIM_Base_Start_IT(&htim3);
 80012ea:	4866      	ldr	r0, [pc, #408]	; (8001484 <main+0x1c8>)
 80012ec:	f003 fd40 	bl	8004d70 <HAL_TIM_Base_Start_IT>

  //CAN
  HAL_CAN_Start(&hcan);
 80012f0:	4865      	ldr	r0, [pc, #404]	; (8001488 <main+0x1cc>)
 80012f2:	f001 feda 	bl	80030aa <HAL_CAN_Start>

  //CAN FIFO activation
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012f6:	2102      	movs	r1, #2
 80012f8:	4863      	ldr	r0, [pc, #396]	; (8001488 <main+0x1cc>)
 80012fa:	f002 f939 	bl	8003570 <HAL_CAN_ActivateNotification>

  //Configurando la transmision

  TxHeader.DLC = 8;  // Son 8 bytes de data
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <main+0x1d0>)
 8001300:	2208      	movs	r2, #8
 8001302:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8001304:	4b61      	ldr	r3, [pc, #388]	; (800148c <main+0x1d0>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Identificador del mensaje
 800130a:	4b60      	ldr	r3, [pc, #384]	; (800148c <main+0x1d0>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8001310:	4b5e      	ldr	r3, [pc, #376]	; (800148c <main+0x1d0>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // Este es el ID que mandaremos al periferico
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <main+0x1d0>)
 8001318:	f240 1203 	movw	r2, #259	; 0x103
 800131c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <main+0x1d0>)
 8001320:	2200      	movs	r2, #0
 8001322:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0; 	//Speed component
 8001324:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <main+0x1d4>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;	//Speed component
 800132a:	4b59      	ldr	r3, [pc, #356]	; (8001490 <main+0x1d4>)
 800132c:	2200      	movs	r2, #0
 800132e:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <main+0x1d4>)
 8001332:	2200      	movs	r2, #0
 8001334:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <main+0x1d4>)
 8001338:	2200      	movs	r2, #0
 800133a:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 800133c:	4b54      	ldr	r3, [pc, #336]	; (8001490 <main+0x1d4>)
 800133e:	2200      	movs	r2, #0
 8001340:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 8001342:	4b53      	ldr	r3, [pc, #332]	; (8001490 <main+0x1d4>)
 8001344:	2200      	movs	r2, #0
 8001346:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 8001348:	4b51      	ldr	r3, [pc, #324]	; (8001490 <main+0x1d4>)
 800134a:	2200      	movs	r2, #0
 800134c:	719a      	strb	r2, [r3, #6]
  TxData[7] = 255;	//Flags byte  [0 0 0 0 0 0 0 1] [x x cs cs su em pw gf]
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <main+0x1d4>)
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	71da      	strb	r2, [r3, #7]

  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <main+0x1d8>)
 8001356:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <main+0x1d4>)
 8001358:	494c      	ldr	r1, [pc, #304]	; (800148c <main+0x1d0>)
 800135a:	484b      	ldr	r0, [pc, #300]	; (8001488 <main+0x1cc>)
 800135c:	f001 fee9 	bl	8003132 <HAL_CAN_AddTxMessage>


  /* Initialize PID controller */


  PIDController_Init(&pid);
 8001360:	484d      	ldr	r0, [pc, #308]	; (8001498 <main+0x1dc>)
 8001362:	f7ff fe07 	bl	8000f74 <PIDController_Init>



  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001366:	4b4d      	ldr	r3, [pc, #308]	; (800149c <main+0x1e0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a4d      	ldr	r2, [pc, #308]	; (80014a0 <main+0x1e4>)
 800136c:	6814      	ldr	r4, [r2, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fde0 	bl	8000f34 <__aeabi_f2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <main+0x1e0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <main+0x1e4>)
 800137e:	6814      	ldr	r4, [r2, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fdd7 	bl	8000f34 <__aeabi_f2uiz>
 8001386:	4603      	mov	r3, r0
 8001388:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <main+0x1e0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <main+0x1e4>)
 8001390:	6814      	ldr	r4, [r2, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fdce 	bl	8000f34 <__aeabi_f2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	63e3      	str	r3, [r4, #60]	; 0x3c

  //INITIAL POSITION

	//HALL A
	if (HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin)) Sensors[0] = 1;
 800139c:	2101      	movs	r1, #1
 800139e:	4841      	ldr	r0, [pc, #260]	; (80014a4 <main+0x1e8>)
 80013a0:	f002 ffae 	bl	8004300 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <main+0xf6>
 80013aa:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <main+0x1ec>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e002      	b.n	80013b8 <main+0xfc>
	else Sensors[0] = 0;
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <main+0x1ec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	//HALL B
	if (HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin)) Sensors[1] = 1;
 80013b8:	2102      	movs	r1, #2
 80013ba:	483a      	ldr	r0, [pc, #232]	; (80014a4 <main+0x1e8>)
 80013bc:	f002 ffa0 	bl	8004300 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <main+0x112>
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <main+0x1ec>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	e002      	b.n	80013d4 <main+0x118>
	else Sensors[1] = 0;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <main+0x1ec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
	//HALL C
	if (HAL_GPIO_ReadPin(HALL_C_GPIO_Port,HALL_C_Pin)) Sensors[2] = 1;
 80013d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d8:	4832      	ldr	r0, [pc, #200]	; (80014a4 <main+0x1e8>)
 80013da:	f002 ff91 	bl	8004300 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <main+0x130>
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x1ec>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e002      	b.n	80013f2 <main+0x136>
	else Sensors[2] = 0;
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <main+0x1ec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]

	HAL_ADC_Start_DMA(&hadc1, adc_values, 7);  // start the adc in dma mode
 80013f2:	2207      	movs	r2, #7
 80013f4:	492d      	ldr	r1, [pc, #180]	; (80014ac <main+0x1f0>)
 80013f6:	482e      	ldr	r0, [pc, #184]	; (80014b0 <main+0x1f4>)
 80013f8:	f001 f9a0 	bl	800273c <HAL_ADC_Start_DMA>

  while (1)
  {


	  if (power == 1){
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <main+0x1f8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <main+0x14e>

		  //HALL DECODER

		  Hall_Decoder(); //Makes the hall encoding
 8001404:	f000 fbc6 	bl	8001b94 <Hall_Decoder>
 8001408:	e7f8      	b.n	80013fc <main+0x140>

	  else{

		  //TURN OFF PID

		  PIDController_Reset(&pid);
 800140a:	4823      	ldr	r0, [pc, #140]	; (8001498 <main+0x1dc>)
 800140c:	f7ff feb0 	bl	8001170 <PIDController_Reset>

		  integral = pid.integrator;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <main+0x1dc>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <main+0x1fc>)
 8001416:	6013      	str	r3, [r2, #0]

		  u = pid.out;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <main+0x1dc>)
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <main+0x200>)
 800141e:	6013      	str	r3, [r2, #0]

		  duty_cycle = u;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <main+0x200>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <main+0x1e0>)
 8001426:	6013      	str	r3, [r2, #0]


		  //Turn off the high gates
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <main+0x200>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <main+0x1e4>)
 800142e:	6814      	ldr	r4, [r2, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd7f 	bl	8000f34 <__aeabi_f2uiz>
 8001436:	4603      	mov	r3, r0
 8001438:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, u);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <main+0x200>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <main+0x1e4>)
 8001440:	6814      	ldr	r4, [r2, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fd76 	bl	8000f34 <__aeabi_f2uiz>
 8001448:	4603      	mov	r3, r0
 800144a:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, u);
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <main+0x200>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <main+0x1e4>)
 8001452:	6814      	ldr	r4, [r2, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fd6d 	bl	8000f34 <__aeabi_f2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	63e3      	str	r3, [r4, #60]	; 0x3c

		  //Turn off the low gates
		  HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <main+0x1e8>)
 8001464:	f002 ff63 	bl	800432e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2120      	movs	r1, #32
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <main+0x1e8>)
 800146e:	f002 ff5e 	bl	800432e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2110      	movs	r1, #16
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <main+0x1e8>)
 8001478:	f002 ff59 	bl	800432e <HAL_GPIO_WritePin>
	  if (power == 1){
 800147c:	e7be      	b.n	80013fc <main+0x140>
 800147e:	bf00      	nop
 8001480:	200001c8 	.word	0x200001c8
 8001484:	200000b0 	.word	0x200000b0
 8001488:	20000088 	.word	0x20000088
 800148c:	20000210 	.word	0x20000210
 8001490:	2000016c 	.word	0x2000016c
 8001494:	200001bc 	.word	0x200001bc
 8001498:	20000004 	.word	0x20000004
 800149c:	20000068 	.word	0x20000068
 80014a0:	20000174 	.word	0x20000174
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	2000005c 	.word	0x2000005c
 80014ac:	20000244 	.word	0x20000244
 80014b0:	200000f8 	.word	0x200000f8
 80014b4:	20000000 	.word	0x20000000
 80014b8:	2000007c 	.word	0x2000007c
 80014bc:	20000080 	.word	0x20000080

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ca:	2228      	movs	r2, #40	; 0x28
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fce6 	bl	8005ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f8:	2310      	movs	r3, #16
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001504:	4618      	mov	r0, r3
 8001506:	f002 ff43 	bl	8004390 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001510:	f000 fd68 	bl	8001fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f003 f9ae 	bl	8004890 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800153a:	f000 fd53 	bl	8001fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800153e:	2302      	movs	r3, #2
 8001540:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fb0b 	bl	8004b64 <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001554:	f000 fd46 	bl	8001fe4 <Error_Handler>
  }
}
 8001558:	bf00      	nop
 800155a:	3750      	adds	r7, #80	; 0x50
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001570:	4b44      	ldr	r3, [pc, #272]	; (8001684 <MX_ADC1_Init+0x124>)
 8001572:	4a45      	ldr	r2, [pc, #276]	; (8001688 <MX_ADC1_Init+0x128>)
 8001574:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <MX_ADC1_Init+0x124>)
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <MX_ADC1_Init+0x124>)
 8001580:	2201      	movs	r2, #1
 8001582:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001584:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <MX_ADC1_Init+0x124>)
 8001586:	2200      	movs	r2, #0
 8001588:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <MX_ADC1_Init+0x124>)
 800158c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <MX_ADC1_Init+0x124>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <MX_ADC1_Init+0x124>)
 800159a:	2207      	movs	r2, #7
 800159c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159e:	4839      	ldr	r0, [pc, #228]	; (8001684 <MX_ADC1_Init+0x124>)
 80015a0:	f000 fff4 	bl	800258c <HAL_ADC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015aa:	f000 fd1b 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4831      	ldr	r0, [pc, #196]	; (8001684 <MX_ADC1_Init+0x124>)
 80015c0:	f001 f9b6 	bl	8002930 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 fd0b 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	482a      	ldr	r0, [pc, #168]	; (8001684 <MX_ADC1_Init+0x124>)
 80015dc:	f001 f9a8 	bl	8002930 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80015e6:	f000 fcfd 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4823      	ldr	r0, [pc, #140]	; (8001684 <MX_ADC1_Init+0x124>)
 80015f8:	f001 f99a 	bl	8002930 <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001602:	f000 fcef 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001606:	2303      	movs	r3, #3
 8001608:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160a:	2304      	movs	r3, #4
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <MX_ADC1_Init+0x124>)
 8001614:	f001 f98c 	bl	8002930 <HAL_ADC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800161e:	f000 fce1 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001622:	2304      	movs	r3, #4
 8001624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001626:	2305      	movs	r3, #5
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <MX_ADC1_Init+0x124>)
 8001630:	f001 f97e 	bl	8002930 <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800163a:	f000 fcd3 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800163e:	2305      	movs	r3, #5
 8001640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001642:	2306      	movs	r3, #6
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <MX_ADC1_Init+0x124>)
 800164c:	f001 f970 	bl	8002930 <HAL_ADC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001656:	f000 fcc5 	bl	8001fe4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800165a:	2310      	movs	r3, #16
 800165c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800165e:	2307      	movs	r3, #7
 8001660:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001662:	2306      	movs	r3, #6
 8001664:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_ADC1_Init+0x124>)
 800166c:	f001 f960 	bl	8002930 <HAL_ADC_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001676:	f000 fcb5 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000f8 	.word	0x200000f8
 8001688:	40012400 	.word	0x40012400

0800168c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_CAN_Init+0x9c>)
 8001694:	4a25      	ldr	r2, [pc, #148]	; (800172c <MX_CAN_Init+0xa0>)
 8001696:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <MX_CAN_Init+0x9c>)
 800169a:	2208      	movs	r2, #8
 800169c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_CAN_Init+0x9c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_CAN_Init+0x9c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_CAN_Init+0x9c>)
 80016ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_CAN_Init+0x9c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MX_CAN_Init+0x9c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_CAN_Init+0x9c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_CAN_Init+0x9c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_CAN_Init+0x9c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_CAN_Init+0x9c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_CAN_Init+0x9c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_CAN_Init+0x9c>)
 80016de:	f001 fb20 	bl	8002d22 <HAL_CAN_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80016e8:	f000 fc7c 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 80016f0:	230a      	movs	r3, #10
 80016f2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x01<<5;
 80016f8:	2320      	movs	r3, #32
 80016fa:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x01<<5;
 8001700:	2320      	movs	r3, #32
 8001702:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800170c:	2301      	movs	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_CAN_Init+0x9c>)
 800171a:	f001 fbfd 	bl	8002f18 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000088 	.word	0x20000088
 800172c:	40006400 	.word	0x40006400

08001730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b096      	sub	sp, #88	; 0x58
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2220      	movs	r2, #32
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fb99 	bl	8005ea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <MX_TIM1_Init+0x168>)
 8001770:	4a4a      	ldr	r2, [pc, #296]	; (800189c <MX_TIM1_Init+0x16c>)
 8001772:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <MX_TIM1_Init+0x168>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b47      	ldr	r3, [pc, #284]	; (8001898 <MX_TIM1_Init+0x168>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001780:	4b45      	ldr	r3, [pc, #276]	; (8001898 <MX_TIM1_Init+0x168>)
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <MX_TIM1_Init+0x168>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800178c:	4b42      	ldr	r3, [pc, #264]	; (8001898 <MX_TIM1_Init+0x168>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <MX_TIM1_Init+0x168>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001798:	483f      	ldr	r0, [pc, #252]	; (8001898 <MX_TIM1_Init+0x168>)
 800179a:	f003 fa99 	bl	8004cd0 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017a4:	f000 fc1e 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b2:	4619      	mov	r1, r3
 80017b4:	4838      	ldr	r0, [pc, #224]	; (8001898 <MX_TIM1_Init+0x168>)
 80017b6:	f003 ff01 	bl	80055bc <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80017c0:	f000 fc10 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c4:	4834      	ldr	r0, [pc, #208]	; (8001898 <MX_TIM1_Init+0x168>)
 80017c6:	f003 fb7d 	bl	8004ec4 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017d0:	f000 fc08 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e0:	4619      	mov	r1, r3
 80017e2:	482d      	ldr	r0, [pc, #180]	; (8001898 <MX_TIM1_Init+0x168>)
 80017e4:	f004 fa76 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017ee:	f000 fbf9 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f2:	2360      	movs	r3, #96	; 0x60
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001806:	2300      	movs	r3, #0
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <MX_TIM1_Init+0x168>)
 8001818:	f003 fe12 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001822:	f000 fbdf 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	2204      	movs	r2, #4
 800182c:	4619      	mov	r1, r3
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <MX_TIM1_Init+0x168>)
 8001830:	f003 fe06 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800183a:	f000 fbd3 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	2208      	movs	r2, #8
 8001844:	4619      	mov	r1, r3
 8001846:	4814      	ldr	r0, [pc, #80]	; (8001898 <MX_TIM1_Init+0x168>)
 8001848:	f003 fdfa 	bl	8005440 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001852:	f000 fbc7 	bl	8001fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM1_Init+0x168>)
 800187a:	f004 fa89 	bl	8005d90 <HAL_TIMEx_ConfigBreakDeadTime>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001884:	f000 fbae 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM1_Init+0x168>)
 800188a:	f000 fcfb 	bl	8002284 <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3758      	adds	r7, #88	; 0x58
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000174 	.word	0x20000174
 800189c:	40012c00 	.word	0x40012c00

080018a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08e      	sub	sp, #56	; 0x38
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800 - 1;
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018da:	f240 321f 	movw	r2, #799	; 0x31f
 80018de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b29      	ldr	r3, [pc, #164]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fa:	4823      	ldr	r0, [pc, #140]	; (8001988 <MX_TIM2_Init+0xe8>)
 80018fc:	f003 f9e8 	bl	8004cd0 <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001906:	f000 fb6d 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001914:	4619      	mov	r1, r3
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_TIM2_Init+0xe8>)
 8001918:	f003 fe50 	bl	80055bc <HAL_TIM_ConfigClockSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001922:	f000 fb5f 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <MX_TIM2_Init+0xe8>)
 8001928:	f003 fa74 	bl	8004e14 <HAL_TIM_OC_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001932:	f000 fb57 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	4619      	mov	r1, r3
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <MX_TIM2_Init+0xe8>)
 8001946:	f004 f9c5 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001950:	f000 fb48 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <MX_TIM2_Init+0xe8>)
 800196c:	f003 fd10 	bl	8005390 <HAL_TIM_OC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001976:	f000 fb35 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800197a:	4803      	ldr	r0, [pc, #12]	; (8001988 <MX_TIM2_Init+0xe8>)
 800197c:	f000 fc82 	bl	8002284 <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3738      	adds	r7, #56	; 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001c8 	.word	0x200001c8

0800198c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	f107 0320 	add.w	r3, r7, #32
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	615a      	str	r2, [r3, #20]
 80019ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019be:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <MX_TIM3_Init+0xe8>)
 80019c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800 - 1;
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019c4:	f240 321f 	movw	r2, #799	; 0x31f
 80019c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019d2:	2264      	movs	r2, #100	; 0x64
 80019d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e2:	4823      	ldr	r0, [pc, #140]	; (8001a70 <MX_TIM3_Init+0xe4>)
 80019e4:	f003 f974 	bl	8004cd0 <HAL_TIM_Base_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ee:	f000 faf9 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fc:	4619      	mov	r1, r3
 80019fe:	481c      	ldr	r0, [pc, #112]	; (8001a70 <MX_TIM3_Init+0xe4>)
 8001a00:	f003 fddc 	bl	80055bc <HAL_TIM_ConfigClockSource>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a0a:	f000 faeb 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001a0e:	4818      	ldr	r0, [pc, #96]	; (8001a70 <MX_TIM3_Init+0xe4>)
 8001a10:	f003 fa00 	bl	8004e14 <HAL_TIM_OC_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a1a:	f000 fae3 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4810      	ldr	r0, [pc, #64]	; (8001a70 <MX_TIM3_Init+0xe4>)
 8001a2e:	f004 f951 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a38:	f000 fad4 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <MX_TIM3_Init+0xe4>)
 8001a54:	f003 fc9c 	bl	8005390 <HAL_TIM_OC_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a5e:	f000 fac1 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <MX_TIM3_Init+0xe4>)
 8001a64:	f000 fc0e 	bl	8002284 <HAL_TIM_MspPostInit>

}
 8001a68:	bf00      	nop
 8001a6a:	3738      	adds	r7, #56	; 0x38
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200000b0 	.word	0x200000b0
 8001a74:	40000400 	.word	0x40000400

08001a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_DMA_Init+0x38>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <MX_DMA_Init+0x38>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_DMA_Init+0x38>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	200b      	movs	r0, #11
 8001a9c:	f002 f887 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa0:	200b      	movs	r0, #11
 8001aa2:	f002 f8a0 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001ace:	f043 0320 	orr.w	r3, r3, #32
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <MX_GPIO_Init+0xd4>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_LOW_Pin|B_LOW_Pin|C_LOW_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2170      	movs	r1, #112	; 0x70
 8001b14:	481d      	ldr	r0, [pc, #116]	; (8001b8c <MX_GPIO_Init+0xd8>)
 8001b16:	f002 fc0a 	bl	800432e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8001b1a:	f240 4303 	movw	r3, #1027	; 0x403
 8001b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_GPIO_Init+0xdc>)
 8001b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4817      	ldr	r0, [pc, #92]	; (8001b8c <MX_GPIO_Init+0xd8>)
 8001b30:	f002 fa62 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_LOW_Pin B_LOW_Pin C_LOW_Pin */
  GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin|C_LOW_Pin;
 8001b34:	2370      	movs	r3, #112	; 0x70
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4810      	ldr	r0, [pc, #64]	; (8001b8c <MX_GPIO_Init+0xd8>)
 8001b4c:	f002 fa54 	bl	8003ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2006      	movs	r0, #6
 8001b56:	f002 f82a 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b5a:	2006      	movs	r0, #6
 8001b5c:	f002 f843 	bl	8003be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2007      	movs	r0, #7
 8001b66:	f002 f822 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f002 f83b 	bl	8003be6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2028      	movs	r0, #40	; 0x28
 8001b76:	f002 f81a 	bl	8003bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b7a:	2028      	movs	r0, #40	; 0x28
 8001b7c:	f002 f833 	bl	8003be6 <HAL_NVIC_EnableIRQ>

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	10310000 	.word	0x10310000

08001b94 <Hall_Decoder>:

//FUNCIONES



void Hall_Decoder(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if (Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001b98:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d123      	bne.n	8001be8 <Hall_Decoder+0x54>
 8001ba0:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11f      	bne.n	8001be8 <Hall_Decoder+0x54>
 8001ba8:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11b      	bne.n	8001be8 <Hall_Decoder+0x54>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4873      	ldr	r0, [pc, #460]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001bb4:	f003 fa80 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001bb8:	2108      	movs	r1, #8
 8001bba:	4871      	ldr	r0, [pc, #452]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001bbc:	f003 fa7c 	bl	80050b8 <HAL_TIM_PWM_Stop>


		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	486f      	ldr	r0, [pc, #444]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001bc6:	f002 fbb2 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	486d      	ldr	r0, [pc, #436]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001bd0:	f002 fbad 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	486a      	ldr	r0, [pc, #424]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001bd8:	f003 f9cc 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2120      	movs	r1, #32
 8001be0:	4868      	ldr	r0, [pc, #416]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001be2:	f002 fba4 	bl	800432e <HAL_GPIO_WritePin>
 8001be6:	e0c7      	b.n	8001d78 <Hall_Decoder+0x1e4>



	}
	else if(Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 0) {
 8001be8:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d123      	bne.n	8001c38 <Hall_Decoder+0xa4>
 8001bf0:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11f      	bne.n	8001c38 <Hall_Decoder+0xa4>
 8001bf8:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11b      	bne.n	8001c38 <Hall_Decoder+0xa4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001c00:	2100      	movs	r1, #0
 8001c02:	485f      	ldr	r0, [pc, #380]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c04:	f003 fa58 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001c08:	2104      	movs	r1, #4
 8001c0a:	485d      	ldr	r0, [pc, #372]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c0c:	f003 fa54 	bl	80050b8 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	485b      	ldr	r0, [pc, #364]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c16:	f002 fb8a 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4859      	ldr	r0, [pc, #356]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c20:	f002 fb85 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c24:	2108      	movs	r1, #8
 8001c26:	4856      	ldr	r0, [pc, #344]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c28:	f003 f9a4 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2120      	movs	r1, #32
 8001c30:	4854      	ldr	r0, [pc, #336]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c32:	f002 fb7c 	bl	800432e <HAL_GPIO_WritePin>
 8001c36:	e09f      	b.n	8001d78 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 1 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d123      	bne.n	8001c88 <Hall_Decoder+0xf4>
 8001c40:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d11f      	bne.n	8001c88 <Hall_Decoder+0xf4>
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11b      	bne.n	8001c88 <Hall_Decoder+0xf4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	484b      	ldr	r0, [pc, #300]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c54:	f003 fa30 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4849      	ldr	r0, [pc, #292]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c5c:	f003 fa2c 	bl	80050b8 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,   GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	4847      	ldr	r0, [pc, #284]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c66:	f002 fb62 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4845      	ldr	r0, [pc, #276]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c70:	f002 fb5d 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c74:	2108      	movs	r1, #8
 8001c76:	4842      	ldr	r0, [pc, #264]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001c78:	f003 f97c 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2110      	movs	r1, #16
 8001c80:	4840      	ldr	r0, [pc, #256]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001c82:	f002 fb54 	bl	800432e <HAL_GPIO_WritePin>
 8001c86:	e077      	b.n	8001d78 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d123      	bne.n	8001cd8 <Hall_Decoder+0x144>
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d11f      	bne.n	8001cd8 <Hall_Decoder+0x144>
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <Hall_Decoder+0x144>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4837      	ldr	r0, [pc, #220]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001ca4:	f003 fa08 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001ca8:	2108      	movs	r1, #8
 8001caa:	4835      	ldr	r0, [pc, #212]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001cac:	f003 fa04 	bl	80050b8 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	4833      	ldr	r0, [pc, #204]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001cb6:	f002 fb3a 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4831      	ldr	r0, [pc, #196]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001cc0:	f002 fb35 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	482e      	ldr	r0, [pc, #184]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001cc8:	f003 f954 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2110      	movs	r1, #16
 8001cd0:	482c      	ldr	r0, [pc, #176]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001cd2:	f002 fb2c 	bl	800432e <HAL_GPIO_WritePin>
 8001cd6:	e04f      	b.n	8001d78 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 1) {
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d123      	bne.n	8001d28 <Hall_Decoder+0x194>
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11f      	bne.n	8001d28 <Hall_Decoder+0x194>
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d11b      	bne.n	8001d28 <Hall_Decoder+0x194>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4823      	ldr	r0, [pc, #140]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001cf4:	f003 f9e0 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	4821      	ldr	r0, [pc, #132]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001cfc:	f003 f9dc 	bl	80050b8 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	481f      	ldr	r0, [pc, #124]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d06:	f002 fb12 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2110      	movs	r1, #16
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d10:	f002 fb0d 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d14:	2104      	movs	r1, #4
 8001d16:	481a      	ldr	r0, [pc, #104]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001d18:	f003 f92c 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	4818      	ldr	r0, [pc, #96]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d22:	f002 fb04 	bl	800432e <HAL_GPIO_WritePin>
 8001d26:	e027      	b.n	8001d78 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d123      	bne.n	8001d78 <Hall_Decoder+0x1e4>
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11f      	bne.n	8001d78 <Hall_Decoder+0x1e4>
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <Hall_Decoder+0x1e8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11b      	bne.n	8001d78 <Hall_Decoder+0x1e4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001d40:	2104      	movs	r1, #4
 8001d42:	480f      	ldr	r0, [pc, #60]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001d44:	f003 f9b8 	bl	80050b8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001d4c:	f003 f9b4 	bl	80050b8 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2120      	movs	r1, #32
 8001d54:	480b      	ldr	r0, [pc, #44]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d56:	f002 faea 	bl	800432e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4809      	ldr	r0, [pc, #36]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d60:	f002 fae5 	bl	800432e <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d64:	2100      	movs	r1, #0
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <Hall_Decoder+0x1ec>)
 8001d68:	f003 f904 	bl	8004f74 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <Hall_Decoder+0x1f0>)
 8001d72:	f002 fadc 	bl	800432e <HAL_GPIO_WritePin>

	}
}
 8001d76:	e7ff      	b.n	8001d78 <Hall_Decoder+0x1e4>
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000005c 	.word	0x2000005c
 8001d80:	20000174 	.word	0x20000174
 8001d84:	40010c00 	.word	0x40010c00

08001d88 <HAL_GPIO_EXTI_Callback>:

}
*/

//HALL INTERRUPTIONS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]


	//HALL A
	if (GPIO_Pin == GPIO_PIN_0) {
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d114      	bne.n	8001dc2 <HAL_GPIO_EXTI_Callback+0x3a>

	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)) Sensors[0] = 1;
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4824      	ldr	r0, [pc, #144]	; (8001e2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001d9c:	f002 fab0 	bl	8004300 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_EXTI_Callback+0x26>
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_EXTI_Callback+0x2c>
	else Sensors[0] = 0;
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

	steps+=1;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001dbe:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
	else Sensors[2] = 0;

	steps+=1;
	}
}
 8001dc0:	e030      	b.n	8001e24 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d114      	bne.n	8001df2 <HAL_GPIO_EXTI_Callback+0x6a>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) Sensors[1] = 1;
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4818      	ldr	r0, [pc, #96]	; (8001e2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001dcc:	f002 fa98 	bl	8004300 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_EXTI_Callback+0x56>
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_EXTI_Callback+0x5c>
	else Sensors[1] = 0;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
	steps+=1;
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001dee:	801a      	strh	r2, [r3, #0]
}
 8001df0:	e018      	b.n	8001e24 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_10) {
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df8:	d114      	bne.n	8001e24 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
 8001dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001e00:	f002 fa7e 	bl	8004300 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_EXTI_Callback+0x8a>
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_EXTI_Callback+0x90>
	else Sensors[2] = 0;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
	steps+=1;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e22:	801a      	strh	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010c00 	.word	0x40010c00
 8001e30:	2000005c 	.word	0x2000005c
 8001e34:	20000074 	.word	0x20000074

08001e38 <HAL_TIM_PeriodElapsedCallback>:


// This might not be working now since we are using DMA
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

	//INTERRUPTION TIMER 2 (0.5 s)
	if (htim->Instance == TIM2){
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d154      	bne.n	8001ef4 <HAL_TIM_PeriodElapsedCallback+0xbc>
		//TEMPERATURE MEASUREMENT
		temp = get_temp(adc_values[6]);
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f9f6 	bl	8001240 <get_temp>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001e58:	6013      	str	r3, [r2, #0]
		//Formula para el motor de prueba
		//vel_rpm = 2*60*steps/90;  //cada 0.5 SEGUNDOS se mide la cantidad de revoluciones por minuto


		//Formula para el motor de MK III
		vel_rpm = 2*60*steps/138;
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6e:	1192      	asrs	r2, r2, #6
 8001e70:	17db      	asrs	r3, r3, #31
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe43 	bl	8000b00 <__aeabi_i2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e7e:	6013      	str	r3, [r2, #0]
		steps = 0;
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	801a      	strh	r2, [r3, #0]


		//Enviamos el valor de la velocidad

		if (vel_rpm > 255){
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4948      	ldr	r1, [pc, #288]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f847 	bl	8000f20 <__aeabi_fcmpgt>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d011      	beq.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x84>
			TxData[0] = 255;
 8001e98:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	701a      	strb	r2, [r3, #0]
			TxData[1] = vel_rpm - 255;
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4942      	ldr	r1, [pc, #264]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fd75 	bl	8000994 <__aeabi_fsub>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f841 	bl	8000f34 <__aeabi_f2uiz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001eb8:	705a      	strb	r2, [r3, #1]
 8001eba:	e00b      	b.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x9c>
		}
		else{
			TxData[0] = vel_rpm;
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f837 	bl	8000f34 <__aeabi_f2uiz>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ecc:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0;
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
		}

		//Enviamos el estado ON OFF del sistema

		TxData[3] = power;  // Sending the ON (1) or OFF (0)
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001eda:	70da      	strb	r2, [r3, #3]

		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8001edc:	4836      	ldr	r0, [pc, #216]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001ede:	f001 fa02 	bl	80032e6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a35      	ldr	r2, [pc, #212]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ee6:	6013      	str	r3, [r2, #0]
		//Send by CAN

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001eea:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001eee:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001ef0:	f001 f91f 	bl	8003132 <HAL_CAN_AddTxMessage>


	}

	//INTERRUPTION TIMER 3 (0.01 s)
	if (htim->Instance == TIM3){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d141      	bne.n	8001f82 <HAL_TIM_PeriodElapsedCallback+0x14a>

		//SPEED MEASURE

		vel_d = adc_values[0]/8.192; // para convertir de 12 bits a un intervalo de (0-500 rpm)
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa66 	bl	80003d4 <__aeabi_ui2d>
 8001f08:	a321      	add	r3, pc, #132	; (adr r3, 8001f90 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fc05 	bl	800071c <__aeabi_ddiv>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fce7 	bl	80008ec <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f22:	6013      	str	r3, [r2, #0]


		//CONTROL

		PIDController_Update(&pid, vel_d, vel_rpm);
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4828      	ldr	r0, [pc, #160]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f30:	f7ff f83d 	bl	8000fae <PIDController_Update>


		integral = pid.integrator;
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001f3a:	6013      	str	r3, [r2, #0]

		u = pid.out;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001f42:	6013      	str	r3, [r2, #0]

		duty_cycle = u;
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f4a:	6013      	str	r3, [r2, #0]


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f52:	6814      	ldr	r4, [r2, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ffed 	bl	8000f34 <__aeabi_f2uiz>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f64:	6814      	ldr	r4, [r2, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe ffe4 	bl	8000f34 <__aeabi_f2uiz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	63a3      	str	r3, [r4, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f76:	6814      	ldr	r4, [r2, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe ffdb 	bl	8000f34 <__aeabi_f2uiz>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	63e3      	str	r3, [r4, #60]	; 0x3c

		//HAL_GPIO_TogglePin(Test_out_GPIO_Port , Test_out_Pin);
	}

}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	f3af 8000 	nop.w
 8001f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f94:	4020624d 	.word	0x4020624d
 8001f98:	20000244 	.word	0x20000244
 8001f9c:	20000070 	.word	0x20000070
 8001fa0:	20000074 	.word	0x20000074
 8001fa4:	76b981db 	.word	0x76b981db
 8001fa8:	20000078 	.word	0x20000078
 8001fac:	437f0000 	.word	0x437f0000
 8001fb0:	2000016c 	.word	0x2000016c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000088 	.word	0x20000088
 8001fbc:	20000084 	.word	0x20000084
 8001fc0:	200001bc 	.word	0x200001bc
 8001fc4:	20000210 	.word	0x20000210
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	2000006c 	.word	0x2000006c
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	2000007c 	.word	0x2000007c
 8001fd8:	20000080 	.word	0x20000080
 8001fdc:	20000068 	.word	0x20000068
 8001fe0:	20000174 	.word	0x20000174

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_MspInit+0x5c>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_MspInit+0x5c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_MspInit+0x5c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_MspInit+0x5c>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_MspInit+0x5c>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_MspInit+0x5c>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_MspInit+0x60>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_MspInit+0x60>)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000

08002054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_ADC_MspInit+0xbc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d149      	bne.n	8002108 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a26      	ldr	r2, [pc, #152]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SPEED_REF_Pin|VOLTAGE_Pin|CURRENT_Pin|A_CURRENT_Pin
 80020a4:	233f      	movs	r3, #63	; 0x3f
 80020a6:	613b      	str	r3, [r7, #16]
                          |B_CURRENT_Pin|C_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a8:	2303      	movs	r3, #3
 80020aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	4819      	ldr	r0, [pc, #100]	; (8002118 <HAL_ADC_MspInit+0xc4>)
 80020b4:	f001 ffa0 	bl	8003ff8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_ADC_MspInit+0xcc>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020e2:	2220      	movs	r2, #32
 80020e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ec:	480b      	ldr	r0, [pc, #44]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020ee:	f001 fd95 	bl	8003c1c <HAL_DMA_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020f8:	f7ff ff74 	bl	8001fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_ADC_MspInit+0xc8>)
 8002100:	621a      	str	r2, [r3, #32]
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_ADC_MspInit+0xc8>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012400 	.word	0x40012400
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800
 800211c:	20000128 	.word	0x20000128
 8002120:	40020008 	.word	0x40020008

08002124 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <HAL_CAN_MspInit+0xac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d141      	bne.n	80021c8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 800214a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214e:	61d3      	str	r3, [r2, #28]
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <HAL_CAN_MspInit+0xb0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4619      	mov	r1, r3
 8002188:	4813      	ldr	r0, [pc, #76]	; (80021d8 <HAL_CAN_MspInit+0xb4>)
 800218a:	f001 ff35 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <HAL_CAN_MspInit+0xb4>)
 80021a4:	f001 ff28 	bl	8003ff8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2014      	movs	r0, #20
 80021ae:	f001 fcfe 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80021b2:	2014      	movs	r0, #20
 80021b4:	f001 fd17 	bl	8003be6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2015      	movs	r0, #21
 80021be:	f001 fcf6 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80021c2:	2015      	movs	r0, #21
 80021c4:	f001 fd0f 	bl	8003be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40006400 	.word	0x40006400
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010800 	.word	0x40010800

080021dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <HAL_TIM_Base_MspInit+0x9c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10c      	bne.n	8002208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	6193      	str	r3, [r2, #24]
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002206:	e032      	b.n	800226e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d114      	bne.n	800223c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	61d3      	str	r3, [r2, #28]
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	201c      	movs	r0, #28
 8002230:	f001 fcbd 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002234:	201c      	movs	r0, #28
 8002236:	f001 fcd6 	bl	8003be6 <HAL_NVIC_EnableIRQ>
}
 800223a:	e018      	b.n	800226e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_TIM_Base_MspInit+0xa4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d113      	bne.n	800226e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_TIM_Base_MspInit+0xa0>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	201d      	movs	r0, #29
 8002264:	f001 fca3 	bl	8003bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002268:	201d      	movs	r0, #29
 800226a:	f001 fcbc 	bl	8003be6 <HAL_NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40021000 	.word	0x40021000
 8002280:	40000400 	.word	0x40000400

08002284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a37      	ldr	r2, [pc, #220]	; (800237c <HAL_TIM_MspPostInit+0xf8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d119      	bne.n	80022d8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a35      	ldr	r2, [pc, #212]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 80022bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	482c      	ldr	r0, [pc, #176]	; (8002384 <HAL_TIM_MspPostInit+0x100>)
 80022d2:	f001 fe91 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022d6:	e04d      	b.n	8002374 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d12b      	bne.n	800233a <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6193      	str	r3, [r2, #24]
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	481d      	ldr	r0, [pc, #116]	; (8002384 <HAL_TIM_MspPostInit+0x100>)
 8002310:	f001 fe72 	bl	8003ff8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_TIM_MspPostInit+0x104>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_TIM_MspPostInit+0x104>)
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	6053      	str	r3, [r2, #4]
}
 8002338:	e01c      	b.n	8002374 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_TIM_MspPostInit+0x108>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d117      	bne.n	8002374 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_TIM_MspPostInit+0xfc>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800235c:	2340      	movs	r3, #64	; 0x40
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_TIM_MspPostInit+0x100>)
 8002370:	f001 fe42 	bl	8003ff8 <HAL_GPIO_Init>
}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40010800 	.word	0x40010800
 8002388:	40010000 	.word	0x40010000
 800238c:	40000400 	.word	0x40000400

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d6:	f000 f8bd 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_REF_Pin);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f001 ffbc 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VOLTAGE_Pin);
 80023f0:	2002      	movs	r0, #2
 80023f2:	f001 ffb5 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <DMA1_Channel1_IRQHandler+0x10>)
 8002402:	f001 fcc5 	bl	8003d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000128 	.word	0x20000128

08002410 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002416:	f001 f8d0 	bl	80035ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000088 	.word	0x20000088

08002424 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <CAN1_RX1_IRQHandler+0x10>)
 800242a:	f001 f8c6 	bl	80035ba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000088 	.word	0x20000088

08002438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM2_IRQHandler+0x10>)
 800243e:	f002 fe9f 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200001c8 	.word	0x200001c8

0800244c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM3_IRQHandler+0x10>)
 8002452:	f002 fe95 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200000b0 	.word	0x200000b0

08002460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 8002464:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002468:	f001 ff7a 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024a2:	f7ff ffe5 	bl	8002470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a6:	f003 fcd7 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024aa:	f7fe ff07 	bl	80012bc <main>
  bx lr
 80024ae:	4770      	bx	lr
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80024b8:	08005ef0 	.word	0x08005ef0
  ldr r2, =_sbss
 80024bc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80024c0:	20000264 	.word	0x20000264

080024c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC1_2_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_Init+0x28>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <HAL_Init+0x28>)
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f001 fb5d 	bl	8003b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 f808 	bl	80024f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e4:	f7ff fd84 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_InitTick+0x54>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_InitTick+0x58>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250a:	fbb3 f3f1 	udiv	r3, r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fb75 	bl	8003c02 <HAL_SYSTICK_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e00e      	b.n	8002540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d80a      	bhi.n	800253e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	f001 fb3d 	bl	8003bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_InitTick+0x5c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000034 	.word	0x20000034
 800254c:	2000003c 	.word	0x2000003c
 8002550:	20000038 	.word	0x20000038

08002554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_IncTick+0x1c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_IncTick+0x20>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_IncTick+0x20>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	2000003c 	.word	0x2000003c
 8002574:	20000260 	.word	0x20000260

08002578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_GetTick+0x10>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000260 	.word	0x20000260

0800258c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0be      	b.n	800272c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fd42 	bl	8002054 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 faff 	bl	8002bd4 <ADC_ConversionStop_Disable>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8099 	bne.w	800271a <HAL_ADC_Init+0x18e>
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 8095 	bne.w	800271a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	f043 0202 	orr.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800260c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7b1b      	ldrb	r3, [r3, #12]
 8002612:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002614:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4313      	orrs	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d003      	beq.n	800262e <HAL_ADC_Init+0xa2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_ADC_Init+0xa8>
 800262e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002632:	e000      	b.n	8002636 <HAL_ADC_Init+0xaa>
 8002634:	2300      	movs	r3, #0
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7d1b      	ldrb	r3, [r3, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d119      	bne.n	8002678 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	3b01      	subs	r3, #1
 8002652:	035a      	lsls	r2, r3, #13
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e00b      	b.n	8002678 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_ADC_Init+0x1a8>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a8:	d003      	beq.n	80026b2 <HAL_ADC_Init+0x126>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_ADC_Init+0x1ac>)
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10b      	bne.n	80026f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026f6:	e018      	b.n	800272a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f023 0312 	bic.w	r3, r3, #18
 8002700:	f043 0210 	orr.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffe1f7fd 	.word	0xffe1f7fd
 8002738:	ff1f0efe 	.word	0xff1f0efe

0800273c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a64      	ldr	r2, [pc, #400]	; (80028e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_ADC_Start_DMA+0x24>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_ADC_Start_DMA+0x1ac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d106      	bne.n	800276e <HAL_ADC_Start_DMA+0x32>
 8002760:	4b60      	ldr	r3, [pc, #384]	; (80028e4 <HAL_ADC_Start_DMA+0x1a8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 80b3 	bne.w	80028d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_ADC_Start_DMA+0x40>
 8002778:	2302      	movs	r3, #2
 800277a:	e0ae      	b.n	80028da <HAL_ADC_Start_DMA+0x19e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f9cb 	bl	8002b20 <ADC_Enable>
 800278a:	4603      	mov	r3, r0
 800278c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f040 809a 	bne.w	80028ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <HAL_ADC_Start_DMA+0x1ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_Start_DMA+0x84>
 80027b4:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <HAL_ADC_Start_DMA+0x1a8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d115      	bne.n	80027ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d026      	beq.n	8002828 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ea:	e01d      	b.n	8002828 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_ADC_Start_DMA+0x1a8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_ADC_Start_DMA+0xd0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a38      	ldr	r2, [pc, #224]	; (80028e8 <HAL_ADC_Start_DMA+0x1ac>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <HAL_ADC_Start_DMA+0xec>
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_ADC_Start_DMA+0x1a8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f023 0206 	bic.w	r2, r3, #6
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002840:	e002      	b.n	8002848 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <HAL_ADC_Start_DMA+0x1b0>)
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_ADC_Start_DMA+0x1b4>)
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <HAL_ADC_Start_DMA+0x1b8>)
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0202 	mvn.w	r2, #2
 8002870:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002880:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a18      	ldr	r0, [r3, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	334c      	adds	r3, #76	; 0x4c
 800288c:	4619      	mov	r1, r3
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f001 fa1d 	bl	8003cd0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028a4:	d108      	bne.n	80028b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028b6:	e00f      	b.n	80028d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028c8:	e006      	b.n	80028d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80028d2:	e001      	b.n	80028d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40012400 	.word	0x40012400
 80028e8:	40012800 	.word	0x40012800
 80028ec:	08002c57 	.word	0x08002c57
 80028f0:	08002cd3 	.word	0x08002cd3
 80028f4:	08002cef 	.word	0x08002cef

080028f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
	...

08002930 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x20>
 800294c:	2302      	movs	r3, #2
 800294e:	e0dc      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x1da>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b06      	cmp	r3, #6
 800295e:	d81c      	bhi.n	800299a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b05      	subs	r3, #5
 8002972:	221f      	movs	r2, #31
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4019      	ands	r1, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b05      	subs	r3, #5
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
 8002998:	e03c      	b.n	8002a14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d81c      	bhi.n	80029dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b23      	subs	r3, #35	; 0x23
 80029b4:	221f      	movs	r2, #31
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4019      	ands	r1, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	3b23      	subs	r3, #35	; 0x23
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
 80029da:	e01b      	b.n	8002a14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b41      	subs	r3, #65	; 0x41
 80029ee:	221f      	movs	r2, #31
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b41      	subs	r3, #65	; 0x41
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d91c      	bls.n	8002a56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b1e      	subs	r3, #30
 8002a2e:	2207      	movs	r2, #7
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4019      	ands	r1, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	3b1e      	subs	r3, #30
 8002a48:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	e019      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6919      	ldr	r1, [r3, #16]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	2207      	movs	r2, #7
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4019      	ands	r1, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6898      	ldr	r0, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d003      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a96:	2b11      	cmp	r3, #17
 8002a98:	d132      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_ADC_ConfigChannel+0x1e4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d125      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d126      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ac0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d11a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_ADC_ConfigChannel+0x1e8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <HAL_ADC_ConfigChannel+0x1ec>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	0c9a      	lsrs	r2, r3, #18
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1b2>
 8002aee:	e007      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40012400 	.word	0x40012400
 8002b18:	20000034 	.word	0x20000034
 8002b1c:	431bde83 	.word	0x431bde83

08002b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d040      	beq.n	8002bc0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <ADC_Enable+0xac>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <ADC_Enable+0xb0>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	0c9b      	lsrs	r3, r3, #18
 8002b5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b5c:	e002      	b.n	8002b64 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b6a:	f7ff fd05 	bl	8002578 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b70:	e01f      	b.n	8002bb2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b72:	f7ff fd01 	bl	8002578 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d918      	bls.n	8002bb2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d011      	beq.n	8002bb2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d1d8      	bne.n	8002b72 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000034 	.word	0x20000034
 8002bd0:	431bde83 	.word	0x431bde83

08002bd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d12e      	bne.n	8002c4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bfe:	f7ff fcbb 	bl	8002578 <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c04:	e01b      	b.n	8002c3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c06:	f7ff fcb7 	bl	8002578 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d914      	bls.n	8002c3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10d      	bne.n	8002c3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d0dc      	beq.n	8002c06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d127      	bne.n	8002cc0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c8a:	d115      	bne.n	8002cb8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d111      	bne.n	8002cb8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fe1d 	bl	80028f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cbe:	e004      	b.n	8002cca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fe12 	bl	800290a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fe01 	bl	800291c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0ed      	b.n	8002f10 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff f9ef 	bl	8002124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d56:	f7ff fc0f 	bl	8002578 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d5c:	e012      	b.n	8002d84 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d5e:	f7ff fc0b 	bl	8002578 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b0a      	cmp	r3, #10
 8002d6a:	d90b      	bls.n	8002d84 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0c5      	b.n	8002f10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0e5      	beq.n	8002d5e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0202 	bic.w	r2, r2, #2
 8002da0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da2:	f7ff fbe9 	bl	8002578 <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002da8:	e012      	b.n	8002dd0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002daa:	f7ff fbe5 	bl	8002578 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b0a      	cmp	r3, #10
 8002db6:	d90b      	bls.n	8002dd0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2205      	movs	r2, #5
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e09f      	b.n	8002f10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7e1b      	ldrb	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e5b      	ldrb	r3, [r3, #25]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e007      	b.n	8002e32 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7e9b      	ldrb	r3, [r3, #26]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0220 	bic.w	r2, r2, #32
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7edb      	ldrb	r3, [r3, #27]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d108      	bne.n	8002e76 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0210 	bic.w	r2, r2, #16
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0210 	orr.w	r2, r2, #16
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7f1b      	ldrb	r3, [r3, #28]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e007      	b.n	8002eb0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0208 	bic.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7f5b      	ldrb	r3, [r3, #29]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d108      	bne.n	8002eca <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0204 	orr.w	r2, r2, #4
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0204 	bic.w	r2, r2, #4
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d003      	beq.n	8002f3e <HAL_CAN_ConfigFilter+0x26>
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f040 80aa 	bne.w	8003092 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2201      	movs	r2, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	401a      	ands	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d123      	bne.n	8002fc0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3248      	adds	r2, #72	; 0x48
 8002fa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fb6:	6979      	ldr	r1, [r7, #20]
 8002fb8:	3348      	adds	r3, #72	; 0x48
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d122      	bne.n	800300e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fe8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3248      	adds	r2, #72	; 0x48
 8002fee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003002:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	3348      	adds	r3, #72	; 0x48
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003028:	e007      	b.n	800303a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	431a      	orrs	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	401a      	ands	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003054:	e007      	b.n	8003066 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	431a      	orrs	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	431a      	orrs	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003084:	f023 0201 	bic.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e006      	b.n	80030a0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d12e      	bne.n	800311c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030d6:	f7ff fa4f 	bl	8002578 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030dc:	e012      	b.n	8003104 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030de:	f7ff fa4b 	bl	8002578 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b0a      	cmp	r3, #10
 80030ea:	d90b      	bls.n	8003104 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2205      	movs	r2, #5
 80030fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e012      	b.n	800312a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e006      	b.n	800312a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003132:	b480      	push	{r7}
 8003134:	b089      	sub	sp, #36	; 0x24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003146:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d003      	beq.n	800315e <HAL_CAN_AddTxMessage+0x2c>
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	2b02      	cmp	r3, #2
 800315a:	f040 80b8 	bne.w	80032ce <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a0 	beq.w	80032be <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	0e1b      	lsrs	r3, r3, #24
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d907      	bls.n	800319e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e09e      	b.n	80032dc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800319e:	2201      	movs	r2, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	6809      	ldr	r1, [r1, #0]
 80031be:	431a      	orrs	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3318      	adds	r3, #24
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	440b      	add	r3, r1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00f      	b.n	80031ec <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80031e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3318      	adds	r3, #24
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	440b      	add	r3, r1
 80031ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3318      	adds	r3, #24
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	3304      	adds	r3, #4
 80031fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	7d1b      	ldrb	r3, [r3, #20]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d111      	bne.n	800322c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3318      	adds	r3, #24
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	6811      	ldr	r1, [r2, #0]
 800321c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3318      	adds	r3, #24
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	440b      	add	r3, r1
 8003228:	3304      	adds	r3, #4
 800322a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3307      	adds	r3, #7
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	061a      	lsls	r2, r3, #24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3306      	adds	r3, #6
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3305      	adds	r3, #5
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	4313      	orrs	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	3204      	adds	r2, #4
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	4610      	mov	r0, r2
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	6811      	ldr	r1, [r2, #0]
 8003254:	ea43 0200 	orr.w	r2, r3, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	440b      	add	r3, r1
 800325e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003262:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3303      	adds	r3, #3
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	061a      	lsls	r2, r3, #24
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3302      	adds	r3, #2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3301      	adds	r3, #1
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	4313      	orrs	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	4610      	mov	r0, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6811      	ldr	r1, [r2, #0]
 800328a:	ea43 0200 	orr.w	r2, r3, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	440b      	add	r3, r1
 8003294:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003298:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3318      	adds	r3, #24
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4413      	add	r3, r2
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	6811      	ldr	r1, [r2, #0]
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3318      	adds	r3, #24
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	440b      	add	r3, r1
 80032b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e00e      	b.n	80032dc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e006      	b.n	80032dc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3724      	adds	r7, #36	; 0x24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80032fa:	7afb      	ldrb	r3, [r7, #11]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d002      	beq.n	8003306 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d11d      	bne.n	8003342 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3301      	adds	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003342:	68fb      	ldr	r3, [r7, #12]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d003      	beq.n	8003372 <HAL_CAN_GetRxMessage+0x24>
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b02      	cmp	r3, #2
 800336e:	f040 80f3 	bne.w	8003558 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10e      	bne.n	8003396 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0e7      	b.n	8003566 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d8      	b.n	8003566 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	331b      	adds	r3, #27
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4413      	add	r3, r2
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0204 	and.w	r2, r3, #4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	331b      	adds	r3, #27
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0d5b      	lsrs	r3, r3, #21
 80033e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	331b      	adds	r3, #27
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	331b      	adds	r3, #27
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	4413      	add	r3, r2
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0202 	and.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	331b      	adds	r3, #27
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 020f 	and.w	r2, r3, #15
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	331b      	adds	r3, #27
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	b2da      	uxtb	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	331b      	adds	r3, #27
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4413      	add	r3, r2
 800346c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	4413      	add	r3, r2
 8003482:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0a1a      	lsrs	r2, r3, #8
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4413      	add	r3, r2
 800349c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0c1a      	lsrs	r2, r3, #16
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	3302      	adds	r3, #2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e1a      	lsrs	r2, r3, #24
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	3303      	adds	r3, #3
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	3304      	adds	r3, #4
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0a1a      	lsrs	r2, r3, #8
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	3305      	adds	r3, #5
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4413      	add	r3, r2
 8003502:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0c1a      	lsrs	r2, r3, #16
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	3306      	adds	r3, #6
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	4413      	add	r3, r2
 800351c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0e1a      	lsrs	r2, r3, #24
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	3307      	adds	r3, #7
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	e007      	b.n	8003554 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e006      	b.n	8003566 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003580:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d002      	beq.n	800358e <HAL_CAN_ActivateNotification+0x1e>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d109      	bne.n	80035a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6959      	ldr	r1, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e006      	b.n	80035b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08a      	sub	sp, #40	; 0x28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d07c      	beq.n	80036fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d023      	beq.n	8003652 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f983 	bl	8003928 <HAL_CAN_TxMailbox0CompleteCallback>
 8003622:	e016      	b.n	8003652 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	e00c      	b.n	8003652 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	e002      	b.n	8003652 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f986 	bl	800395e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d024      	beq.n	80036a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f962 	bl	800393a <HAL_CAN_TxMailbox1CompleteCallback>
 8003676:	e016      	b.n	80036a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e00c      	b.n	80036a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e002      	b.n	80036a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f965 	bl	8003970 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d024      	beq.n	80036fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f941 	bl	800394c <HAL_CAN_TxMailbox2CompleteCallback>
 80036ca:	e016      	b.n	80036fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	e00c      	b.n	80036fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e002      	b.n	80036fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f944 	bl	8003982 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003714:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2210      	movs	r2, #16
 800371c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2208      	movs	r2, #8
 8003738:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f92a 	bl	8003994 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fd fd27 	bl	80011ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2208      	movs	r2, #8
 800379c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f90a 	bl	80039b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8f2 	bl	80039a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d006      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2210      	movs	r2, #16
 80037dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8f3 	bl	80039ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2208      	movs	r2, #8
 80037fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8eb 	bl	80039dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d07b      	beq.n	8003908 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d072      	beq.n	8003900 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	2b00      	cmp	r3, #0
 8003876:	d043      	beq.n	8003900 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	d03e      	beq.n	8003900 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d02b      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x32a>
 800388c:	2b60      	cmp	r3, #96	; 0x60
 800388e:	d82e      	bhi.n	80038ee <HAL_CAN_IRQHandler+0x334>
 8003890:	2b50      	cmp	r3, #80	; 0x50
 8003892:	d022      	beq.n	80038da <HAL_CAN_IRQHandler+0x320>
 8003894:	2b50      	cmp	r3, #80	; 0x50
 8003896:	d82a      	bhi.n	80038ee <HAL_CAN_IRQHandler+0x334>
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d019      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x316>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d826      	bhi.n	80038ee <HAL_CAN_IRQHandler+0x334>
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d010      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x30c>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d822      	bhi.n	80038ee <HAL_CAN_IRQHandler+0x334>
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d002      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x2f8>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d005      	beq.n	80038bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038b0:	e01d      	b.n	80038ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f043 0308 	orr.w	r3, r3, #8
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ba:	e019      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	f043 0310 	orr.w	r3, r3, #16
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038c4:	e014      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ce:	e00f      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038d8:	e00a      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038e2:	e005      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ec:	e000      	b.n	80038f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80038ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2204      	movs	r2, #4
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f867 	bl	80039ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003920:	bf00      	nop
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <__NVIC_SetPriorityGrouping+0x44>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <__NVIC_GetPriorityGrouping+0x18>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0307 	and.w	r3, r3, #7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	db0b      	blt.n	8003a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	f003 021f 	and.w	r2, r3, #31
 8003a7c:	4906      	ldr	r1, [pc, #24]	; (8003a98 <__NVIC_EnableIRQ+0x34>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2001      	movs	r0, #1
 8003a86:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b64:	d301      	bcc.n	8003b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b66:	2301      	movs	r3, #1
 8003b68:	e00f      	b.n	8003b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <SysTick_Config+0x40>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b72:	210f      	movs	r1, #15
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295
 8003b78:	f7ff ff90 	bl	8003a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <SysTick_Config+0x40>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <SysTick_Config+0x40>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	e000e010 	.word	0xe000e010

08003b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff2d 	bl	8003a00 <__NVIC_SetPriorityGrouping>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bc0:	f7ff ff42 	bl	8003a48 <__NVIC_GetPriorityGrouping>
 8003bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff90 	bl	8003af0 <NVIC_EncodePriority>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff5f 	bl	8003a9c <__NVIC_SetPriority>
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff35 	bl	8003a64 <__NVIC_EnableIRQ>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffa2 	bl	8003b54 <SysTick_Config>
 8003c10:	4603      	mov	r3, r0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e043      	b.n	8003cba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_DMA_Init+0xa8>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_DMA_Init+0xac>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_DMA_Init+0xb0>)
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	bffdfff8 	.word	0xbffdfff8
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x20>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e04a      	b.n	8003d86 <HAL_DMA_Start_IT+0xb6>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d13a      	bne.n	8003d78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f938 	bl	8003f9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 020e 	orr.w	r2, r2, #14
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e00f      	b.n	8003d66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0204 	bic.w	r2, r2, #4
 8003d54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 020a 	orr.w	r2, r2, #10
 8003d64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e005      	b.n	8003d84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
 8003d82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2204      	movs	r2, #4
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d04f      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc8>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_DMA_IRQHandler+0x1f0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d029      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xae>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_DMA_IRQHandler+0x1f4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a63      	ldr	r2, [pc, #396]	; (8003f88 <HAL_DMA_IRQHandler+0x1f8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01a      	beq.n	8003e34 <HAL_DMA_IRQHandler+0xa4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a62      	ldr	r2, [pc, #392]	; (8003f8c <HAL_DMA_IRQHandler+0x1fc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d012      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x9e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a60      	ldr	r2, [pc, #384]	; (8003f90 <HAL_DMA_IRQHandler+0x200>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00a      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x98>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <HAL_DMA_IRQHandler+0x204>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d102      	bne.n	8003e22 <HAL_DMA_IRQHandler+0x92>
 8003e1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e20:	e00e      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e26:	e00b      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e2c:	e008      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e32:	e005      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e38:	e002      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	e000      	b.n	8003e40 <HAL_DMA_IRQHandler+0xb0>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	4a55      	ldr	r2, [pc, #340]	; (8003f98 <HAL_DMA_IRQHandler+0x208>)
 8003e42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8094 	beq.w	8003f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e56:	e08e      	b.n	8003f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d056      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x186>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d051      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 020a 	bic.w	r2, r2, #10
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <HAL_DMA_IRQHandler+0x1f0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d029      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x166>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <HAL_DMA_IRQHandler+0x1f4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x162>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <HAL_DMA_IRQHandler+0x1f8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x15c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a34      	ldr	r2, [pc, #208]	; (8003f8c <HAL_DMA_IRQHandler+0x1fc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d012      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x156>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <HAL_DMA_IRQHandler+0x200>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x150>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <HAL_DMA_IRQHandler+0x204>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d102      	bne.n	8003eda <HAL_DMA_IRQHandler+0x14a>
 8003ed4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ed8:	e00e      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ede:	e00b      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee4:	e008      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eea:	e005      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef0:	e002      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e000      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x168>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_DMA_IRQHandler+0x208>)
 8003efa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d034      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f14:	e02f      	b.n	8003f76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d028      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x1e8>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 020e 	bic.w	r2, r2, #14
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	4798      	blx	r3
    }
  }
  return;
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
}
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40020008 	.word	0x40020008
 8003f84:	4002001c 	.word	0x4002001c
 8003f88:	40020030 	.word	0x40020030
 8003f8c:	40020044 	.word	0x40020044
 8003f90:	40020058 	.word	0x40020058
 8003f94:	4002006c 	.word	0x4002006c
 8003f98:	40020000 	.word	0x40020000

08003f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d108      	bne.n	8003fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fda:	e007      	b.n	8003fec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b08b      	sub	sp, #44	; 0x2c
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e169      	b.n	80042e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800400c:	2201      	movs	r2, #1
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	429a      	cmp	r2, r3
 8004026:	f040 8158 	bne.w	80042da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4a9a      	ldr	r2, [pc, #616]	; (8004298 <HAL_GPIO_Init+0x2a0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d05e      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004034:	4a98      	ldr	r2, [pc, #608]	; (8004298 <HAL_GPIO_Init+0x2a0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d875      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800403a:	4a98      	ldr	r2, [pc, #608]	; (800429c <HAL_GPIO_Init+0x2a4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d058      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004040:	4a96      	ldr	r2, [pc, #600]	; (800429c <HAL_GPIO_Init+0x2a4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d86f      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004046:	4a96      	ldr	r2, [pc, #600]	; (80042a0 <HAL_GPIO_Init+0x2a8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d052      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 800404c:	4a94      	ldr	r2, [pc, #592]	; (80042a0 <HAL_GPIO_Init+0x2a8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d869      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004052:	4a94      	ldr	r2, [pc, #592]	; (80042a4 <HAL_GPIO_Init+0x2ac>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04c      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004058:	4a92      	ldr	r2, [pc, #584]	; (80042a4 <HAL_GPIO_Init+0x2ac>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d863      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800405e:	4a92      	ldr	r2, [pc, #584]	; (80042a8 <HAL_GPIO_Init+0x2b0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d046      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
 8004064:	4a90      	ldr	r2, [pc, #576]	; (80042a8 <HAL_GPIO_Init+0x2b0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d85d      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 800406a:	2b12      	cmp	r3, #18
 800406c:	d82a      	bhi.n	80040c4 <HAL_GPIO_Init+0xcc>
 800406e:	2b12      	cmp	r3, #18
 8004070:	d859      	bhi.n	8004126 <HAL_GPIO_Init+0x12e>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HAL_GPIO_Init+0x80>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040f3 	.word	0x080040f3
 800407c:	080040cd 	.word	0x080040cd
 8004080:	080040df 	.word	0x080040df
 8004084:	08004121 	.word	0x08004121
 8004088:	08004127 	.word	0x08004127
 800408c:	08004127 	.word	0x08004127
 8004090:	08004127 	.word	0x08004127
 8004094:	08004127 	.word	0x08004127
 8004098:	08004127 	.word	0x08004127
 800409c:	08004127 	.word	0x08004127
 80040a0:	08004127 	.word	0x08004127
 80040a4:	08004127 	.word	0x08004127
 80040a8:	08004127 	.word	0x08004127
 80040ac:	08004127 	.word	0x08004127
 80040b0:	08004127 	.word	0x08004127
 80040b4:	08004127 	.word	0x08004127
 80040b8:	08004127 	.word	0x08004127
 80040bc:	080040d5 	.word	0x080040d5
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	4a79      	ldr	r2, [pc, #484]	; (80042ac <HAL_GPIO_Init+0x2b4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040ca:	e02c      	b.n	8004126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	623b      	str	r3, [r7, #32]
          break;
 80040d2:	e029      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	623b      	str	r3, [r7, #32]
          break;
 80040dc:	e024      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	3308      	adds	r3, #8
 80040e4:	623b      	str	r3, [r7, #32]
          break;
 80040e6:	e01f      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	330c      	adds	r3, #12
 80040ee:	623b      	str	r3, [r7, #32]
          break;
 80040f0:	e01a      	b.n	8004128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040fa:	2304      	movs	r3, #4
 80040fc:	623b      	str	r3, [r7, #32]
          break;
 80040fe:	e013      	b.n	8004128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004108:	2308      	movs	r3, #8
 800410a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	611a      	str	r2, [r3, #16]
          break;
 8004112:	e009      	b.n	8004128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004114:	2308      	movs	r3, #8
 8004116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	615a      	str	r2, [r3, #20]
          break;
 800411e:	e003      	b.n	8004128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004120:	2300      	movs	r3, #0
 8004122:	623b      	str	r3, [r7, #32]
          break;
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x130>
          break;
 8004126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d801      	bhi.n	8004132 <HAL_GPIO_Init+0x13a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	e001      	b.n	8004136 <HAL_GPIO_Init+0x13e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2bff      	cmp	r3, #255	; 0xff
 800413c:	d802      	bhi.n	8004144 <HAL_GPIO_Init+0x14c>
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x152>
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	3b08      	subs	r3, #8
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	210f      	movs	r1, #15
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80b1 	beq.w	80042da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004178:	4b4d      	ldr	r3, [pc, #308]	; (80042b0 <HAL_GPIO_Init+0x2b8>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4a4c      	ldr	r2, [pc, #304]	; (80042b0 <HAL_GPIO_Init+0x2b8>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6193      	str	r3, [r2, #24]
 8004184:	4b4a      	ldr	r3, [pc, #296]	; (80042b0 <HAL_GPIO_Init+0x2b8>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004190:	4a48      	ldr	r2, [pc, #288]	; (80042b4 <HAL_GPIO_Init+0x2bc>)
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <HAL_GPIO_Init+0x2c0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_GPIO_Init+0x1ec>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3f      	ldr	r2, [pc, #252]	; (80042bc <HAL_GPIO_Init+0x2c4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00d      	beq.n	80041e0 <HAL_GPIO_Init+0x1e8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3e      	ldr	r2, [pc, #248]	; (80042c0 <HAL_GPIO_Init+0x2c8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <HAL_GPIO_Init+0x1e4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <HAL_GPIO_Init+0x2cc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_GPIO_Init+0x1e0>
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <HAL_GPIO_Init+0x1ee>
 80041d8:	2304      	movs	r3, #4
 80041da:	e004      	b.n	80041e6 <HAL_GPIO_Init+0x1ee>
 80041dc:	2302      	movs	r3, #2
 80041de:	e002      	b.n	80041e6 <HAL_GPIO_Init+0x1ee>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_GPIO_Init+0x1ee>
 80041e4:	2300      	movs	r3, #0
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	4093      	lsls	r3, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041f6:	492f      	ldr	r1, [pc, #188]	; (80042b4 <HAL_GPIO_Init+0x2bc>)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3302      	adds	r3, #2
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	492c      	ldr	r1, [pc, #176]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
 800421c:	e006      	b.n	800422c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800421e:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	43db      	mvns	r3, r3
 8004226:	4928      	ldr	r1, [pc, #160]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004228:	4013      	ands	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004238:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4922      	ldr	r1, [pc, #136]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
 8004244:	e006      	b.n	8004254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	43db      	mvns	r3, r3
 800424e:	491e      	ldr	r1, [pc, #120]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004250:	4013      	ands	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004260:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4918      	ldr	r1, [pc, #96]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800426e:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	43db      	mvns	r3, r3
 8004276:	4914      	ldr	r1, [pc, #80]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 8004278:	4013      	ands	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d021      	beq.n	80042cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <HAL_GPIO_Init+0x2d0>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	60cb      	str	r3, [r1, #12]
 8004294:	e021      	b.n	80042da <HAL_GPIO_Init+0x2e2>
 8004296:	bf00      	nop
 8004298:	10320000 	.word	0x10320000
 800429c:	10310000 	.word	0x10310000
 80042a0:	10220000 	.word	0x10220000
 80042a4:	10210000 	.word	0x10210000
 80042a8:	10120000 	.word	0x10120000
 80042ac:	10110000 	.word	0x10110000
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40010800 	.word	0x40010800
 80042bc:	40010c00 	.word	0x40010c00
 80042c0:	40011000 	.word	0x40011000
 80042c4:	40011400 	.word	0x40011400
 80042c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_GPIO_Init+0x304>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	4909      	ldr	r1, [pc, #36]	; (80042fc <HAL_GPIO_Init+0x304>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	3301      	adds	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f ae8e 	bne.w	800400c <HAL_GPIO_Init+0x14>
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	372c      	adds	r7, #44	; 0x2c
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	40010400 	.word	0x40010400

08004300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	807b      	strh	r3, [r7, #2]
 800433a:	4613      	mov	r3, r2
 800433c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800433e:	787b      	ldrb	r3, [r7, #1]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004344:	887a      	ldrh	r2, [r7, #2]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800434a:	e003      	b.n	8004354 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	041a      	lsls	r2, r3, #16
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	611a      	str	r2, [r3, #16]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
	...

08004360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004376:	4a05      	ldr	r2, [pc, #20]	; (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fd02 	bl	8001d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40010400 	.word	0x40010400

08004390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e26c      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8087 	beq.w	80044be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b0:	4b92      	ldr	r3, [pc, #584]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d00c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043bc:	4b8f      	ldr	r3, [pc, #572]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d112      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
 80043c8:	4b8c      	ldr	r3, [pc, #560]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b89      	ldr	r3, [pc, #548]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06c      	beq.n	80044bc <HAL_RCC_OscConfig+0x12c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d168      	bne.n	80044bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e246      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x76>
 80043f8:	4b80      	ldr	r3, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7f      	ldr	r2, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e02e      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x98>
 800440e:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0xbc>
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 800444c:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6a      	ldr	r2, [pc, #424]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a67      	ldr	r2, [pc, #412]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe f884 	bl	8002578 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fe f880 	bl	8002578 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1fa      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0xe4>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe f870 	bl	8002578 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fe f86c 	bl	8002578 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1e6      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x10c>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d063      	beq.n	8004592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ca:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044d6:	4b49      	ldr	r3, [pc, #292]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d11c      	bne.n	800451c <HAL_RCC_OscConfig+0x18c>
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_RCC_OscConfig+0x176>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e1ba      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4939      	ldr	r1, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	e03a      	b.n	8004592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004524:	4b36      	ldr	r3, [pc, #216]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fe f825 	bl	8002578 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004532:	f7fe f821 	bl	8002578 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e19b      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4927      	ldr	r1, [pc, #156]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]
 8004564:	e015      	b.n	8004592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe f804 	bl	8002578 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004574:	f7fe f800 	bl	8002578 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e17a      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d03a      	beq.n	8004614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d019      	beq.n	80045da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ac:	f7fd ffe4 	bl	8002578 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b4:	f7fd ffe0 	bl	8002578 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e15a      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045d2:	2001      	movs	r0, #1
 80045d4:	f000 faa8 	bl	8004b28 <RCC_Delay>
 80045d8:	e01c      	b.n	8004614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fd ffca 	bl	8002578 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e6:	e00f      	b.n	8004608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd ffc6 	bl	8002578 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d908      	bls.n	8004608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e140      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	42420000 	.word	0x42420000
 8004604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	4b9e      	ldr	r3, [pc, #632]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e9      	bne.n	80045e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a6 	beq.w	800476e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b97      	ldr	r3, [pc, #604]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b94      	ldr	r3, [pc, #592]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a93      	ldr	r2, [pc, #588]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	61d3      	str	r3, [r2, #28]
 800463e:	4b91      	ldr	r3, [pc, #580]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	4b8e      	ldr	r3, [pc, #568]	; (8004888 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465a:	4b8b      	ldr	r3, [pc, #556]	; (8004888 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a8a      	ldr	r2, [pc, #552]	; (8004888 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fd ff87 	bl	8002578 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fd ff83 	bl	8002578 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b64      	cmp	r3, #100	; 0x64
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0fd      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b81      	ldr	r3, [pc, #516]	; (8004888 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x312>
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4a7a      	ldr	r2, [pc, #488]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6213      	str	r3, [r2, #32]
 80046a0:	e02d      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x334>
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a72      	ldr	r2, [pc, #456]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6213      	str	r3, [r2, #32]
 80046c2:	e01c      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCC_OscConfig+0x356>
 80046cc:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4a6c      	ldr	r2, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6213      	str	r3, [r2, #32]
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a69      	ldr	r2, [pc, #420]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	e00b      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046e6:	4b67      	ldr	r3, [pc, #412]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4a66      	ldr	r2, [pc, #408]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6213      	str	r3, [r2, #32]
 80046f2:	4b64      	ldr	r3, [pc, #400]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a63      	ldr	r2, [pc, #396]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fd ff37 	bl	8002578 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd ff33 	bl	8002578 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0ab      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b57      	ldr	r3, [pc, #348]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ee      	beq.n	800470e <HAL_RCC_OscConfig+0x37e>
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fd ff21 	bl	8002578 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd ff1d 	bl	8002578 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e095      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a47      	ldr	r2, [pc, #284]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8081 	beq.w	800487a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004778:	4b42      	ldr	r3, [pc, #264]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d061      	beq.n	8004848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d146      	bne.n	800481a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b3f      	ldr	r3, [pc, #252]	; (800488c <HAL_RCC_OscConfig+0x4fc>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fd fef1 	bl	8002578 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fd feed 	bl	8002578 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e067      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d108      	bne.n	80047d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	492d      	ldr	r1, [pc, #180]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a19      	ldr	r1, [r3, #32]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	430b      	orrs	r3, r1
 80047e6:	4927      	ldr	r1, [pc, #156]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <HAL_RCC_OscConfig+0x4fc>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fd fec1 	bl	8002578 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fd febd 	bl	8002578 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e037      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x46a>
 8004818:	e02f      	b.n	800487a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_RCC_OscConfig+0x4fc>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fd feaa 	bl	8002578 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fd fea6 	bl	8002578 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e020      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x498>
 8004846:	e018      	b.n	800487a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e013      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x4f4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	429a      	cmp	r2, r3
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	42420060 	.word	0x42420060

08004890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0d0      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d910      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b67      	ldr	r3, [pc, #412]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4965      	ldr	r1, [pc, #404]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a58      	ldr	r2, [pc, #352]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800490e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d040      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e073      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06b      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4936      	ldr	r1, [pc, #216]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004980:	f7fd fdfa 	bl	8002578 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fd fdf6 	bl	8002578 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e053      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d210      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 0207 	bic.w	r2, r3, #7
 80049c6:	4922      	ldr	r1, [pc, #136]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1cc>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1d0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fd58 	bl	80024f4 <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	08005ed8 	.word	0x08005ed8
 8004a5c:	20000034 	.word	0x20000034
 8004a60:	20000038 	.word	0x20000038

08004a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	b490      	push	{r4, r7}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a6c:	1d3c      	adds	r4, r7, #4
 8004a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a74:	f240 2301 	movw	r3, #513	; 0x201
 8004a78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d002      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x46>
 8004aa2:	e02d      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa6:	623b      	str	r3, [r7, #32]
      break;
 8004aa8:	e02d      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	0c9b      	lsrs	r3, r3, #18
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004abc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c5b      	lsrs	r3, r3, #17
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004adc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae2:	fb02 f203 	mul.w	r2, r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e004      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	623b      	str	r3, [r7, #32]
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b02:	623b      	str	r3, [r7, #32]
      break;
 8004b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc90      	pop	{r4, r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	08005ec8 	.word	0x08005ec8
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	003d0900 	.word	0x003d0900
 8004b24:	007a1200 	.word	0x007a1200

08004b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <RCC_Delay+0x34>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <RCC_Delay+0x38>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	0a5b      	lsrs	r3, r3, #9
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b44:	bf00      	nop
  }
  while (Delay --);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	60fa      	str	r2, [r7, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f9      	bne.n	8004b44 <RCC_Delay+0x1c>
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	20000034 	.word	0x20000034
 8004b60:	10624dd3 	.word	0x10624dd3

08004b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d07d      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b84:	4b4f      	ldr	r3, [pc, #316]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10d      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4a4b      	ldr	r2, [pc, #300]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	61d3      	str	r3, [r2, #28]
 8004b9c:	4b49      	ldr	r3, [pc, #292]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d118      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb8:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a42      	ldr	r2, [pc, #264]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc4:	f7fd fcd8 	bl	8002578 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	e008      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fd fcd4 	bl	8002578 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e06d      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02e      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d027      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c08:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c1e:	4a29      	ldr	r2, [pc, #164]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d014      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fd fca3 	bl	8002578 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fd fc9f 	bl	8002578 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e036      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c58:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4917      	ldr	r1, [pc, #92]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c6a:	7dfb      	ldrb	r3, [r7, #23]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c70:	4b14      	ldr	r3, [pc, #80]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c88:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	42420440 	.word	0x42420440

08004cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e041      	b.n	8004d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd fa70 	bl	80021dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 fd3c 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d001      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e03a      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <HAL_TIM_Base_Start_IT+0x98>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x58>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d009      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x58>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_TIM_Base_Start_IT+0x9c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x58>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d111      	bne.n	8004dec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b06      	cmp	r3, #6
 8004dd8:	d010      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	e007      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800

08004e14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e041      	b.n	8004eaa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f839 	bl	8004eb2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 fc9a 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e041      	b.n	8004f5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f839 	bl	8004f62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fc42 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <HAL_TIM_PWM_Start+0x24>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e022      	b.n	8004fde <HAL_TIM_PWM_Start+0x6a>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d109      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x3e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e015      	b.n	8004fde <HAL_TIM_PWM_Start+0x6a>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d109      	bne.n	8004fcc <HAL_TIM_PWM_Start+0x58>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e008      	b.n	8004fde <HAL_TIM_PWM_Start+0x6a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e05e      	b.n	80050a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x82>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff4:	e013      	b.n	800501e <HAL_TIM_PWM_Start+0xaa>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0x92>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	e00b      	b.n	800501e <HAL_TIM_PWM_Start+0xaa>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	e003      	b.n	800501e <HAL_TIM_PWM_Start+0xaa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fe30 	bl	8005c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_TIM_PWM_Start+0x138>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d107      	bne.n	8005046 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIM_PWM_Start+0x138>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIM_PWM_Start+0xfa>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005058:	d009      	beq.n	800506e <HAL_TIM_PWM_Start+0xfa>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <HAL_TIM_PWM_Start+0x13c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIM_PWM_Start+0xfa>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a12      	ldr	r2, [pc, #72]	; (80050b4 <HAL_TIM_PWM_Start+0x140>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d111      	bne.n	8005092 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d010      	beq.n	80050a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	e007      	b.n	80050a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800

080050b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fdde 	bl	8005c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a29      	ldr	r2, [pc, #164]	; (800517c <HAL_TIM_PWM_Stop+0xc4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d117      	bne.n	800510a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10f      	bne.n	800510a <HAL_TIM_PWM_Stop+0x52>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	f240 4344 	movw	r3, #1092	; 0x444
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d107      	bne.n	800510a <HAL_TIM_PWM_Stop+0x52>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	f241 1311 	movw	r3, #4369	; 0x1111
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10f      	bne.n	800513a <HAL_TIM_PWM_Stop+0x82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	f240 4344 	movw	r3, #1092	; 0x444
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d107      	bne.n	800513a <HAL_TIM_PWM_Stop+0x82>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_TIM_PWM_Stop+0x92>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	e013      	b.n	8005172 <HAL_TIM_PWM_Stop+0xba>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d104      	bne.n	800515a <HAL_TIM_PWM_Stop+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	e00b      	b.n	8005172 <HAL_TIM_PWM_Stop+0xba>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Stop+0xb2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005168:	e003      	b.n	8005172 <HAL_TIM_PWM_Stop+0xba>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40012c00 	.word	0x40012c00

08005180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0202 	mvn.w	r2, #2
 80051ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fac7 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 faba 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fac9 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0204 	mvn.w	r2, #4
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa9d 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa90 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa9f 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b08      	cmp	r3, #8
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0208 	mvn.w	r2, #8
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa73 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa66 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa75 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0210 	mvn.w	r2, #16
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2208      	movs	r2, #8
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa49 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa3c 	bl	8005744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa4b 	bl	8005768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0201 	mvn.w	r2, #1
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc fd9a 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d10e      	bne.n	8005330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d107      	bne.n	8005330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fd8a 	bl	8005e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b40      	cmp	r3, #64	; 0x40
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa0f 	bl	800577a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0220 	mvn.w	r2, #32
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fd55 	bl	8005e32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e046      	b.n	8005438 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d839      	bhi.n	800542c <HAL_TIM_OC_ConfigChannel+0x9c>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	0800542d 	.word	0x0800542d
 80053cc:	0800542d 	.word	0x0800542d
 80053d0:	08005403 	.word	0x08005403
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	0800542d 	.word	0x0800542d
 80053e0:	08005411 	.word	0x08005411
 80053e4:	0800542d 	.word	0x0800542d
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800541f 	.word	0x0800541f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa28 	bl	8005850 <TIM_OC1_SetConfig>
      break;
 8005400:	e015      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fa87 	bl	800591c <TIM_OC2_SetConfig>
      break;
 800540e:	e00e      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 faea 	bl	80059f0 <TIM_OC3_SetConfig>
      break;
 800541c:	e007      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fb4d 	bl	8005ac4 <TIM_OC4_SetConfig>
      break;
 800542a:	e000      	b.n	800542e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800542c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005456:	2302      	movs	r3, #2
 8005458:	e0ac      	b.n	80055b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	f200 809f 	bhi.w	80055a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080055a9 	.word	0x080055a9
 8005478:	080055a9 	.word	0x080055a9
 800547c:	080055a9 	.word	0x080055a9
 8005480:	080054e5 	.word	0x080054e5
 8005484:	080055a9 	.word	0x080055a9
 8005488:	080055a9 	.word	0x080055a9
 800548c:	080055a9 	.word	0x080055a9
 8005490:	08005527 	.word	0x08005527
 8005494:	080055a9 	.word	0x080055a9
 8005498:	080055a9 	.word	0x080055a9
 800549c:	080055a9 	.word	0x080055a9
 80054a0:	08005567 	.word	0x08005567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f9d0 	bl	8005850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0204 	bic.w	r2, r2, #4
 80054ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6999      	ldr	r1, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	619a      	str	r2, [r3, #24]
      break;
 80054e2:	e062      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fa16 	bl	800591c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6999      	ldr	r1, [r3, #24]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	021a      	lsls	r2, r3, #8
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	619a      	str	r2, [r3, #24]
      break;
 8005524:	e041      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fa5f 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0208 	orr.w	r2, r2, #8
 8005540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69d9      	ldr	r1, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
      break;
 8005564:	e021      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 faa9 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69d9      	ldr	r1, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	61da      	str	r2, [r3, #28]
      break;
 80055a6:	e000      	b.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80055a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_ConfigClockSource+0x18>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e0b3      	b.n	800573c <HAL_TIM_ConfigClockSource+0x180>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560c:	d03e      	beq.n	800568c <HAL_TIM_ConfigClockSource+0xd0>
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005612:	f200 8087 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x168>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	f000 8085 	beq.w	8005728 <HAL_TIM_ConfigClockSource+0x16c>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d87f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 8005624:	2b70      	cmp	r3, #112	; 0x70
 8005626:	d01a      	beq.n	800565e <HAL_TIM_ConfigClockSource+0xa2>
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d87b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 800562c:	2b60      	cmp	r3, #96	; 0x60
 800562e:	d050      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x116>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d877      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 8005634:	2b50      	cmp	r3, #80	; 0x50
 8005636:	d03c      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0xf6>
 8005638:	2b50      	cmp	r3, #80	; 0x50
 800563a:	d873      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d058      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x136>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d86f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 8005644:	2b30      	cmp	r3, #48	; 0x30
 8005646:	d064      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x156>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d86b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d060      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x156>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d867      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05c      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x156>
 8005658:	2b10      	cmp	r3, #16
 800565a:	d05a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800565c:	e062      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6899      	ldr	r1, [r3, #8]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f000 faee 	bl	8005c4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	609a      	str	r2, [r3, #8]
      break;
 800568a:	e04e      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f000 fad7 	bl	8005c4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ae:	609a      	str	r2, [r3, #8]
      break;
 80056b0:	e03b      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	461a      	mov	r2, r3
 80056c0:	f000 fa4e 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2150      	movs	r1, #80	; 0x50
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 faa5 	bl	8005c1a <TIM_ITRx_SetConfig>
      break;
 80056d0:	e02b      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fa6c 	bl	8005bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2160      	movs	r1, #96	; 0x60
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fa95 	bl	8005c1a <TIM_ITRx_SetConfig>
      break;
 80056f0:	e01b      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fa2e 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2140      	movs	r1, #64	; 0x40
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa85 	bl	8005c1a <TIM_ITRx_SetConfig>
      break;
 8005710:	e00b      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fa7c 	bl	8005c1a <TIM_ITRx_SetConfig>
        break;
 8005722:	e002      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a29      	ldr	r2, [pc, #164]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a26      	ldr	r2, [pc, #152]	; (8005848 <TIM_Base_SetConfig+0xbc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x30>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a25      	ldr	r2, [pc, #148]	; (800584c <TIM_Base_SetConfig+0xc0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <TIM_Base_SetConfig+0xbc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0x62>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <TIM_Base_SetConfig+0xc0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a07      	ldr	r2, [pc, #28]	; (8005844 <TIM_Base_SetConfig+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800

08005850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 0302 	bic.w	r3, r3, #2
 8005898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <TIM_OC1_SetConfig+0xc8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10c      	bne.n	80058c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0308 	bic.w	r3, r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <TIM_OC1_SetConfig+0xc8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40012c00 	.word	0x40012c00

0800591c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0320 	bic.w	r3, r3, #32
 8005966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <TIM_OC2_SetConfig+0xd0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10d      	bne.n	8005998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a14      	ldr	r2, [pc, #80]	; (80059ec <TIM_OC2_SetConfig+0xd0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d113      	bne.n	80059c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	621a      	str	r2, [r3, #32]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	40012c00 	.word	0x40012c00

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <TIM_OC3_SetConfig+0xd0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10d      	bne.n	8005a6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <TIM_OC3_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d113      	bne.n	8005a9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40012c00 	.word	0x40012c00

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a0f      	ldr	r2, [pc, #60]	; (8005b5c <TIM_OC4_SetConfig+0x98>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d109      	bne.n	8005b38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00

08005b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 030a 	bic.w	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f043 0307 	orr.w	r3, r3, #7
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	021a      	lsls	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	609a      	str	r2, [r3, #8]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e046      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800

08005d90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e03d      	b.n	8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr
	...

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	4d0c      	ldr	r5, [pc, #48]	; (8005e90 <__libc_init_array+0x38>)
 8005e5e:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	f000 f822 	bl	8005eb0 <_init>
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	4d0a      	ldr	r5, [pc, #40]	; (8005e98 <__libc_init_array+0x40>)
 8005e70:	4c0a      	ldr	r4, [pc, #40]	; (8005e9c <__libc_init_array+0x44>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08005ee8 	.word	0x08005ee8
 8005e94:	08005ee8 	.word	0x08005ee8
 8005e98:	08005ee8 	.word	0x08005ee8
 8005e9c:	08005eec 	.word	0x08005eec

08005ea0 <memset>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
