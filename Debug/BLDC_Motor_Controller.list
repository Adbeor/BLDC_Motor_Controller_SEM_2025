
BLDC_Motor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f30  08005f30  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f30  08005f30  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000003c  08005f74  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005f74  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cae8  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f76  00000000  00000000  0002cb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017956  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d52d  00000000  00000000  00047ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfff  00000000  00000000  00055213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  000e1268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000003c 	.word	0x2000003c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ef8 	.word	0x08005ef8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000040 	.word	0x20000040
 800014c:	08005ef8 	.word	0x08005ef8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <PIDController_Init>:
 *      Author: del
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
	pid->prevError  = 0.0f;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000fae:	b5b0      	push	{r4, r5, r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f7ff fce9 	bl	8000994 <__aeabi_fsub>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff fdeb 	bl	8000ba8 <__aeabi_fmul>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	69dc      	ldr	r4, [r3, #28]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fde0 	bl	8000ba8 <__aeabi_fmul>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f7ff fdd8 	bl	8000ba8 <__aeabi_fmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fcc8 	bl	8000998 <__addsf3>
 8001008:	4603      	mov	r3, r0
 800100a:	4619      	mov	r1, r3
 800100c:	4628      	mov	r0, r5
 800100e:	f7ff fdcb 	bl	8000ba8 <__aeabi_fmul>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fcbe 	bl	8000998 <__addsf3>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	61da      	str	r2, [r3, #28]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMax) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f7ff ff76 	bl	8000f20 <__aeabi_fcmpgt>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <PIDController_Update+0x96>

        pid->integrator = pid->limMax;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	61da      	str	r2, [r3, #28]
 8001042:	e00e      	b.n	8001062 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMin) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff48 	bl	8000ee4 <__aeabi_fcmplt>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <PIDController_Update+0xb4>

        pid->integrator = pid->limMin;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	61da      	str	r2, [r3, #28]

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4619      	mov	r1, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc95 	bl	8000998 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	461c      	mov	r4, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fc8b 	bl	8000994 <__aeabi_fsub>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd90 	bl	8000ba8 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4619      	mov	r1, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc80 	bl	8000998 <__addsf3>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f7ff fc76 	bl	8000994 <__aeabi_fsub>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fd78 	bl	8000ba8 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fc6b 	bl	8000998 <__addsf3>
 80010c2:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010c4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc62 	bl	8000998 <__addsf3>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff fc5a 	bl	8000998 <__addsf3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fe11 	bl	8000d10 <__aeabi_fdiv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc4b 	bl	8000998 <__addsf3>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fc43 	bl	8000998 <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f7ff fefb 	bl	8000f20 <__aeabi_fcmpgt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
 8001138:	e00e      	b.n	8001158 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff fecd 	bl	8000ee4 <__aeabi_fcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}

08001170 <PIDController_Reset>:

void PIDController_Reset(PIDController *pid) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
 	pid->prevError  = 0.0f;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_CAN_RxFifo0MsgPendingCallback>:
//PID
PIDController pid = { PID_KP, PID_KI, PID_KD, PID_TAU,
						PID_LIM_MIN, PID_LIM_MAX, SAMPLE_TIME_S };

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f002 f8eb 	bl	8003396 <HAL_CAN_GetRxMessage>

	if (RxData[0] == 96 && RxData[1] == 234){ // HMI Page 60000
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b60      	cmp	r3, #96	; 0x60
 80011c6:	d159      	bne.n	800127c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	2bea      	cmp	r3, #234	; 0xea
 80011ce:	d155      	bne.n	800127c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>

		if (RxData[4] == 1){ //HMI button 1
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			power = 1;
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		}
		if (RxData[4] == 2){ //HMI button 2
 80011de:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d102      	bne.n	80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
			power = 0;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		}


		if (RxData[5] == 16){ //HMI down button
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d10d      	bne.n	8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
			//TxData[4] = 0;		//Change button color
			CAN_FLAG_REG &= ~(1 << CS1);
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f023 0320 	bic.w	r3, r3, #32
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001200:	701a      	strb	r2, [r3, #0]
			CAN_FLAG_REG &= ~(1 << CS0); //Cruise speed 0
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f023 0310 	bic.w	r3, r3, #16
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800120e:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 8){ //HMI left button
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001212:	795b      	ldrb	r3, [r3, #5]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d10d      	bne.n	8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			//TxData[4] = 1; 		//Change button color
			CAN_FLAG_REG &= ~(1 << CS1);
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f023 0320 	bic.w	r3, r3, #32
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001224:	701a      	strb	r2, [r3, #0]
			CAN_FLAG_REG |=  (1 << CS0); //Cruise speed 1
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001232:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 32){ //HMI right button
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001236:	795b      	ldrb	r3, [r3, #5]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10d      	bne.n	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			//TxData[4] = 2;		//Change button color
			CAN_FLAG_REG |=  (1 << CS1);
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001248:	701a      	strb	r2, [r3, #0]
			CAN_FLAG_REG &= ~(1 << CS0); //Cruise speed 2
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f023 0310 	bic.w	r3, r3, #16
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001256:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 2){ //HMI up button
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800125a:	795b      	ldrb	r3, [r3, #5]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d10d      	bne.n	800127c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
			//TxData[4] = 3;		//Change button color
			CAN_FLAG_REG |=  (1 << CS1);
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800126c:	701a      	strb	r2, [r3, #0]
			CAN_FLAG_REG |=  (1 << CS0); //Cruise speed 3
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800127a:	701a      	strb	r2, [r3, #0]
		}

	}


}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001c4 	.word	0x200001c4
 8001288:	2000022c 	.word	0x2000022c
 800128c:	20000058 	.word	0x20000058
 8001290:	2000016c 	.word	0x2000016c
 8001294:	00000000 	.word	0x00000000

08001298 <get_temp>:
#define V25  1.43
#define Avg_Slope .0043
#define VSENSE 3.3/4096   // 3.3 v and 12 bits so 4096

float get_temp (uint32_t variable)   // function to read temp from the value
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	return (((V25 - VSENSE*variable) / Avg_Slope) + 25);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff f897 	bl	80003d4 <__aeabi_ui2d>
 80012a6:	a314      	add	r3, pc, #80	; (adr r3, 80012f8 <get_temp+0x60>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f90c 	bl	80004c8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	a112      	add	r1, pc, #72	; (adr r1, 8001300 <get_temp+0x68>)
 80012b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012ba:	f7fe ff4d 	bl	8000158 <__aeabi_dsub>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	a310      	add	r3, pc, #64	; (adr r3, 8001308 <get_temp+0x70>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fa26 	bl	800071c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <get_temp+0x78>)
 80012de:	f7fe ff3d 	bl	800015c <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff faff 	bl	80008ec <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	66666666 	.word	0x66666666
 80012fc:	3f4a6666 	.word	0x3f4a6666
 8001300:	ae147ae1 	.word	0xae147ae1
 8001304:	3ff6e147 	.word	0x3ff6e147
 8001308:	75f6fd22 	.word	0x75f6fd22
 800130c:	3f719ce0 	.word	0x3f719ce0
 8001310:	40390000 	.word	0x40390000

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b598      	push	{r3, r4, r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f001 f92e 	bl	8002578 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f920 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f000 fc18 	bl	8001b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001324:	f000 fbf8 	bl	8001b18 <MX_DMA_Init>
  MX_ADC1_Init();
 8001328:	f000 f96a 	bl	8001600 <MX_ADC1_Init>
  MX_TIM1_Init();
 800132c:	f000 fa50 	bl	80017d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001330:	f000 fb06 	bl	8001940 <MX_TIM2_Init>
  MX_CAN_Init();
 8001334:	f000 f9fa 	bl	800172c <MX_CAN_Init>
  MX_TIM3_Init();
 8001338:	f000 fb78 	bl	8001a2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //Configurando la transmision

  TxHeader.DLC = 8;  // Son 8 bytes de data
 800133c:	4b78      	ldr	r3, [pc, #480]	; (8001520 <main+0x20c>)
 800133e:	2208      	movs	r2, #8
 8001340:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8001342:	4b77      	ldr	r3, [pc, #476]	; (8001520 <main+0x20c>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Identificador del mensaje
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <main+0x20c>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800134e:	4b74      	ldr	r3, [pc, #464]	; (8001520 <main+0x20c>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // Este es el ID que mandaremos al periferico
 8001354:	4b72      	ldr	r3, [pc, #456]	; (8001520 <main+0x20c>)
 8001356:	f240 1203 	movw	r2, #259	; 0x103
 800135a:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <main+0x20c>)
 800135e:	2200      	movs	r2, #0
 8001360:	751a      	strb	r2, [r3, #20]

  // CAN_FLAG_REG Initialization
  CAN_FLAG_REG |=  (1<<GF);	// General Flag 1 (necessary)
 8001362:	4b70      	ldr	r3, [pc, #448]	; (8001524 <main+0x210>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <main+0x210>)
 800136e:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<SU); // Speed RPM //CAN_FLAG_REG |=  (1<<SU); // Speed km/h
 8001370:	4b6c      	ldr	r3, [pc, #432]	; (8001524 <main+0x210>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f023 0308 	bic.w	r3, r3, #8
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <main+0x210>)
 800137c:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<EM); // No Emergency
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <main+0x210>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	f023 0304 	bic.w	r3, r3, #4
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b66      	ldr	r3, [pc, #408]	; (8001524 <main+0x210>)
 800138a:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<PW); // Initial OFF
 800138c:	4b65      	ldr	r3, [pc, #404]	; (8001524 <main+0x210>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f023 0302 	bic.w	r3, r3, #2
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <main+0x210>)
 8001398:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<CS0); //
 800139a:	4b62      	ldr	r3, [pc, #392]	; (8001524 <main+0x210>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	f023 0310 	bic.w	r3, r3, #16
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <main+0x210>)
 80013a6:	701a      	strb	r2, [r3, #0]
  CAN_FLAG_REG &= ~(1<<CS1); // Cruise speed0
 80013a8:	4b5e      	ldr	r3, [pc, #376]	; (8001524 <main+0x210>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f023 0320 	bic.w	r3, r3, #32
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <main+0x210>)
 80013b4:	701a      	strb	r2, [r3, #0]


  TxData[0] = 0; 	//Speed component
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <main+0x214>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;	//Speed component
 80013bc:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <main+0x214>)
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;
 80013c2:	4b59      	ldr	r3, [pc, #356]	; (8001528 <main+0x214>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;
 80013c8:	4b57      	ldr	r3, [pc, #348]	; (8001528 <main+0x214>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 80013ce:	4b56      	ldr	r3, [pc, #344]	; (8001528 <main+0x214>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 80013d4:	4b54      	ldr	r3, [pc, #336]	; (8001528 <main+0x214>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <main+0x214>)
 80013dc:	2200      	movs	r2, #0
 80013de:	719a      	strb	r2, [r3, #6]
  TxData[7] = CAN_FLAG_REG;	//Flags byte  [0 0 0 0 0 0 0 1] [x x cs cs su em pw gf]
 80013e0:	4b50      	ldr	r3, [pc, #320]	; (8001524 <main+0x210>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <main+0x214>)
 80013e6:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  //Starting timer2 (0.5 seconds) to show speed
  HAL_TIM_Base_Start_IT(&htim2);
 80013e8:	4850      	ldr	r0, [pc, #320]	; (800152c <main+0x218>)
 80013ea:	f003 fce5 	bl	8004db8 <HAL_TIM_Base_Start_IT>

  //Starting timer3 (0.01 seconds) for speed control
  HAL_TIM_Base_Start_IT(&htim3);
 80013ee:	4850      	ldr	r0, [pc, #320]	; (8001530 <main+0x21c>)
 80013f0:	f003 fce2 	bl	8004db8 <HAL_TIM_Base_Start_IT>

  //CAN
  HAL_CAN_Start(&hcan);
 80013f4:	484f      	ldr	r0, [pc, #316]	; (8001534 <main+0x220>)
 80013f6:	f001 feb0 	bl	800315a <HAL_CAN_Start>

  //CAN FIFO activation
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013fa:	2102      	movs	r1, #2
 80013fc:	484d      	ldr	r0, [pc, #308]	; (8001534 <main+0x220>)
 80013fe:	f002 f8db 	bl	80035b8 <HAL_CAN_ActivateNotification>


  /* Initialize PID controller */


  PIDController_Init(&pid);
 8001402:	484d      	ldr	r0, [pc, #308]	; (8001538 <main+0x224>)
 8001404:	f7ff fdb6 	bl	8000f74 <PIDController_Init>



  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001408:	4b4c      	ldr	r3, [pc, #304]	; (800153c <main+0x228>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <main+0x22c>)
 800140e:	6814      	ldr	r4, [r2, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd8f 	bl	8000f34 <__aeabi_f2uiz>
 8001416:	4603      	mov	r3, r0
 8001418:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 800141a:	4b48      	ldr	r3, [pc, #288]	; (800153c <main+0x228>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a48      	ldr	r2, [pc, #288]	; (8001540 <main+0x22c>)
 8001420:	6814      	ldr	r4, [r2, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd86 	bl	8000f34 <__aeabi_f2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <main+0x228>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <main+0x22c>)
 8001432:	6814      	ldr	r4, [r2, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd7d 	bl	8000f34 <__aeabi_f2uiz>
 800143a:	4603      	mov	r3, r0
 800143c:	63e3      	str	r3, [r4, #60]	; 0x3c

  //INITIAL POSITION

	//HALL A
	if (HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin)) Sensors[0] = 1;
 800143e:	2101      	movs	r1, #1
 8001440:	4840      	ldr	r0, [pc, #256]	; (8001544 <main+0x230>)
 8001442:	f002 ff81 	bl	8004348 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <main+0x140>
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <main+0x234>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e002      	b.n	800145a <main+0x146>
	else Sensors[0] = 0;
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <main+0x234>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	//HALL B
	if (HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin)) Sensors[1] = 1;
 800145a:	2102      	movs	r1, #2
 800145c:	4839      	ldr	r0, [pc, #228]	; (8001544 <main+0x230>)
 800145e:	f002 ff73 	bl	8004348 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <main+0x15c>
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <main+0x234>)
 800146a:	2201      	movs	r2, #1
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e002      	b.n	8001476 <main+0x162>
	else Sensors[1] = 0;
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <main+0x234>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
	//HALL C
	if (HAL_GPIO_ReadPin(HALL_C_GPIO_Port,HALL_C_Pin)) Sensors[2] = 1;
 8001476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147a:	4832      	ldr	r0, [pc, #200]	; (8001544 <main+0x230>)
 800147c:	f002 ff64 	bl	8004348 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <main+0x17a>
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <main+0x234>)
 8001488:	2201      	movs	r2, #1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e002      	b.n	8001494 <main+0x180>
	else Sensors[2] = 0;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <main+0x234>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]

	HAL_ADC_Start_DMA(&hadc1, adc_values, 7);  // start the adc in dma mode
 8001494:	2207      	movs	r2, #7
 8001496:	492d      	ldr	r1, [pc, #180]	; (800154c <main+0x238>)
 8001498:	482d      	ldr	r0, [pc, #180]	; (8001550 <main+0x23c>)
 800149a:	f001 f9a7 	bl	80027ec <HAL_ADC_Start_DMA>

  while (1)
  {


	  if (power == 1){
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <main+0x240>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <main+0x198>

		  //HALL DECODER

		  Hall_Decoder(); //Makes the hall encoding
 80014a6:	f000 fbc5 	bl	8001c34 <Hall_Decoder>
 80014aa:	e7f8      	b.n	800149e <main+0x18a>

	  else{

		  //TURN OFF PID

		  PIDController_Reset(&pid);
 80014ac:	4822      	ldr	r0, [pc, #136]	; (8001538 <main+0x224>)
 80014ae:	f7ff fe5f 	bl	8001170 <PIDController_Reset>

		  integral = pid.integrator;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <main+0x224>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a28      	ldr	r2, [pc, #160]	; (8001558 <main+0x244>)
 80014b8:	6013      	str	r3, [r2, #0]

		  u = pid.out;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <main+0x224>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <main+0x248>)
 80014c0:	6013      	str	r3, [r2, #0]

		  duty_cycle = u;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <main+0x248>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <main+0x228>)
 80014c8:	6013      	str	r3, [r2, #0]


		  //Turn off the high gates
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <main+0x248>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <main+0x22c>)
 80014d0:	6814      	ldr	r4, [r2, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fd2e 	bl	8000f34 <__aeabi_f2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, u);
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <main+0x248>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <main+0x22c>)
 80014e2:	6814      	ldr	r4, [r2, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd25 	bl	8000f34 <__aeabi_f2uiz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, u);
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <main+0x248>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <main+0x22c>)
 80014f4:	6814      	ldr	r4, [r2, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fd1c 	bl	8000f34 <__aeabi_f2uiz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	63e3      	str	r3, [r4, #60]	; 0x3c

		  //Turn off the low gates
		  HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	480f      	ldr	r0, [pc, #60]	; (8001544 <main+0x230>)
 8001506:	f002 ff36 	bl	8004376 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2120      	movs	r1, #32
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <main+0x230>)
 8001510:	f002 ff31 	bl	8004376 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <main+0x230>)
 800151a:	f002 ff2c 	bl	8004376 <HAL_GPIO_WritePin>
	  if (power == 1){
 800151e:	e7be      	b.n	800149e <main+0x18a>
 8001520:	20000214 	.word	0x20000214
 8001524:	2000016c 	.word	0x2000016c
 8001528:	20000170 	.word	0x20000170
 800152c:	200001cc 	.word	0x200001cc
 8001530:	200000b0 	.word	0x200000b0
 8001534:	20000088 	.word	0x20000088
 8001538:	20000000 	.word	0x20000000
 800153c:	20000068 	.word	0x20000068
 8001540:	20000178 	.word	0x20000178
 8001544:	40010c00 	.word	0x40010c00
 8001548:	2000005c 	.word	0x2000005c
 800154c:	20000248 	.word	0x20000248
 8001550:	200000f8 	.word	0x200000f8
 8001554:	20000058 	.word	0x20000058
 8001558:	2000007c 	.word	0x2000007c
 800155c:	20000080 	.word	0x20000080

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2228      	movs	r2, #40	; 0x28
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fcba 	bl	8005ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 ff17 	bl	80043d8 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015b0:	f000 fd70 	bl	8002094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f982 	bl	80048d8 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80015da:	f000 fd5b 	bl	8002094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015de:	2302      	movs	r3, #2
 80015e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fadf 	bl	8004bac <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80015f4:	f000 fd4e 	bl	8002094 <Error_Handler>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3750      	adds	r7, #80	; 0x50
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001610:	4b44      	ldr	r3, [pc, #272]	; (8001724 <MX_ADC1_Init+0x124>)
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <MX_ADC1_Init+0x128>)
 8001614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_ADC1_Init+0x124>)
 8001618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <MX_ADC1_Init+0x124>)
 8001620:	2201      	movs	r2, #1
 8001622:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <MX_ADC1_Init+0x124>)
 8001626:	2200      	movs	r2, #0
 8001628:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <MX_ADC1_Init+0x124>)
 800162c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MX_ADC1_Init+0x124>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <MX_ADC1_Init+0x124>)
 800163a:	2207      	movs	r2, #7
 800163c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800163e:	4839      	ldr	r0, [pc, #228]	; (8001724 <MX_ADC1_Init+0x124>)
 8001640:	f000 fffc 	bl	800263c <HAL_ADC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800164a:	f000 fd23 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001652:	2301      	movs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4831      	ldr	r0, [pc, #196]	; (8001724 <MX_ADC1_Init+0x124>)
 8001660:	f001 f9be 	bl	80029e0 <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fd13 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800166e:	2301      	movs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001672:	2302      	movs	r3, #2
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	482a      	ldr	r0, [pc, #168]	; (8001724 <MX_ADC1_Init+0x124>)
 800167c:	f001 f9b0 	bl	80029e0 <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001686:	f000 fd05 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800168a:	2302      	movs	r3, #2
 800168c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800168e:	2303      	movs	r3, #3
 8001690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_ADC1_Init+0x124>)
 8001698:	f001 f9a2 	bl	80029e0 <HAL_ADC_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016a2:	f000 fcf7 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016a6:	2303      	movs	r3, #3
 80016a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_ADC1_Init+0x124>)
 80016b4:	f001 f994 	bl	80029e0 <HAL_ADC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80016be:	f000 fce9 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80016c6:	2305      	movs	r3, #5
 80016c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <MX_ADC1_Init+0x124>)
 80016d0:	f001 f986 	bl	80029e0 <HAL_ADC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016da:	f000 fcdb 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016de:	2305      	movs	r3, #5
 80016e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80016e2:	2306      	movs	r3, #6
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	480e      	ldr	r0, [pc, #56]	; (8001724 <MX_ADC1_Init+0x124>)
 80016ec:	f001 f978 	bl	80029e0 <HAL_ADC_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80016f6:	f000 fccd 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80016fa:	2310      	movs	r3, #16
 80016fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80016fe:	2307      	movs	r3, #7
 8001700:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001702:	2306      	movs	r3, #6
 8001704:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_ADC1_Init+0x124>)
 800170c:	f001 f968 	bl	80029e0 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001716:	f000 fcbd 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200000f8 	.word	0x200000f8
 8001728:	40012400 	.word	0x40012400

0800172c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <MX_CAN_Init+0xa0>)
 8001736:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_CAN_Init+0x9c>)
 800173a:	2208      	movs	r2, #8
 800173c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_CAN_Init+0x9c>)
 800174c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001750:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_CAN_Init+0x9c>)
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001760:	2200      	movs	r2, #0
 8001762:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001766:	2200      	movs	r2, #0
 8001768:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_CAN_Init+0x9c>)
 800176c:	2200      	movs	r2, #0
 800176e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001772:	2200      	movs	r2, #0
 8001774:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_CAN_Init+0x9c>)
 8001778:	2200      	movs	r2, #0
 800177a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800177c:	4812      	ldr	r0, [pc, #72]	; (80017c8 <MX_CAN_Init+0x9c>)
 800177e:	f001 fb28 	bl	8002dd2 <HAL_CAN_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001788:	f000 fc84 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8001790:	230a      	movs	r3, #10
 8001792:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x01<<5;
 8001798:	2320      	movs	r3, #32
 800179a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x01<<5;
 80017a0:	2320      	movs	r3, #32
 80017a2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_CAN_Init+0x9c>)
 80017ba:	f001 fc05 	bl	8002fc8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000088 	.word	0x20000088
 80017cc:	40006400 	.word	0x40006400

080017d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2220      	movs	r2, #32
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fb6d 	bl	8005ee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <MX_TIM1_Init+0x168>)
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <MX_TIM1_Init+0x16c>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001814:	4b48      	ldr	r3, [pc, #288]	; (8001938 <MX_TIM1_Init+0x168>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <MX_TIM1_Init+0x168>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001820:	4b45      	ldr	r3, [pc, #276]	; (8001938 <MX_TIM1_Init+0x168>)
 8001822:	22ff      	movs	r2, #255	; 0xff
 8001824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <MX_TIM1_Init+0x168>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <MX_TIM1_Init+0x168>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <MX_TIM1_Init+0x168>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001838:	483f      	ldr	r0, [pc, #252]	; (8001938 <MX_TIM1_Init+0x168>)
 800183a:	f003 fa6d 	bl	8004d18 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001844:	f000 fc26 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001852:	4619      	mov	r1, r3
 8001854:	4838      	ldr	r0, [pc, #224]	; (8001938 <MX_TIM1_Init+0x168>)
 8001856:	f003 fed5 	bl	8005604 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001860:	f000 fc18 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001864:	4834      	ldr	r0, [pc, #208]	; (8001938 <MX_TIM1_Init+0x168>)
 8001866:	f003 fb51 	bl	8004f0c <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001870:	f000 fc10 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001880:	4619      	mov	r1, r3
 8001882:	482d      	ldr	r0, [pc, #180]	; (8001938 <MX_TIM1_Init+0x168>)
 8001884:	f004 fa4a 	bl	8005d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800188e:	f000 fc01 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	4820      	ldr	r0, [pc, #128]	; (8001938 <MX_TIM1_Init+0x168>)
 80018b8:	f003 fde6 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80018c2:	f000 fbe7 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	2204      	movs	r2, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	481a      	ldr	r0, [pc, #104]	; (8001938 <MX_TIM1_Init+0x168>)
 80018d0:	f003 fdda 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80018da:	f000 fbdb 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	2208      	movs	r2, #8
 80018e4:	4619      	mov	r1, r3
 80018e6:	4814      	ldr	r0, [pc, #80]	; (8001938 <MX_TIM1_Init+0x168>)
 80018e8:	f003 fdce 	bl	8005488 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80018f2:	f000 fbcf 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM1_Init+0x168>)
 800191a:	f004 fa5d 	bl	8005dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001924:	f000 fbb6 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM1_Init+0x168>)
 800192a:	f000 fd03 	bl	8002334 <HAL_TIM_MspPostInit>

}
 800192e:	bf00      	nop
 8001930:	3758      	adds	r7, #88	; 0x58
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000178 	.word	0x20000178
 800193c:	40012c00 	.word	0x40012c00

08001940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08e      	sub	sp, #56	; 0x38
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800 - 1;
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <MX_TIM2_Init+0xe8>)
 800197a:	f240 321f 	movw	r2, #799	; 0x31f
 800197e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001988:	f241 3288 	movw	r2, #5000	; 0x1388
 800198c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	4823      	ldr	r0, [pc, #140]	; (8001a28 <MX_TIM2_Init+0xe8>)
 800199c:	f003 f9bc 	bl	8004d18 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019a6:	f000 fb75 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b4:	4619      	mov	r1, r3
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019b8:	f003 fe24 	bl	8005604 <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019c2:	f000 fb67 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019c8:	f003 fa48 	bl	8004e5c <HAL_TIM_OC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019d2:	f000 fb5f 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_TIM2_Init+0xe8>)
 80019e6:	f004 f999 	bl	8005d1c <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019f0:	f000 fb50 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001a0c:	f003 fce4 	bl	80053d8 <HAL_TIM_OC_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a16:	f000 fb3d 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM2_Init+0xe8>)
 8001a1c:	f000 fc8a 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200001cc 	.word	0x200001cc

08001a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08e      	sub	sp, #56	; 0x38
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <MX_TIM3_Init+0xe8>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800 - 1;
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a64:	f240 321f 	movw	r2, #799	; 0x31f
 8001a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a72:	2264      	movs	r2, #100	; 0x64
 8001a74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001a84:	f003 f948 	bl	8004d18 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a8e:	f000 fb01 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481c      	ldr	r0, [pc, #112]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001aa0:	f003 fdb0 	bl	8005604 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aaa:	f000 faf3 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001ab0:	f003 f9d4 	bl	8004e5c <HAL_TIM_OC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aba:	f000 faeb 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	4619      	mov	r1, r3
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001ace:	f004 f925 	bl	8005d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ad8:	f000 fadc 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001af4:	f003 fc70 	bl	80053d8 <HAL_TIM_OC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001afe:	f000 fac9 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <MX_TIM3_Init+0xe4>)
 8001b04:	f000 fc16 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8001b08:	bf00      	nop
 8001b0a:	3738      	adds	r7, #56	; 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200000b0 	.word	0x200000b0
 8001b14:	40000400 	.word	0x40000400

08001b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_DMA_Init+0x38>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <MX_DMA_Init+0x38>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_DMA_Init+0x38>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	200b      	movs	r0, #11
 8001b3c:	f002 f85b 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b40:	200b      	movs	r0, #11
 8001b42:	f002 f874 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_GPIO_Init+0xd4>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_LOW_Pin|B_LOW_Pin|A_LOW_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2170      	movs	r1, #112	; 0x70
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <MX_GPIO_Init+0xd8>)
 8001bb6:	f002 fbde 	bl	8004376 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8001bba:	f240 4303 	movw	r3, #1027	; 0x403
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_GPIO_Init+0xdc>)
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4817      	ldr	r0, [pc, #92]	; (8001c2c <MX_GPIO_Init+0xd8>)
 8001bd0:	f002 fa36 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_LOW_Pin B_LOW_Pin A_LOW_Pin */
  GPIO_InitStruct.Pin = C_LOW_Pin|B_LOW_Pin|A_LOW_Pin;
 8001bd4:	2370      	movs	r3, #112	; 0x70
 8001bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <MX_GPIO_Init+0xd8>)
 8001bec:	f002 fa28 	bl	8004040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2006      	movs	r0, #6
 8001bf6:	f001 fffe 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bfa:	2006      	movs	r0, #6
 8001bfc:	f002 f817 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	2007      	movs	r0, #7
 8001c06:	f001 fff6 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c0a:	2007      	movs	r0, #7
 8001c0c:	f002 f80f 	bl	8003c2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2028      	movs	r0, #40	; 0x28
 8001c16:	f001 ffee 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1a:	2028      	movs	r0, #40	; 0x28
 8001c1c:	f002 f807 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010c00 	.word	0x40010c00
 8001c30:	10310000 	.word	0x10310000

08001c34 <Hall_Decoder>:

//FUNCIONES



void Hall_Decoder(void){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	if (Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001c38:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d123      	bne.n	8001c88 <Hall_Decoder+0x54>
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11f      	bne.n	8001c88 <Hall_Decoder+0x54>
 8001c48:	4b74      	ldr	r3, [pc, #464]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d11b      	bne.n	8001c88 <Hall_Decoder+0x54>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001c50:	2104      	movs	r1, #4
 8001c52:	4873      	ldr	r0, [pc, #460]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001c54:	f003 fa54 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4871      	ldr	r0, [pc, #452]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001c5c:	f003 fa50 	bl	8005100 <HAL_TIM_PWM_Stop>


		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2110      	movs	r1, #16
 8001c64:	486f      	ldr	r0, [pc, #444]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001c66:	f002 fb86 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2140      	movs	r1, #64	; 0x40
 8001c6e:	486d      	ldr	r0, [pc, #436]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001c70:	f002 fb81 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c74:	2100      	movs	r1, #0
 8001c76:	486a      	ldr	r0, [pc, #424]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001c78:	f003 f9a0 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2120      	movs	r1, #32
 8001c80:	4868      	ldr	r0, [pc, #416]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001c82:	f002 fb78 	bl	8004376 <HAL_GPIO_WritePin>
 8001c86:	e0c7      	b.n	8001e18 <Hall_Decoder+0x1e4>



	}
	else if(Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 0) {
 8001c88:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d123      	bne.n	8001cd8 <Hall_Decoder+0xa4>
 8001c90:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11f      	bne.n	8001cd8 <Hall_Decoder+0xa4>
 8001c98:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <Hall_Decoder+0xa4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	485f      	ldr	r0, [pc, #380]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001ca4:	f003 fa2c 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001ca8:	2104      	movs	r1, #4
 8001caa:	485d      	ldr	r0, [pc, #372]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001cac:	f003 fa28 	bl	8005100 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	485b      	ldr	r0, [pc, #364]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001cb6:	f002 fb5e 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	4859      	ldr	r0, [pc, #356]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001cc0:	f002 fb59 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	4856      	ldr	r0, [pc, #344]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001cc8:	f003 f978 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	4854      	ldr	r0, [pc, #336]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001cd2:	f002 fb50 	bl	8004376 <HAL_GPIO_WritePin>
 8001cd6:	e09f      	b.n	8001e18 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 1 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d123      	bne.n	8001d28 <Hall_Decoder+0xf4>
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d11f      	bne.n	8001d28 <Hall_Decoder+0xf4>
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11b      	bne.n	8001d28 <Hall_Decoder+0xf4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	484b      	ldr	r0, [pc, #300]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001cf4:	f003 fa04 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	4849      	ldr	r0, [pc, #292]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001cfc:	f003 fa00 	bl	8005100 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,   GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2110      	movs	r1, #16
 8001d04:	4847      	ldr	r0, [pc, #284]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d06:	f002 fb36 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	4845      	ldr	r0, [pc, #276]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d10:	f002 fb31 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d14:	2108      	movs	r1, #8
 8001d16:	4842      	ldr	r0, [pc, #264]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d18:	f003 f950 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	4840      	ldr	r0, [pc, #256]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d22:	f002 fb28 	bl	8004376 <HAL_GPIO_WritePin>
 8001d26:	e077      	b.n	8001e18 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001d28:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d123      	bne.n	8001d78 <Hall_Decoder+0x144>
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d11f      	bne.n	8001d78 <Hall_Decoder+0x144>
 8001d38:	4b38      	ldr	r3, [pc, #224]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11b      	bne.n	8001d78 <Hall_Decoder+0x144>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001d40:	2100      	movs	r1, #0
 8001d42:	4837      	ldr	r0, [pc, #220]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d44:	f003 f9dc 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001d48:	2108      	movs	r1, #8
 8001d4a:	4835      	ldr	r0, [pc, #212]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d4c:	f003 f9d8 	bl	8005100 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2110      	movs	r1, #16
 8001d54:	4833      	ldr	r0, [pc, #204]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d56:	f002 fb0e 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	4831      	ldr	r0, [pc, #196]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d60:	f002 fb09 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d64:	2104      	movs	r1, #4
 8001d66:	482e      	ldr	r0, [pc, #184]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d68:	f003 f928 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	482c      	ldr	r0, [pc, #176]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001d72:	f002 fb00 	bl	8004376 <HAL_GPIO_WritePin>
 8001d76:	e04f      	b.n	8001e18 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 1) {
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d123      	bne.n	8001dc8 <Hall_Decoder+0x194>
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11f      	bne.n	8001dc8 <Hall_Decoder+0x194>
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d11b      	bne.n	8001dc8 <Hall_Decoder+0x194>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001d90:	2100      	movs	r1, #0
 8001d92:	4823      	ldr	r0, [pc, #140]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d94:	f003 f9b4 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001d98:	2108      	movs	r1, #8
 8001d9a:	4821      	ldr	r0, [pc, #132]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001d9c:	f003 f9b0 	bl	8005100 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2120      	movs	r1, #32
 8001da4:	481f      	ldr	r0, [pc, #124]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001da6:	f002 fae6 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	481d      	ldr	r0, [pc, #116]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001db0:	f002 fae1 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001db4:	2104      	movs	r1, #4
 8001db6:	481a      	ldr	r0, [pc, #104]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001db8:	f003 f900 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	4818      	ldr	r0, [pc, #96]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001dc2:	f002 fad8 	bl	8004376 <HAL_GPIO_WritePin>
 8001dc6:	e027      	b.n	8001e18 <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d123      	bne.n	8001e18 <Hall_Decoder+0x1e4>
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11f      	bne.n	8001e18 <Hall_Decoder+0x1e4>
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <Hall_Decoder+0x1e8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d11b      	bne.n	8001e18 <Hall_Decoder+0x1e4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001de0:	2104      	movs	r1, #4
 8001de2:	480f      	ldr	r0, [pc, #60]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001de4:	f003 f98c 	bl	8005100 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001de8:	2108      	movs	r1, #8
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001dec:	f003 f988 	bl	8005100 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2120      	movs	r1, #32
 8001df4:	480b      	ldr	r0, [pc, #44]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001df6:	f002 fabe 	bl	8004376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001e00:	f002 fab9 	bl	8004376 <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e04:	2100      	movs	r1, #0
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <Hall_Decoder+0x1ec>)
 8001e08:	f003 f8d8 	bl	8004fbc <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2110      	movs	r1, #16
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <Hall_Decoder+0x1f0>)
 8001e12:	f002 fab0 	bl	8004376 <HAL_GPIO_WritePin>

	}
}
 8001e16:	e7ff      	b.n	8001e18 <Hall_Decoder+0x1e4>
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000005c 	.word	0x2000005c
 8001e20:	20000178 	.word	0x20000178
 8001e24:	40010c00 	.word	0x40010c00

08001e28 <HAL_GPIO_EXTI_Callback>:

}
*/

//HALL INTERRUPTIONS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]


	//HALL A
	if (GPIO_Pin == GPIO_PIN_0) {
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d114      	bne.n	8001e62 <HAL_GPIO_EXTI_Callback+0x3a>

	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)) Sensors[0] = 1;
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4824      	ldr	r0, [pc, #144]	; (8001ecc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001e3c:	f002 fa84 	bl	8004348 <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_EXTI_Callback+0x26>
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_EXTI_Callback+0x2c>
	else Sensors[0] = 0;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

	steps+=1;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e5e:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
	else Sensors[2] = 0;

	steps+=1;
	}
}
 8001e60:	e030      	b.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d114      	bne.n	8001e92 <HAL_GPIO_EXTI_Callback+0x6a>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) Sensors[1] = 1;
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4818      	ldr	r0, [pc, #96]	; (8001ecc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001e6c:	f002 fa6c 	bl	8004348 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_EXTI_Callback+0x56>
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_EXTI_Callback+0x5c>
	else Sensors[1] = 0;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
	steps+=1;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001e8e:	801a      	strh	r2, [r3, #0]
}
 8001e90:	e018      	b.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_10) {
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d114      	bne.n	8001ec4 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
 8001e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ea0:	f002 fa52 	bl	8004348 <HAL_GPIO_ReadPin>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_EXTI_Callback+0x8a>
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x90>
	else Sensors[2] = 0;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
	steps+=1;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ec2:	801a      	strh	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	2000005c 	.word	0x2000005c
 8001ed4:	20000074 	.word	0x20000074

08001ed8 <HAL_TIM_PeriodElapsedCallback>:


// This might not be working now since we are using DMA
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

	//INTERRUPTION TIMER 2 (0.5 s)
	if (htim->Instance == TIM2){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d15d      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0xce>
		//TEMPERATURE MEASUREMENT
		temp = get_temp(adc_values[6]);
 8001eea:	4b57      	ldr	r3, [pc, #348]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f9d2 	bl	8001298 <get_temp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ef8:	6013      	str	r3, [r2, #0]
		//Formula para el motor de prueba
		//vel_rpm = 2*60*steps/90;  //cada 0.5 SEGUNDOS se mide la cantidad de revoluciones por minuto


		//Formula para el motor de MK III
		vel_rpm = 2*60*steps/138;
 8001efa:	4b55      	ldr	r3, [pc, #340]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1192      	asrs	r2, r2, #6
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fdf3 	bl	8000b00 <__aeabi_i2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f1e:	6013      	str	r3, [r2, #0]
		steps = 0;
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]


		//Enviamos el valor de la velocidad

		if (vel_rpm > 255){
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	494c      	ldr	r1, [pc, #304]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fff7 	bl	8000f20 <__aeabi_fcmpgt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d011      	beq.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x84>
			TxData[0] = 255;
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	701a      	strb	r2, [r3, #0]
			TxData[1] = vel_rpm - 255;
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4946      	ldr	r1, [pc, #280]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fd25 	bl	8000994 <__aeabi_fsub>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fff1 	bl	8000f34 <__aeabi_f2uiz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f58:	705a      	strb	r2, [r3, #1]
 8001f5a:	e00b      	b.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x9c>
		}
		else{
			TxData[0] = vel_rpm;
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffe7 	bl	8000f34 <__aeabi_f2uiz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f6c:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0;
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
		}

		//Enviamos el estado ON OFF del sistema

		//CAN_FLAG_REG ^= (power ^ CAN_FLAG_REG) & (1 << PW);
		CAN_FLAG_REG = (CAN_FLAG_REG & (~(1 << PW))) | (power << PW); // Sending the ON (1) or OFF (0)
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	b25a      	sxtb	r2, r3
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001f90:	701a      	strb	r2, [r3, #0]
		//FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
		//Send by CAN

		TxData[7] = CAN_FLAG_REG;
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f98:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001f9c:	4a30      	ldr	r2, [pc, #192]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f9e:	4934      	ldr	r1, [pc, #208]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001fa0:	4834      	ldr	r0, [pc, #208]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001fa2:	f001 f91e 	bl	80031e2 <HAL_CAN_AddTxMessage>


	}

	//INTERRUPTION TIMER 3 (0.01 s)
	if (htim->Instance == TIM3){
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d141      	bne.n	8002034 <HAL_TIM_PeriodElapsedCallback+0x15c>

		//SPEED MEASURE

		vel_d = adc_values[0]/8.192; // para convertir de 12 bits a un intervalo de (0-500 rpm)
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa0d 	bl	80003d4 <__aeabi_ui2d>
 8001fba:	a321      	add	r3, pc, #132	; (adr r3, 8002040 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fbac 	bl	800071c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fc8e 	bl	80008ec <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001fd4:	6013      	str	r3, [r2, #0]


		//CONTROL

		PIDController_Update(&pid, vel_d, vel_rpm);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4827      	ldr	r0, [pc, #156]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001fe2:	f7fe ffe4 	bl	8000fae <PIDController_Update>


		integral = pid.integrator;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001fec:	6013      	str	r3, [r2, #0]

		u = pid.out;
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ff4:	6013      	str	r3, [r2, #0]

		duty_cycle = u;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a24      	ldr	r2, [pc, #144]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001ffc:	6013      	str	r3, [r2, #0]


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001ffe:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002004:	6814      	ldr	r4, [r2, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe ff94 	bl	8000f34 <__aeabi_f2uiz>
 800200c:	4603      	mov	r3, r0
 800200e:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002016:	6814      	ldr	r4, [r2, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ff8b 	bl	8000f34 <__aeabi_f2uiz>
 800201e:	4603      	mov	r3, r0
 8002020:	63a3      	str	r3, [r4, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002028:	6814      	ldr	r4, [r2, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff82 	bl	8000f34 <__aeabi_f2uiz>
 8002030:	4603      	mov	r3, r0
 8002032:	63e3      	str	r3, [r4, #60]	; 0x3c

		//HAL_GPIO_TogglePin(Test_out_GPIO_Port , Test_out_Pin);
	}

}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	d2f1a9fc 	.word	0xd2f1a9fc
 8002044:	4020624d 	.word	0x4020624d
 8002048:	20000248 	.word	0x20000248
 800204c:	20000070 	.word	0x20000070
 8002050:	20000074 	.word	0x20000074
 8002054:	76b981db 	.word	0x76b981db
 8002058:	20000078 	.word	0x20000078
 800205c:	437f0000 	.word	0x437f0000
 8002060:	20000170 	.word	0x20000170
 8002064:	2000016c 	.word	0x2000016c
 8002068:	20000058 	.word	0x20000058
 800206c:	200001c0 	.word	0x200001c0
 8002070:	20000214 	.word	0x20000214
 8002074:	20000088 	.word	0x20000088
 8002078:	40000400 	.word	0x40000400
 800207c:	2000006c 	.word	0x2000006c
 8002080:	20000000 	.word	0x20000000
 8002084:	2000007c 	.word	0x2000007c
 8002088:	20000080 	.word	0x20000080
 800208c:	20000068 	.word	0x20000068
 8002090:	20000178 	.word	0x20000178

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_MspInit+0x5c>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_MspInit+0x5c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6193      	str	r3, [r2, #24]
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_MspInit+0x5c>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_MspInit+0x5c>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <HAL_MspInit+0x5c>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_MspInit+0x5c>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_MspInit+0x60>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_MspInit+0x60>)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000

08002104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <HAL_ADC_MspInit+0xbc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d149      	bne.n	80021b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_ADC_MspInit+0xc0>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SPEED_REF_Pin|VOLTAGE_Pin|CURRENT_Pin|A_CURRENT_Pin
 8002154:	233f      	movs	r3, #63	; 0x3f
 8002156:	613b      	str	r3, [r7, #16]
                          |B_CURRENT_Pin|C_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002158:	2303      	movs	r3, #3
 800215a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	4819      	ldr	r0, [pc, #100]	; (80021c8 <HAL_ADC_MspInit+0xc4>)
 8002164:	f001 ff6c 	bl	8004040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_ADC_MspInit+0xcc>)
 800216c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 800218a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800218e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002192:	2220      	movs	r2, #32
 8002194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 800219e:	f001 fd61 	bl	8003c64 <HAL_DMA_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80021a8:	f7ff ff74 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 80021b0:	621a      	str	r2, [r3, #32]
 80021b2:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_ADC_MspInit+0xc8>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012400 	.word	0x40012400
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010800 	.word	0x40010800
 80021cc:	20000128 	.word	0x20000128
 80021d0:	40020008 	.word	0x40020008

080021d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a24      	ldr	r2, [pc, #144]	; (8002280 <HAL_CAN_MspInit+0xac>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d141      	bne.n	8002278 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 80021fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021fe:	61d3      	str	r3, [r2, #28]
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_CAN_MspInit+0xb0>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4619      	mov	r1, r3
 8002238:	4813      	ldr	r0, [pc, #76]	; (8002288 <HAL_CAN_MspInit+0xb4>)
 800223a:	f001 ff01 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <HAL_CAN_MspInit+0xb4>)
 8002254:	f001 fef4 	bl	8004040 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2014      	movs	r0, #20
 800225e:	f001 fcca 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002262:	2014      	movs	r0, #20
 8002264:	f001 fce3 	bl	8003c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	2015      	movs	r0, #21
 800226e:	f001 fcc2 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002272:	2015      	movs	r0, #21
 8002274:	f001 fcdb 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40006400 	.word	0x40006400
 8002284:	40021000 	.word	0x40021000
 8002288:	40010800 	.word	0x40010800

0800228c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_TIM_Base_MspInit+0x9c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10c      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a8:	6193      	str	r3, [r2, #24]
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022b6:	e032      	b.n	800231e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d114      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	201c      	movs	r0, #28
 80022e0:	f001 fc89 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e4:	201c      	movs	r0, #28
 80022e6:	f001 fca2 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 80022ea:	e018      	b.n	800231e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_TIM_Base_MspInit+0xa4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_TIM_Base_MspInit+0xa0>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	201d      	movs	r0, #29
 8002314:	f001 fc6f 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002318:	201d      	movs	r0, #29
 800231a:	f001 fc88 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a37      	ldr	r2, [pc, #220]	; (800242c <HAL_TIM_MspPostInit+0xf8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d119      	bne.n	8002388 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 800236c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2302      	movs	r3, #2
 8002378:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	482c      	ldr	r0, [pc, #176]	; (8002434 <HAL_TIM_MspPostInit+0x100>)
 8002382:	f001 fe5d 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002386:	e04d      	b.n	8002424 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d12b      	bne.n	80023ea <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6193      	str	r3, [r2, #24]
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	481d      	ldr	r0, [pc, #116]	; (8002434 <HAL_TIM_MspPostInit+0x100>)
 80023c0:	f001 fe3e 	bl	8004040 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_TIM_MspPostInit+0x104>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <HAL_TIM_MspPostInit+0x104>)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	6053      	str	r3, [r2, #4]
}
 80023e8:	e01c      	b.n	8002424 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_TIM_MspPostInit+0x108>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d117      	bne.n	8002424 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_TIM_MspPostInit+0xfc>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_TIM_MspPostInit+0x100>)
 8002420:	f001 fe0e 	bl	8004040 <HAL_GPIO_Init>
}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010000 	.word	0x40010000
 800243c:	40000400 	.word	0x40000400

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <NMI_Handler+0x4>

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002486:	f000 f8bd 	bl	8002604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}

0800248e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_REF_Pin);
 8002492:	2001      	movs	r0, #1
 8002494:	f001 ff88 	bl	80043a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VOLTAGE_Pin);
 80024a0:	2002      	movs	r0, #2
 80024a2:	f001 ff81 	bl	80043a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Channel1_IRQHandler+0x10>)
 80024b2:	f001 fc91 	bl	8003dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000128 	.word	0x20000128

080024c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80024c6:	f001 f89c 	bl	8003602 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000088 	.word	0x20000088

080024d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <CAN1_RX1_IRQHandler+0x10>)
 80024da:	f001 f892 	bl	8003602 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000088 	.word	0x20000088

080024e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <TIM2_IRQHandler+0x10>)
 80024ee:	f002 fe6b 	bl	80051c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200001cc 	.word	0x200001cc

080024fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <TIM3_IRQHandler+0x10>)
 8002502:	f002 fe61 	bl	80051c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200000b0 	.word	0x200000b0

08002510 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 8002514:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002518:	f001 ff46 	bl	80043a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800252c:	480c      	ldr	r0, [pc, #48]	; (8002560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800252e:	490d      	ldr	r1, [pc, #52]	; (8002564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002552:	f7ff ffe5 	bl	8002520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002556:	f003 fca3 	bl	8005ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800255a:	f7fe fedb 	bl	8001314 <main>
  bx lr
 800255e:	4770      	bx	lr
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002568:	08005f38 	.word	0x08005f38
  ldr r2, =_sbss
 800256c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002570:	20000268 	.word	0x20000268

08002574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC1_2_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_Init+0x28>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_Init+0x28>)
 8002582:	f043 0310 	orr.w	r3, r3, #16
 8002586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002588:	2003      	movs	r0, #3
 800258a:	f001 fb29 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258e:	2000      	movs	r0, #0
 8002590:	f000 f808 	bl	80025a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002594:	f7ff fd84 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40022000 	.word	0x40022000

080025a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_InitTick+0x54>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_InitTick+0x58>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fb41 	bl	8003c4a <HAL_SYSTICK_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00e      	b.n	80025f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d80a      	bhi.n	80025ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	2200      	movs	r2, #0
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f001 fb09 	bl	8003bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_InitTick+0x5c>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000030 	.word	0x20000030
 80025fc:	20000038 	.word	0x20000038
 8002600:	20000034 	.word	0x20000034

08002604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_IncTick+0x1c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_IncTick+0x20>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4413      	add	r3, r2
 8002614:	4a03      	ldr	r2, [pc, #12]	; (8002624 <HAL_IncTick+0x20>)
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000038 	.word	0x20000038
 8002624:	20000264 	.word	0x20000264

08002628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b02      	ldr	r3, [pc, #8]	; (8002638 <HAL_GetTick+0x10>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000264 	.word	0x20000264

0800263c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0be      	b.n	80027dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fd42 	bl	8002104 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 faff 	bl	8002c84 <ADC_ConversionStop_Disable>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8099 	bne.w	80027ca <HAL_ADC_Init+0x18e>
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 8095 	bne.w	80027ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026a8:	f023 0302 	bic.w	r3, r3, #2
 80026ac:	f043 0202 	orr.w	r2, r3, #2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	7b1b      	ldrb	r3, [r3, #12]
 80026c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d4:	d003      	beq.n	80026de <HAL_ADC_Init+0xa2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_ADC_Init+0xa8>
 80026de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_Init+0xaa>
 80026e4:	2300      	movs	r3, #0
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7d1b      	ldrb	r3, [r3, #20]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d119      	bne.n	8002728 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	3b01      	subs	r3, #1
 8002702:	035a      	lsls	r2, r3, #13
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e00b      	b.n	8002728 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_ADC_Init+0x1a8>)
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	430b      	orrs	r3, r1
 800274e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002758:	d003      	beq.n	8002762 <HAL_ADC_Init+0x126>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d104      	bne.n	800276c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	3b01      	subs	r3, #1
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	430a      	orrs	r2, r1
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_ADC_Init+0x1ac>)
 8002788:	4013      	ands	r3, r2
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d10b      	bne.n	80027a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027a6:	e018      	b.n	80027da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f023 0312 	bic.w	r3, r3, #18
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027c8:	e007      	b.n	80027da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027da:	7dfb      	ldrb	r3, [r7, #23]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	ffe1f7fd 	.word	0xffe1f7fd
 80027e8:	ff1f0efe 	.word	0xff1f0efe

080027ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a64      	ldr	r2, [pc, #400]	; (8002994 <HAL_ADC_Start_DMA+0x1a8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_ADC_Start_DMA+0x24>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a63      	ldr	r2, [pc, #396]	; (8002998 <HAL_ADC_Start_DMA+0x1ac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <HAL_ADC_Start_DMA+0x32>
 8002810:	4b60      	ldr	r3, [pc, #384]	; (8002994 <HAL_ADC_Start_DMA+0x1a8>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 80b3 	bne.w	8002984 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_ADC_Start_DMA+0x40>
 8002828:	2302      	movs	r3, #2
 800282a:	e0ae      	b.n	800298a <HAL_ADC_Start_DMA+0x19e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f9cb 	bl	8002bd0 <ADC_Enable>
 800283a:	4603      	mov	r3, r0
 800283c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 809a 	bne.w	800297a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a4e      	ldr	r2, [pc, #312]	; (8002998 <HAL_ADC_Start_DMA+0x1ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d105      	bne.n	8002870 <HAL_ADC_Start_DMA+0x84>
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_ADC_Start_DMA+0x1a8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d115      	bne.n	800289c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002886:	2b00      	cmp	r3, #0
 8002888:	d026      	beq.n	80028d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800289a:	e01d      	b.n	80028d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a39      	ldr	r2, [pc, #228]	; (8002994 <HAL_ADC_Start_DMA+0x1a8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_ADC_Start_DMA+0xd0>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a38      	ldr	r2, [pc, #224]	; (8002998 <HAL_ADC_Start_DMA+0x1ac>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10d      	bne.n	80028d8 <HAL_ADC_Start_DMA+0xec>
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_ADC_Start_DMA+0x1a8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f023 0206 	bic.w	r2, r3, #6
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_ADC_Start_DMA+0x1b0>)
 8002906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_ADC_Start_DMA+0x1b4>)
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_ADC_Start_DMA+0x1b8>)
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002930:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a18      	ldr	r0, [r3, #32]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	334c      	adds	r3, #76	; 0x4c
 800293c:	4619      	mov	r1, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f001 f9e9 	bl	8003d18 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002950:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002954:	d108      	bne.n	8002968 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002964:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002966:	e00f      	b.n	8002988 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002976:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002978:	e006      	b.n	8002988 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002982:	e001      	b.n	8002988 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40012400 	.word	0x40012400
 8002998:	40012800 	.word	0x40012800
 800299c:	08002d07 	.word	0x08002d07
 80029a0:	08002d83 	.word	0x08002d83
 80029a4:	08002d9f 	.word	0x08002d9f

080029a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x20>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0dc      	b.n	8002bba <HAL_ADC_ConfigChannel+0x1da>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d81c      	bhi.n	8002a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	3b05      	subs	r3, #5
 8002a22:	221f      	movs	r2, #31
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4019      	ands	r1, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b05      	subs	r3, #5
 8002a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
 8002a48:	e03c      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d81c      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3b23      	subs	r3, #35	; 0x23
 8002a64:	221f      	movs	r2, #31
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4019      	ands	r1, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b23      	subs	r3, #35	; 0x23
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	e01b      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b41      	subs	r3, #65	; 0x41
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4019      	ands	r1, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b41      	subs	r3, #65	; 0x41
 8002ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d91c      	bls.n	8002b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	3b1e      	subs	r3, #30
 8002ade:	2207      	movs	r2, #7
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4019      	ands	r1, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6898      	ldr	r0, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	3b1e      	subs	r3, #30
 8002af8:	fa00 f203 	lsl.w	r2, r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	e019      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6919      	ldr	r1, [r3, #16]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	2207      	movs	r2, #7
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4019      	ands	r1, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6898      	ldr	r0, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d003      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b46:	2b11      	cmp	r3, #17
 8002b48:	d132      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d125      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d126      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d11a      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9a      	lsrs	r2, r3, #18
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x1b2>
 8002b9e:	e007      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012400 	.word	0x40012400
 8002bc8:	20000030 	.word	0x20000030
 8002bcc:	431bde83 	.word	0x431bde83

08002bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d040      	beq.n	8002c70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <ADC_Enable+0xac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <ADC_Enable+0xb0>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c0c:	e002      	b.n	8002c14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f9      	bne.n	8002c0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1a:	f7ff fd05 	bl	8002628 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c20:	e01f      	b.n	8002c62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c22:	f7ff fd01 	bl	8002628 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d918      	bls.n	8002c62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d011      	beq.n	8002c62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1d8      	bne.n	8002c22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000030 	.word	0x20000030
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12e      	bne.n	8002cfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cae:	f7ff fcbb 	bl	8002628 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cb4:	e01b      	b.n	8002cee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb6:	f7ff fcb7 	bl	8002628 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d914      	bls.n	8002cee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e007      	b.n	8002cfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d0dc      	beq.n	8002cb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d127      	bne.n	8002d70 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d3a:	d115      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff fe1d 	bl	80029a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d6e:	e004      	b.n	8002d7a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff fe12 	bl	80029ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fe01 	bl	80029cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0ed      	b.n	8002fc0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff f9ef 	bl	80021d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e06:	f7ff fc0f 	bl	8002628 <HAL_GetTick>
 8002e0a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e0c:	e012      	b.n	8002e34 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e0e:	f7ff fc0b 	bl	8002628 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b0a      	cmp	r3, #10
 8002e1a:	d90b      	bls.n	8002e34 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0c5      	b.n	8002fc0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0e5      	beq.n	8002e0e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0202 	bic.w	r2, r2, #2
 8002e50:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e52:	f7ff fbe9 	bl	8002628 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e58:	e012      	b.n	8002e80 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e5a:	f7ff fbe5 	bl	8002628 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b0a      	cmp	r3, #10
 8002e66:	d90b      	bls.n	8002e80 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2205      	movs	r2, #5
 8002e78:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e09f      	b.n	8002fc0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e5      	bne.n	8002e5a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7e1b      	ldrb	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e007      	b.n	8002eb8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e5b      	ldrb	r3, [r3, #25]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e007      	b.n	8002ee2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7e9b      	ldrb	r3, [r3, #26]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0220 	orr.w	r2, r2, #32
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e007      	b.n	8002f0c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0220 	bic.w	r2, r2, #32
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7edb      	ldrb	r3, [r3, #27]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0210 	bic.w	r2, r2, #16
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e007      	b.n	8002f36 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0210 	orr.w	r2, r2, #16
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7f1b      	ldrb	r3, [r3, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d108      	bne.n	8002f50 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0208 	orr.w	r2, r2, #8
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e007      	b.n	8002f60 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7f5b      	ldrb	r3, [r3, #29]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d108      	bne.n	8002f7a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e007      	b.n	8002f8a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	ea42 0103 	orr.w	r1, r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fde:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d003      	beq.n	8002fee <HAL_CAN_ConfigFilter+0x26>
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	f040 80aa 	bne.w	8003142 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2201      	movs	r2, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	401a      	ands	r2, r3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d123      	bne.n	8003070 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800304a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3248      	adds	r2, #72	; 0x48
 8003050:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003064:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	3348      	adds	r3, #72	; 0x48
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d122      	bne.n	80030be <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	431a      	orrs	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003098:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3248      	adds	r2, #72	; 0x48
 800309e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	3348      	adds	r3, #72	; 0x48
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030d8:	e007      	b.n	80030ea <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	401a      	ands	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003104:	e007      	b.n	8003116 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	431a      	orrs	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003134:	f023 0201 	bic.w	r2, r3, #1
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e006      	b.n	8003150 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d12e      	bne.n	80031cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003186:	f7ff fa4f 	bl	8002628 <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800318c:	e012      	b.n	80031b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800318e:	f7ff fa4b 	bl	8002628 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b0a      	cmp	r3, #10
 800319a:	d90b      	bls.n	80031b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2205      	movs	r2, #5
 80031ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e012      	b.n	80031da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e006      	b.n	80031da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b089      	sub	sp, #36	; 0x24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d003      	beq.n	800320e <HAL_CAN_AddTxMessage+0x2c>
 8003206:	7ffb      	ldrb	r3, [r7, #31]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f040 80b8 	bne.w	800337e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a0 	beq.w	800336e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d907      	bls.n	800324e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e09e      	b.n	800338c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800324e:	2201      	movs	r2, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	6809      	ldr	r1, [r1, #0]
 800326e:	431a      	orrs	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3318      	adds	r3, #24
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	440b      	add	r3, r1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e00f      	b.n	800329c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003286:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003290:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3318      	adds	r3, #24
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	440b      	add	r3, r1
 800329a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3318      	adds	r3, #24
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	440b      	add	r3, r1
 80032ac:	3304      	adds	r3, #4
 80032ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	7d1b      	ldrb	r3, [r3, #20]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d111      	bne.n	80032dc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3318      	adds	r3, #24
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3318      	adds	r3, #24
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	440b      	add	r3, r1
 80032d8:	3304      	adds	r3, #4
 80032da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3307      	adds	r3, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	061a      	lsls	r2, r3, #24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3306      	adds	r3, #6
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3305      	adds	r3, #5
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	4313      	orrs	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	3204      	adds	r2, #4
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	4610      	mov	r0, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	6811      	ldr	r1, [r2, #0]
 8003304:	ea43 0200 	orr.w	r2, r3, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	440b      	add	r3, r1
 800330e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003312:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3303      	adds	r3, #3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	061a      	lsls	r2, r3, #24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3302      	adds	r3, #2
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3301      	adds	r3, #1
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4313      	orrs	r3, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	4610      	mov	r0, r2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	6811      	ldr	r1, [r2, #0]
 800333a:	ea43 0200 	orr.w	r2, r3, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	440b      	add	r3, r1
 8003344:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003348:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3318      	adds	r3, #24
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6811      	ldr	r1, [r2, #0]
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3318      	adds	r3, #24
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	440b      	add	r3, r1
 8003368:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e00e      	b.n	800338c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e006      	b.n	800338c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3724      	adds	r7, #36	; 0x24
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d003      	beq.n	80033ba <HAL_CAN_GetRxMessage+0x24>
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f040 80f3 	bne.w	80035a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10e      	bne.n	80033de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0e7      	b.n	80035ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d8      	b.n	80035ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	331b      	adds	r3, #27
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4413      	add	r3, r2
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0204 	and.w	r2, r3, #4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	331b      	adds	r3, #27
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0d5b      	lsrs	r3, r3, #21
 800342a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e00b      	b.n	800344c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	331b      	adds	r3, #27
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	4413      	add	r3, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	08db      	lsrs	r3, r3, #3
 8003444:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	331b      	adds	r3, #27
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	4413      	add	r3, r2
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0202 	and.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	331b      	adds	r3, #27
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	331b      	adds	r3, #27
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	b2da      	uxtb	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	331b      	adds	r3, #27
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0a1a      	lsrs	r2, r3, #8
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0c1a      	lsrs	r2, r3, #16
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	3302      	adds	r3, #2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e1a      	lsrs	r2, r3, #24
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	3303      	adds	r3, #3
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	4413      	add	r3, r2
 8003518:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3304      	adds	r3, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0a1a      	lsrs	r2, r3, #8
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	3305      	adds	r3, #5
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4413      	add	r3, r2
 800354a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0c1a      	lsrs	r2, r3, #16
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	3306      	adds	r3, #6
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e1a      	lsrs	r2, r3, #24
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	3307      	adds	r3, #7
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0220 	orr.w	r2, r2, #32
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	e007      	b.n	800359c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0220 	orr.w	r2, r2, #32
 800359a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e006      	b.n	80035ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d002      	beq.n	80035d6 <HAL_CAN_ActivateNotification+0x1e>
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d109      	bne.n	80035ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6959      	ldr	r1, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e006      	b.n	80035f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08a      	sub	sp, #40	; 0x28
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d07c      	beq.n	8003742 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d023      	beq.n	800369a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f983 	bl	8003970 <HAL_CAN_TxMailbox0CompleteCallback>
 800366a:	e016      	b.n	800369a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	e00c      	b.n	800369a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	e002      	b.n	800369a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f986 	bl	80039a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d024      	beq.n	80036ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f962 	bl	8003982 <HAL_CAN_TxMailbox1CompleteCallback>
 80036be:	e016      	b.n	80036ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e00c      	b.n	80036ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e002      	b.n	80036ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f965 	bl	80039b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d024      	beq.n	8003742 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003700:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f941 	bl	8003994 <HAL_CAN_TxMailbox2CompleteCallback>
 8003712:	e016      	b.n	8003742 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
 8003726:	e00c      	b.n	8003742 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e002      	b.n	8003742 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f944 	bl	80039ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2210      	movs	r2, #16
 8003764:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2208      	movs	r2, #8
 8003780:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f92a 	bl	80039dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fd fd03 	bl	80011ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2210      	movs	r2, #16
 80037c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2208      	movs	r2, #8
 80037e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f90a 	bl	8003a00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8f2 	bl	80039ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8f3 	bl	8003a12 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2208      	movs	r2, #8
 8003846:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8eb 	bl	8003a24 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d07b      	beq.n	8003950 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d072      	beq.n	8003948 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d043      	beq.n	8003948 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d03e      	beq.n	8003948 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d0:	2b60      	cmp	r3, #96	; 0x60
 80038d2:	d02b      	beq.n	800392c <HAL_CAN_IRQHandler+0x32a>
 80038d4:	2b60      	cmp	r3, #96	; 0x60
 80038d6:	d82e      	bhi.n	8003936 <HAL_CAN_IRQHandler+0x334>
 80038d8:	2b50      	cmp	r3, #80	; 0x50
 80038da:	d022      	beq.n	8003922 <HAL_CAN_IRQHandler+0x320>
 80038dc:	2b50      	cmp	r3, #80	; 0x50
 80038de:	d82a      	bhi.n	8003936 <HAL_CAN_IRQHandler+0x334>
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d019      	beq.n	8003918 <HAL_CAN_IRQHandler+0x316>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d826      	bhi.n	8003936 <HAL_CAN_IRQHandler+0x334>
 80038e8:	2b30      	cmp	r3, #48	; 0x30
 80038ea:	d010      	beq.n	800390e <HAL_CAN_IRQHandler+0x30c>
 80038ec:	2b30      	cmp	r3, #48	; 0x30
 80038ee:	d822      	bhi.n	8003936 <HAL_CAN_IRQHandler+0x334>
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d002      	beq.n	80038fa <HAL_CAN_IRQHandler+0x2f8>
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d005      	beq.n	8003904 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038f8:	e01d      	b.n	8003936 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003902:	e019      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f043 0310 	orr.w	r3, r3, #16
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800390c:	e014      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003916:	e00f      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003920:	e00a      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800392a:	e005      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003934:	e000      	b.n	8003938 <HAL_CAN_IRQHandler+0x336>
            break;
 8003936:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003946:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f867 	bl	8003a36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003968:	bf00      	nop
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a64:	4013      	ands	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	60d3      	str	r3, [r2, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	f003 0307 	and.w	r3, r3, #7
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	db0b      	blt.n	8003ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <__NVIC_EnableIRQ+0x34>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2001      	movs	r0, #1
 8003ace:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bac:	d301      	bcc.n	8003bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00f      	b.n	8003bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <SysTick_Config+0x40>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bba:	210f      	movs	r1, #15
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f7ff ff90 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <SysTick_Config+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <SysTick_Config+0x40>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	e000e010 	.word	0xe000e010

08003be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff2d 	bl	8003a48 <__NVIC_SetPriorityGrouping>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff42 	bl	8003a90 <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff90 	bl	8003b38 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5f 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff35 	bl	8003aac <__NVIC_EnableIRQ>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffa2 	bl	8003b9c <SysTick_Config>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e043      	b.n	8003d02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_DMA_Init+0xa8>)
 8003c82:	4413      	add	r3, r2
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_DMA_Init+0xac>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	009a      	lsls	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_DMA_Init+0xb0>)
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003cae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	bffdfff8 	.word	0xbffdfff8
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	40020000 	.word	0x40020000

08003d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Start_IT+0x20>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e04a      	b.n	8003dce <HAL_DMA_Start_IT+0xb6>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d13a      	bne.n	8003dc0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f938 	bl	8003fe4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 020e 	orr.w	r2, r2, #14
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e00f      	b.n	8003dae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 020a 	orr.w	r2, r2, #10
 8003dac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e005      	b.n	8003dcc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2204      	movs	r2, #4
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04f      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xc8>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d04a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d107      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a66      	ldr	r2, [pc, #408]	; (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d029      	beq.n	8003e86 <HAL_DMA_IRQHandler+0xae>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_DMA_IRQHandler+0x1f4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a63      	ldr	r2, [pc, #396]	; (8003fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0xa4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a62      	ldr	r2, [pc, #392]	; (8003fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d012      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a60      	ldr	r2, [pc, #384]	; (8003fd8 <HAL_DMA_IRQHandler+0x200>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x98>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5f      	ldr	r2, [pc, #380]	; (8003fdc <HAL_DMA_IRQHandler+0x204>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d102      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x92>
 8003e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e68:	e00e      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e6e:	e00b      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e74:	e008      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7a:	e005      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e80:	e002      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e000      	b.n	8003e88 <HAL_DMA_IRQHandler+0xb0>
 8003e86:	2304      	movs	r3, #4
 8003e88:	4a55      	ldr	r2, [pc, #340]	; (8003fe0 <HAL_DMA_IRQHandler+0x208>)
 8003e8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8094 	beq.w	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e9e:	e08e      	b.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d056      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x186>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d051      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020a 	bic.w	r2, r2, #10
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d029      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x166>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a37      	ldr	r2, [pc, #220]	; (8003fcc <HAL_DMA_IRQHandler+0x1f4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x162>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x15c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x156>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <HAL_DMA_IRQHandler+0x200>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x150>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <HAL_DMA_IRQHandler+0x204>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x14a>
 8003f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f20:	e00e      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f26:	e00b      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f2c:	e008      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f32:	e005      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f38:	e002      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0x168>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <HAL_DMA_IRQHandler+0x208>)
 8003f42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d034      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f5c:	e02f      	b.n	8003fbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2208      	movs	r2, #8
 8003f64:	409a      	lsls	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d028      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020e 	bic.w	r2, r2, #14
 8003f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f202 	lsl.w	r2, r1, r2
 8003f96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
    }
  }
  return;
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
}
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40020008 	.word	0x40020008
 8003fcc:	4002001c 	.word	0x4002001c
 8003fd0:	40020030 	.word	0x40020030
 8003fd4:	40020044 	.word	0x40020044
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	4002006c 	.word	0x4002006c
 8003fe0:	40020000 	.word	0x40020000

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b10      	cmp	r3, #16
 8004010:	d108      	bne.n	8004024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004022:	e007      	b.n	8004034 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b480      	push	{r7}
 8004042:	b08b      	sub	sp, #44	; 0x2c
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800404e:	2300      	movs	r3, #0
 8004050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004052:	e169      	b.n	8004328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004054:	2201      	movs	r2, #1
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	429a      	cmp	r2, r3
 800406e:	f040 8158 	bne.w	8004322 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a9a      	ldr	r2, [pc, #616]	; (80042e0 <HAL_GPIO_Init+0x2a0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d05e      	beq.n	800413a <HAL_GPIO_Init+0xfa>
 800407c:	4a98      	ldr	r2, [pc, #608]	; (80042e0 <HAL_GPIO_Init+0x2a0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d875      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 8004082:	4a98      	ldr	r2, [pc, #608]	; (80042e4 <HAL_GPIO_Init+0x2a4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d058      	beq.n	800413a <HAL_GPIO_Init+0xfa>
 8004088:	4a96      	ldr	r2, [pc, #600]	; (80042e4 <HAL_GPIO_Init+0x2a4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d86f      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 800408e:	4a96      	ldr	r2, [pc, #600]	; (80042e8 <HAL_GPIO_Init+0x2a8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d052      	beq.n	800413a <HAL_GPIO_Init+0xfa>
 8004094:	4a94      	ldr	r2, [pc, #592]	; (80042e8 <HAL_GPIO_Init+0x2a8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d869      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 800409a:	4a94      	ldr	r2, [pc, #592]	; (80042ec <HAL_GPIO_Init+0x2ac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d04c      	beq.n	800413a <HAL_GPIO_Init+0xfa>
 80040a0:	4a92      	ldr	r2, [pc, #584]	; (80042ec <HAL_GPIO_Init+0x2ac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d863      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 80040a6:	4a92      	ldr	r2, [pc, #584]	; (80042f0 <HAL_GPIO_Init+0x2b0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d046      	beq.n	800413a <HAL_GPIO_Init+0xfa>
 80040ac:	4a90      	ldr	r2, [pc, #576]	; (80042f0 <HAL_GPIO_Init+0x2b0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d85d      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 80040b2:	2b12      	cmp	r3, #18
 80040b4:	d82a      	bhi.n	800410c <HAL_GPIO_Init+0xcc>
 80040b6:	2b12      	cmp	r3, #18
 80040b8:	d859      	bhi.n	800416e <HAL_GPIO_Init+0x12e>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_GPIO_Init+0x80>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	0800413b 	.word	0x0800413b
 80040c4:	08004115 	.word	0x08004115
 80040c8:	08004127 	.word	0x08004127
 80040cc:	08004169 	.word	0x08004169
 80040d0:	0800416f 	.word	0x0800416f
 80040d4:	0800416f 	.word	0x0800416f
 80040d8:	0800416f 	.word	0x0800416f
 80040dc:	0800416f 	.word	0x0800416f
 80040e0:	0800416f 	.word	0x0800416f
 80040e4:	0800416f 	.word	0x0800416f
 80040e8:	0800416f 	.word	0x0800416f
 80040ec:	0800416f 	.word	0x0800416f
 80040f0:	0800416f 	.word	0x0800416f
 80040f4:	0800416f 	.word	0x0800416f
 80040f8:	0800416f 	.word	0x0800416f
 80040fc:	0800416f 	.word	0x0800416f
 8004100:	0800416f 	.word	0x0800416f
 8004104:	0800411d 	.word	0x0800411d
 8004108:	08004131 	.word	0x08004131
 800410c:	4a79      	ldr	r2, [pc, #484]	; (80042f4 <HAL_GPIO_Init+0x2b4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004112:	e02c      	b.n	800416e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	623b      	str	r3, [r7, #32]
          break;
 800411a:	e029      	b.n	8004170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	3304      	adds	r3, #4
 8004122:	623b      	str	r3, [r7, #32]
          break;
 8004124:	e024      	b.n	8004170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	3308      	adds	r3, #8
 800412c:	623b      	str	r3, [r7, #32]
          break;
 800412e:	e01f      	b.n	8004170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	330c      	adds	r3, #12
 8004136:	623b      	str	r3, [r7, #32]
          break;
 8004138:	e01a      	b.n	8004170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004142:	2304      	movs	r3, #4
 8004144:	623b      	str	r3, [r7, #32]
          break;
 8004146:	e013      	b.n	8004170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004150:	2308      	movs	r3, #8
 8004152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	611a      	str	r2, [r3, #16]
          break;
 800415a:	e009      	b.n	8004170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800415c:	2308      	movs	r3, #8
 800415e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	615a      	str	r2, [r3, #20]
          break;
 8004166:	e003      	b.n	8004170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004168:	2300      	movs	r3, #0
 800416a:	623b      	str	r3, [r7, #32]
          break;
 800416c:	e000      	b.n	8004170 <HAL_GPIO_Init+0x130>
          break;
 800416e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2bff      	cmp	r3, #255	; 0xff
 8004174:	d801      	bhi.n	800417a <HAL_GPIO_Init+0x13a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	e001      	b.n	800417e <HAL_GPIO_Init+0x13e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2bff      	cmp	r3, #255	; 0xff
 8004184:	d802      	bhi.n	800418c <HAL_GPIO_Init+0x14c>
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	e002      	b.n	8004192 <HAL_GPIO_Init+0x152>
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	3b08      	subs	r3, #8
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	210f      	movs	r1, #15
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	6a39      	ldr	r1, [r7, #32]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	431a      	orrs	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80b1 	beq.w	8004322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041c0:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <HAL_GPIO_Init+0x2b8>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4a4c      	ldr	r2, [pc, #304]	; (80042f8 <HAL_GPIO_Init+0x2b8>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6193      	str	r3, [r2, #24]
 80041cc:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <HAL_GPIO_Init+0x2b8>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80041d8:	4a48      	ldr	r2, [pc, #288]	; (80042fc <HAL_GPIO_Init+0x2bc>)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	220f      	movs	r2, #15
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <HAL_GPIO_Init+0x2c0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_GPIO_Init+0x1ec>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3f      	ldr	r2, [pc, #252]	; (8004304 <HAL_GPIO_Init+0x2c4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00d      	beq.n	8004228 <HAL_GPIO_Init+0x1e8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3e      	ldr	r2, [pc, #248]	; (8004308 <HAL_GPIO_Init+0x2c8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <HAL_GPIO_Init+0x1e4>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3d      	ldr	r2, [pc, #244]	; (800430c <HAL_GPIO_Init+0x2cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_GPIO_Init+0x1e0>
 800421c:	2303      	movs	r3, #3
 800421e:	e006      	b.n	800422e <HAL_GPIO_Init+0x1ee>
 8004220:	2304      	movs	r3, #4
 8004222:	e004      	b.n	800422e <HAL_GPIO_Init+0x1ee>
 8004224:	2302      	movs	r3, #2
 8004226:	e002      	b.n	800422e <HAL_GPIO_Init+0x1ee>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_GPIO_Init+0x1ee>
 800422c:	2300      	movs	r3, #0
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	f002 0203 	and.w	r2, r2, #3
 8004234:	0092      	lsls	r2, r2, #2
 8004236:	4093      	lsls	r3, r2
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800423e:	492f      	ldr	r1, [pc, #188]	; (80042fc <HAL_GPIO_Init+0x2bc>)
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d006      	beq.n	8004266 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004258:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	492c      	ldr	r1, [pc, #176]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	e006      	b.n	8004274 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	43db      	mvns	r3, r3
 800426e:	4928      	ldr	r1, [pc, #160]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004270:	4013      	ands	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4922      	ldr	r1, [pc, #136]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
 800428c:	e006      	b.n	800429c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	43db      	mvns	r3, r3
 8004296:	491e      	ldr	r1, [pc, #120]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 8004298:	4013      	ands	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	4918      	ldr	r1, [pc, #96]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	43db      	mvns	r3, r3
 80042be:	4914      	ldr	r1, [pc, #80]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d021      	beq.n	8004314 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	490e      	ldr	r1, [pc, #56]	; (8004310 <HAL_GPIO_Init+0x2d0>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
 80042dc:	e021      	b.n	8004322 <HAL_GPIO_Init+0x2e2>
 80042de:	bf00      	nop
 80042e0:	10320000 	.word	0x10320000
 80042e4:	10310000 	.word	0x10310000
 80042e8:	10220000 	.word	0x10220000
 80042ec:	10210000 	.word	0x10210000
 80042f0:	10120000 	.word	0x10120000
 80042f4:	10110000 	.word	0x10110000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40010000 	.word	0x40010000
 8004300:	40010800 	.word	0x40010800
 8004304:	40010c00 	.word	0x40010c00
 8004308:	40011000 	.word	0x40011000
 800430c:	40011400 	.word	0x40011400
 8004310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_GPIO_Init+0x304>)
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	43db      	mvns	r3, r3
 800431c:	4909      	ldr	r1, [pc, #36]	; (8004344 <HAL_GPIO_Init+0x304>)
 800431e:	4013      	ands	r3, r2
 8004320:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	3301      	adds	r3, #1
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	f47f ae8e 	bne.w	8004054 <HAL_GPIO_Init+0x14>
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	372c      	adds	r7, #44	; 0x2c
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40010400 	.word	0x40010400

08004348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	887b      	ldrh	r3, [r7, #2]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e001      	b.n	800436a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]
 8004382:	4613      	mov	r3, r2
 8004384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004386:	787b      	ldrb	r3, [r7, #1]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800438c:	887a      	ldrh	r2, [r7, #2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004392:	e003      	b.n	800439c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004394:	887b      	ldrh	r3, [r7, #2]
 8004396:	041a      	lsls	r2, r3, #16
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	611a      	str	r2, [r3, #16]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fd2e 	bl	8001e28 <HAL_GPIO_EXTI_Callback>
  }
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e26c      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8087 	beq.w	8004506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f8:	4b92      	ldr	r3, [pc, #584]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b04      	cmp	r3, #4
 8004402:	d00c      	beq.n	800441e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004404:	4b8f      	ldr	r3, [pc, #572]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d112      	bne.n	8004436 <HAL_RCC_OscConfig+0x5e>
 8004410:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d10b      	bne.n	8004436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441e:	4b89      	ldr	r3, [pc, #548]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d06c      	beq.n	8004504 <HAL_RCC_OscConfig+0x12c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d168      	bne.n	8004504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e246      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x76>
 8004440:	4b80      	ldr	r3, [pc, #512]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7f      	ldr	r2, [pc, #508]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e02e      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x98>
 8004456:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7a      	ldr	r2, [pc, #488]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800445c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b78      	ldr	r3, [pc, #480]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a77      	ldr	r2, [pc, #476]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0xbc>
 800447a:	4b72      	ldr	r3, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a71      	ldr	r2, [pc, #452]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b6f      	ldr	r3, [pc, #444]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xd4>
 8004494:	4b6b      	ldr	r3, [pc, #428]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6a      	ldr	r2, [pc, #424]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b68      	ldr	r3, [pc, #416]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a67      	ldr	r2, [pc, #412]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe f8b8 	bl	8002628 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fe f8b4 	bl	8002628 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1fa      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xe4>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe f8a4 	bl	8002628 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe f8a0 	bl	8002628 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1e6      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x10c>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004512:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800451e:	4b49      	ldr	r3, [pc, #292]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x18c>
 800452a:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x176>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1ba      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4939      	ldr	r1, [pc, #228]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fe f859 	bl	8002628 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457a:	f7fe f855 	bl	8002628 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e19b      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b2a      	ldr	r3, [pc, #168]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4927      	ldr	r1, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCC_OscConfig+0x270>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fe f838 	bl	8002628 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe f834 	bl	8002628 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e17a      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d03a      	beq.n	800465c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_RCC_OscConfig+0x274>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fe f818 	bl	8002628 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fe f814 	bl	8002628 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e15a      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_RCC_OscConfig+0x26c>)
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800461a:	2001      	movs	r0, #1
 800461c:	f000 faa8 	bl	8004b70 <RCC_Delay>
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <HAL_RCC_OscConfig+0x274>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004628:	f7fd fffe 	bl	8002628 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462e:	e00f      	b.n	8004650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004630:	f7fd fffa 	bl	8002628 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d908      	bls.n	8004650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e140      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	42420000 	.word	0x42420000
 800464c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004650:	4b9e      	ldr	r3, [pc, #632]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e9      	bne.n	8004630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80a6 	beq.w	80047b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466e:	4b97      	ldr	r3, [pc, #604]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	4b94      	ldr	r3, [pc, #592]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4a93      	ldr	r2, [pc, #588]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	61d3      	str	r3, [r2, #28]
 8004686:	4b91      	ldr	r3, [pc, #580]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b8e      	ldr	r3, [pc, #568]	; (80048d0 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d118      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x4f8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a8a      	ldr	r2, [pc, #552]	; (80048d0 <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fd ffbb 	bl	8002628 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fd ffb7 	bl	8002628 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	; 0x64
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0fd      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b81      	ldr	r3, [pc, #516]	; (80048d0 <HAL_RCC_OscConfig+0x4f8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x312>
 80046dc:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	4a7a      	ldr	r2, [pc, #488]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	6213      	str	r3, [r2, #32]
 80046e8:	e02d      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0x334>
 80046f2:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6213      	str	r3, [r2, #32]
 80046fe:	4b73      	ldr	r3, [pc, #460]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4a72      	ldr	r2, [pc, #456]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004704:	f023 0304 	bic.w	r3, r3, #4
 8004708:	6213      	str	r3, [r2, #32]
 800470a:	e01c      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d10c      	bne.n	800472e <HAL_RCC_OscConfig+0x356>
 8004714:	4b6d      	ldr	r3, [pc, #436]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a6c      	ldr	r2, [pc, #432]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	6213      	str	r3, [r2, #32]
 8004720:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4a69      	ldr	r2, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6213      	str	r3, [r2, #32]
 800472c:	e00b      	b.n	8004746 <HAL_RCC_OscConfig+0x36e>
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	4b64      	ldr	r3, [pc, #400]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a63      	ldr	r2, [pc, #396]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d015      	beq.n	800477a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd ff6b 	bl	8002628 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd ff67 	bl	8002628 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0ab      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCC_OscConfig+0x37e>
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd ff55 	bl	8002628 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd ff51 	bl	8002628 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e095      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	4b4c      	ldr	r3, [pc, #304]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ee      	bne.n	8004782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047aa:	4b48      	ldr	r3, [pc, #288]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80047b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8081 	beq.w	80048c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c0:	4b42      	ldr	r3, [pc, #264]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d061      	beq.n	8004890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d146      	bne.n	8004862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_OscConfig+0x4fc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fd ff25 	bl	8002628 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fd ff21 	bl	8002628 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e067      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004808:	d108      	bne.n	800481c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	492d      	ldr	r1, [pc, #180]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a19      	ldr	r1, [r3, #32]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	430b      	orrs	r3, r1
 800482e:	4927      	ldr	r1, [pc, #156]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <HAL_RCC_OscConfig+0x4fc>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd fef5 	bl	8002628 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd fef1 	bl	8002628 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e037      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x46a>
 8004860:	e02f      	b.n	80048c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <HAL_RCC_OscConfig+0x4fc>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fd fede 	bl	8002628 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd feda 	bl	8002628 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e020      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x498>
 800488e:	e018      	b.n	80048c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e013      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_OscConfig+0x4f4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420060 	.word	0x42420060

080048d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0d0      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b6a      	ldr	r3, [pc, #424]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b67      	ldr	r3, [pc, #412]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 0207 	bic.w	r2, r3, #7
 8004902:	4965      	ldr	r1, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b63      	ldr	r3, [pc, #396]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0b8      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004934:	4b59      	ldr	r3, [pc, #356]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a58      	ldr	r2, [pc, #352]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800493e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800494c:	4b53      	ldr	r3, [pc, #332]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	494d      	ldr	r1, [pc, #308]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d040      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d107      	bne.n	800498e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d115      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07f      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e073      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e06b      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4936      	ldr	r1, [pc, #216]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fe2e 	bl	8002628 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fd fe2a 	bl	8002628 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e053      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d210      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 0207 	bic.w	r2, r3, #7
 8004a0e:	4922      	ldr	r1, [pc, #136]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e032      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4916      	ldr	r1, [pc, #88]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a66:	f000 f821 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	490a      	ldr	r1, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	5ccb      	ldrb	r3, [r1, r3]
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8004a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fd8c 	bl	80025a4 <HAL_InitTick>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	08005f20 	.word	0x08005f20
 8004aa4:	20000030 	.word	0x20000030
 8004aa8:	20000034 	.word	0x20000034

08004aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	b490      	push	{r4, r7}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ab4:	1d3c      	adds	r4, r7, #4
 8004ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004abc:	f240 2301 	movw	r3, #513	; 0x201
 8004ac0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x40>
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x46>
 8004aea:	e02d      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aee:	623b      	str	r3, [r7, #32]
      break;
 8004af0:	e02d      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	0c9b      	lsrs	r3, r3, #18
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004afe:	4413      	add	r3, r2
 8004b00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0c5b      	lsrs	r3, r3, #17
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b1e:	4413      	add	r3, r2
 8004b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b2a:	fb02 f203 	mul.w	r2, r2, r3
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e004      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4a0b      	ldr	r2, [pc, #44]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	623b      	str	r3, [r7, #32]
      break;
 8004b46:	e002      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b4a:	623b      	str	r3, [r7, #32]
      break;
 8004b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc90      	pop	{r4, r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	08005f10 	.word	0x08005f10
 8004b60:	40021000 	.word	0x40021000
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	003d0900 	.word	0x003d0900
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <RCC_Delay+0x34>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <RCC_Delay+0x38>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	0a5b      	lsrs	r3, r3, #9
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b8c:	bf00      	nop
  }
  while (Delay --);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	60fa      	str	r2, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f9      	bne.n	8004b8c <RCC_Delay+0x1c>
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	20000030 	.word	0x20000030
 8004ba8:	10624dd3 	.word	0x10624dd3

08004bac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d07d      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bcc:	4b4f      	ldr	r3, [pc, #316]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b4c      	ldr	r3, [pc, #304]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be2:	61d3      	str	r3, [r2, #28]
 8004be4:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d118      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a42      	ldr	r2, [pc, #264]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fd0c 	bl	8002628 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fd fd08 	bl	8002628 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e06d      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c32:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d02e      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d027      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c50:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c5a:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c66:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d014      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fd fcd7 	bl	8002628 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fcd3 	bl	8002628 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e036      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ee      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4917      	ldr	r1, [pc, #92]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	490b      	ldr	r1, [pc, #44]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4904      	ldr	r1, [pc, #16]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
 8004d14:	42420440 	.word	0x42420440

08004d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e041      	b.n	8004dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd faa4 	bl	800228c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f000 fd3c 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e03a      	b.n	8004e46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_TIM_Base_Start_IT+0x98>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x58>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d009      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x58>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x58>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d111      	bne.n	8004e34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d010      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	e007      	b.n	8004e44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800

08004e5c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e041      	b.n	8004ef2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f839 	bl	8004efa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 fc9a 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e041      	b.n	8004fa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f839 	bl	8004faa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 fc42 	bl	80057d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x24>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e022      	b.n	8005026 <HAL_TIM_PWM_Start+0x6a>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d109      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x3e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e015      	b.n	8005026 <HAL_TIM_PWM_Start+0x6a>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x58>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e008      	b.n	8005026 <HAL_TIM_PWM_Start+0x6a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e05e      	b.n	80050ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0x82>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	e013      	b.n	8005066 <HAL_TIM_PWM_Start+0xaa>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Start+0x92>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800504c:	e00b      	b.n	8005066 <HAL_TIM_PWM_Start+0xaa>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d104      	bne.n	800505e <HAL_TIM_PWM_Start+0xa2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800505c:	e003      	b.n	8005066 <HAL_TIM_PWM_Start+0xaa>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fe30 	bl	8005cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <HAL_TIM_PWM_Start+0x138>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d107      	bne.n	800508e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a18      	ldr	r2, [pc, #96]	; (80050f4 <HAL_TIM_PWM_Start+0x138>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIM_PWM_Start+0xfa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_PWM_Start+0xfa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <HAL_TIM_PWM_Start+0x13c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_PWM_Start+0xfa>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a12      	ldr	r2, [pc, #72]	; (80050fc <HAL_TIM_PWM_Start+0x140>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d010      	beq.n	80050ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d8:	e007      	b.n	80050ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800

08005100 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fdde 	bl	8005cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_TIM_PWM_Stop+0xc4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d117      	bne.n	8005152 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	f241 1311 	movw	r3, #4369	; 0x1111
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10f      	bne.n	8005152 <HAL_TIM_PWM_Stop+0x52>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	f240 4344 	movw	r3, #1092	; 0x444
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_TIM_PWM_Stop+0x52>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	f241 1311 	movw	r3, #4369	; 0x1111
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <HAL_TIM_PWM_Stop+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	f240 4344 	movw	r3, #1092	; 0x444
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d107      	bne.n	8005182 <HAL_TIM_PWM_Stop+0x82>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Stop+0x92>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005190:	e013      	b.n	80051ba <HAL_TIM_PWM_Stop+0xba>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Stop+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_PWM_Stop+0xba>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Stop+0xb2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	e003      	b.n	80051ba <HAL_TIM_PWM_Stop+0xba>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40012c00 	.word	0x40012c00

080051c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0202 	mvn.w	r2, #2
 80051f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fac7 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 faba 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fac9 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d122      	bne.n	8005278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b04      	cmp	r3, #4
 800523e:	d11b      	bne.n	8005278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0204 	mvn.w	r2, #4
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa9d 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa90 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fa9f 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b08      	cmp	r3, #8
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b08      	cmp	r3, #8
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0208 	mvn.w	r2, #8
 800529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2204      	movs	r2, #4
 80052a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa73 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa66 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa75 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0210 	mvn.w	r2, #16
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2208      	movs	r2, #8
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa49 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa3c 	bl	800578c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fa4b 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d10e      	bne.n	800534c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0201 	mvn.w	r2, #1
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fc fdc6 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fd8a 	bl	8005e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa0f 	bl	80057c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0220 	mvn.w	r2, #32
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fd55 	bl	8005e7a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e046      	b.n	8005480 <HAL_TIM_OC_ConfigChannel+0xa8>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d839      	bhi.n	8005474 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	0800543d 	.word	0x0800543d
 800540c:	08005475 	.word	0x08005475
 8005410:	08005475 	.word	0x08005475
 8005414:	08005475 	.word	0x08005475
 8005418:	0800544b 	.word	0x0800544b
 800541c:	08005475 	.word	0x08005475
 8005420:	08005475 	.word	0x08005475
 8005424:	08005475 	.word	0x08005475
 8005428:	08005459 	.word	0x08005459
 800542c:	08005475 	.word	0x08005475
 8005430:	08005475 	.word	0x08005475
 8005434:	08005475 	.word	0x08005475
 8005438:	08005467 	.word	0x08005467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa28 	bl	8005898 <TIM_OC1_SetConfig>
      break;
 8005448:	e015      	b.n	8005476 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fa87 	bl	8005964 <TIM_OC2_SetConfig>
      break;
 8005456:	e00e      	b.n	8005476 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 faea 	bl	8005a38 <TIM_OC3_SetConfig>
      break;
 8005464:	e007      	b.n	8005476 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb4d 	bl	8005b0c <TIM_OC4_SetConfig>
      break;
 8005472:	e000      	b.n	8005476 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ac      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f200 809f 	bhi.w	80055f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080055f1 	.word	0x080055f1
 80054c0:	080055f1 	.word	0x080055f1
 80054c4:	080055f1 	.word	0x080055f1
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	080055f1 	.word	0x080055f1
 80054d4:	080055f1 	.word	0x080055f1
 80054d8:	0800556f 	.word	0x0800556f
 80054dc:	080055f1 	.word	0x080055f1
 80054e0:	080055f1 	.word	0x080055f1
 80054e4:	080055f1 	.word	0x080055f1
 80054e8:	080055af 	.word	0x080055af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f9d0 	bl	8005898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e062      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa16 	bl	8005964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e041      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fa5f 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e021      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 faa9 	bl	8005b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e000      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80055f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIM_ConfigClockSource+0x18>
 8005618:	2302      	movs	r3, #2
 800561a:	e0b3      	b.n	8005784 <HAL_TIM_ConfigClockSource+0x180>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800563a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d03e      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0xd0>
 8005656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565a:	f200 8087 	bhi.w	800576c <HAL_TIM_ConfigClockSource+0x168>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005662:	f000 8085 	beq.w	8005770 <HAL_TIM_ConfigClockSource+0x16c>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d87f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 800566c:	2b70      	cmp	r3, #112	; 0x70
 800566e:	d01a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xa2>
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d87b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d050      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x116>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d877      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d03c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0xf6>
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d873      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d058      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x136>
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d86f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 800568c:	2b30      	cmp	r3, #48	; 0x30
 800568e:	d064      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x156>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d86b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d060      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x156>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d867      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x168>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x156>
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d05a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056a4:	e062      	b.n	800576c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6899      	ldr	r1, [r3, #8]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f000 faee 	bl	8005c96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	609a      	str	r2, [r3, #8]
      break;
 80056d2:	e04e      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6899      	ldr	r1, [r3, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f000 fad7 	bl	8005c96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f6:	609a      	str	r2, [r3, #8]
      break;
 80056f8:	e03b      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fa4e 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2150      	movs	r1, #80	; 0x50
 8005712:	4618      	mov	r0, r3
 8005714:	f000 faa5 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005718:	e02b      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fa6c 	bl	8005c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2160      	movs	r1, #96	; 0x60
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fa95 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005738:	e01b      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fa2e 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa85 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005758:	e00b      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fa7c 	bl	8005c62 <TIM_ITRx_SetConfig>
        break;
 800576a:	e002      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <TIM_Base_SetConfig+0xb8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a26      	ldr	r2, [pc, #152]	; (8005890 <TIM_Base_SetConfig+0xbc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x30>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a25      	ldr	r2, [pc, #148]	; (8005894 <TIM_Base_SetConfig+0xc0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1c      	ldr	r2, [pc, #112]	; (800588c <TIM_Base_SetConfig+0xb8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a19      	ldr	r2, [pc, #100]	; (8005890 <TIM_Base_SetConfig+0xbc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x62>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <TIM_Base_SetConfig+0xc0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <TIM_Base_SetConfig+0xb8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d103      	bne.n	800587c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	615a      	str	r2, [r3, #20]
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800

08005898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0201 	bic.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 0302 	bic.w	r3, r3, #2
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <TIM_OC1_SetConfig+0xc8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10c      	bne.n	800590e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0308 	bic.w	r3, r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a13      	ldr	r2, [pc, #76]	; (8005960 <TIM_OC1_SetConfig+0xc8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d111      	bne.n	800593a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00

08005964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f023 0210 	bic.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0320 	bic.w	r3, r3, #32
 80059ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <TIM_OC2_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10d      	bne.n	80059e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <TIM_OC2_SetConfig+0xd0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <TIM_OC3_SetConfig+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10d      	bne.n	8005ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <TIM_OC3_SetConfig+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40012c00 	.word	0x40012c00

08005b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	031b      	lsls	r3, r3, #12
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <TIM_OC4_SetConfig+0x98>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d109      	bne.n	8005b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	019b      	lsls	r3, r3, #6
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr
 8005ba4:	40012c00 	.word	0x40012c00

08005ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f023 030a 	bic.w	r3, r3, #10
 8005be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 0210 	bic.w	r2, r3, #16
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	031b      	lsls	r3, r3, #12
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f043 0307 	orr.w	r3, r3, #7
 8005c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr

08005c96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	021a      	lsls	r2, r3, #8
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	609a      	str	r2, [r3, #8]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e046      	b.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d009      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10c      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800

08005dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e03d      	b.n	8005e70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr
	...

08005ea0 <__libc_init_array>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	4d0c      	ldr	r5, [pc, #48]	; (8005ed8 <__libc_init_array+0x38>)
 8005ea6:	4c0d      	ldr	r4, [pc, #52]	; (8005edc <__libc_init_array+0x3c>)
 8005ea8:	1b64      	subs	r4, r4, r5
 8005eaa:	10a4      	asrs	r4, r4, #2
 8005eac:	42a6      	cmp	r6, r4
 8005eae:	d109      	bne.n	8005ec4 <__libc_init_array+0x24>
 8005eb0:	f000 f822 	bl	8005ef8 <_init>
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	4d0a      	ldr	r5, [pc, #40]	; (8005ee0 <__libc_init_array+0x40>)
 8005eb8:	4c0a      	ldr	r4, [pc, #40]	; (8005ee4 <__libc_init_array+0x44>)
 8005eba:	1b64      	subs	r4, r4, r5
 8005ebc:	10a4      	asrs	r4, r4, #2
 8005ebe:	42a6      	cmp	r6, r4
 8005ec0:	d105      	bne.n	8005ece <__libc_init_array+0x2e>
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec8:	4798      	blx	r3
 8005eca:	3601      	adds	r6, #1
 8005ecc:	e7ee      	b.n	8005eac <__libc_init_array+0xc>
 8005ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed2:	4798      	blx	r3
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7f2      	b.n	8005ebe <__libc_init_array+0x1e>
 8005ed8:	08005f30 	.word	0x08005f30
 8005edc:	08005f30 	.word	0x08005f30
 8005ee0:	08005f30 	.word	0x08005f30
 8005ee4:	08005f34 	.word	0x08005f34

08005ee8 <memset>:
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4402      	add	r2, r0
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d100      	bne.n	8005ef2 <memset+0xa>
 8005ef0:	4770      	bx	lr
 8005ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef6:	e7f9      	b.n	8005eec <memset+0x4>

08005ef8 <_init>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr

08005f04 <_fini>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr
