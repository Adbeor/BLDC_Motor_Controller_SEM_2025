
BLDC_Motor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005778  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a8  080058a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080058a8  080058a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a8  080058a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  080058bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080058bc  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cde7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f62  00000000  00000000  0002ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ed  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d32c  00000000  00000000  00047f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008beec  00000000  00000000  00055231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e111d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  000e1170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005870 	.word	0x08005870

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005870 	.word	0x08005870

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <PIDController_Init>:
 *      Author: del
 */

#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
	pid->prevError  = 0.0f;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000fae:	b5b0      	push	{r4, r5, r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f7ff fce9 	bl	8000994 <__aeabi_fsub>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	617b      	str	r3, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff fdeb 	bl	8000ba8 <__aeabi_fmul>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	613b      	str	r3, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	69dc      	ldr	r4, [r3, #28]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fde0 	bl	8000ba8 <__aeabi_fmul>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f7ff fdd8 	bl	8000ba8 <__aeabi_fmul>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fcc8 	bl	8000998 <__addsf3>
 8001008:	4603      	mov	r3, r0
 800100a:	4619      	mov	r1, r3
 800100c:	4628      	mov	r0, r5
 800100e:	f7ff fdcb 	bl	8000ba8 <__aeabi_fmul>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fcbe 	bl	8000998 <__addsf3>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	61da      	str	r2, [r3, #28]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMax) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f7ff ff76 	bl	8000f20 <__aeabi_fcmpgt>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <PIDController_Update+0x96>

        pid->integrator = pid->limMax;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	61da      	str	r2, [r3, #28]
 8001042:	e00e      	b.n	8001062 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMin) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff48 	bl	8000ee4 <__aeabi_fcmplt>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <PIDController_Update+0xb4>

        pid->integrator = pid->limMin;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	61da      	str	r2, [r3, #28]

	/*
	* Derivative (band-limited differentiator)
	*/

    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4619      	mov	r1, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc95 	bl	8000998 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	461c      	mov	r4, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fc8b 	bl	8000994 <__aeabi_fsub>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd90 	bl	8000ba8 <__aeabi_fmul>
 8001088:	4603      	mov	r3, r0
 800108a:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4619      	mov	r1, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc80 	bl	8000998 <__addsf3>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f7ff fc76 	bl	8000994 <__aeabi_fsub>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fd78 	bl	8000ba8 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff fc6b 	bl	8000998 <__addsf3>
 80010c2:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010c4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
                        / (2.0f * pid->tau + pid->T);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc62 	bl	8000998 <__addsf3>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff fc5a 	bl	8000998 <__addsf3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fe11 	bl	8000d10 <__aeabi_fdiv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fc4b 	bl	8000998 <__addsf3>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f7ff fc43 	bl	8000998 <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f7ff fefb 	bl	8000f20 <__aeabi_fcmpgt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <PIDController_Update+0x18c>

        pid->out = pid->limMax;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
 8001138:	e00e      	b.n	8001158 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff fecd 	bl	8000ee4 <__aeabi_fcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <PIDController_Update+0x1aa>

        pid->out = pid->limMin;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return controller output */
    return pid->out;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c

}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}

08001170 <PIDController_Reset>:

void PIDController_Reset(PIDController *pid) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
 	pid->prevError  = 0.0f;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	621a      	str	r2, [r3, #32]

	pid->differentiator  = 0.0f;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28

	pid->out = 0.0f;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f001 ff94 	bl	80030e8 <HAL_CAN_GetRxMessage>

	if (RxData[0] == 96 && RxData[1] == 234){ // HMI Page 60000
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b60      	cmp	r3, #96	; 0x60
 80011c6:	d12d      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	2bea      	cmp	r3, #234	; 0xea
 80011ce:	d129      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>

		if (RxData[4] == 1){ //HMI button 1
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			power = 1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		}
		if (RxData[4] == 2){ //HMI button 2
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d102      	bne.n	80011ec <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
			power = 0;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
		}


		if (RxData[5] == 16){ //HMI down button
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011ee:	795b      	ldrb	r3, [r3, #5]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d102      	bne.n	80011fa <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			TxData[0] = 50;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80011f6:	2232      	movs	r2, #50	; 0x32
 80011f8:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 8){ //HMI left button
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d102      	bne.n	8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
			TxData[0] = 100;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 32){ //HMI right button
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800120a:	795b      	ldrb	r3, [r3, #5]
 800120c:	2b20      	cmp	r3, #32
 800120e:	d102      	bne.n	8001216 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			TxData[0] = 150;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001212:	2296      	movs	r2, #150	; 0x96
 8001214:	701a      	strb	r2, [r3, #0]

		}
		if (RxData[5] == 2){ //HMI up button
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d102      	bne.n	8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
			TxData[0] = 200;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001220:	22c8      	movs	r2, #200	; 0xc8
 8001222:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000108 	.word	0x20000108
 8001230:	20000170 	.word	0x20000170
 8001234:	20000028 	.word	0x20000028
 8001238:	200000b4 	.word	0x200000b4

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b08d      	sub	sp, #52	; 0x34
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f001 f80b 	bl	800225c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f94b 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 fb57 	bl	80018fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800124e:	f000 f997 	bl	8001580 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001252:	f000 fa25 	bl	80016a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001256:	f000 fadb 	bl	8001810 <MX_TIM2_Init>
  MX_CAN_Init();
 800125a:	f000 f9cf 	bl	80015fc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,  GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2102      	movs	r1, #2
 8001262:	488b      	ldr	r0, [pc, #556]	; (8001490 <main+0x254>)
 8001264:	f002 fd43 	bl	8003cee <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8001268:	488a      	ldr	r0, [pc, #552]	; (8001494 <main+0x258>)
 800126a:	f003 fa61 	bl	8004730 <HAL_TIM_Base_Start_IT>


  //CAN
  HAL_CAN_Start(&hcan);
 800126e:	488a      	ldr	r0, [pc, #552]	; (8001498 <main+0x25c>)
 8001270:	f001 fe1c 	bl	8002eac <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001274:	2102      	movs	r1, #2
 8001276:	4888      	ldr	r0, [pc, #544]	; (8001498 <main+0x25c>)
 8001278:	f002 f847 	bl	800330a <HAL_CAN_ActivateNotification>

  //Configurando la transmision

  TxHeader.DLC = 8;  // Son 8 bytes de data
 800127c:	4b87      	ldr	r3, [pc, #540]	; (800149c <main+0x260>)
 800127e:	2208      	movs	r2, #8
 8001280:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8001282:	4b86      	ldr	r3, [pc, #536]	; (800149c <main+0x260>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD; //Identificador del mensaje
 8001288:	4b84      	ldr	r3, [pc, #528]	; (800149c <main+0x260>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800128e:	4b83      	ldr	r3, [pc, #524]	; (800149c <main+0x260>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;  // Este es el ID que mandaremos al periferico
 8001294:	4b81      	ldr	r3, [pc, #516]	; (800149c <main+0x260>)
 8001296:	f240 1203 	movw	r2, #259	; 0x103
 800129a:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800129c:	4b7f      	ldr	r3, [pc, #508]	; (800149c <main+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0; 	//Speed component
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <main+0x264>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0;	//Speed component
 80012a8:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <main+0x264>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0;	//Zero flag
 80012ae:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <main+0x264>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0;	//Power flag
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <main+0x264>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 80012ba:	4b79      	ldr	r3, [pc, #484]	; (80014a0 <main+0x264>)
 80012bc:	2200      	movs	r2, #0
 80012be:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 80012c0:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <main+0x264>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <main+0x264>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	719a      	strb	r2, [r3, #6]
  TxData[7] = 255;	//General flag
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <main+0x264>)
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	71da      	strb	r2, [r3, #7]
  /* USER CODE BEGIN WHILE */


  /* Initialize PID controller */

  PIDController pid = { PID_KP, PID_KI, PID_KD, PID_TAU,
 80012d2:	463b      	mov	r3, r7
 80012d4:	2230      	movs	r2, #48	; 0x30
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fac1 	bl	8005860 <memset>
 80012de:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <main+0x268>)
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <main+0x26c>)
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b71      	ldr	r3, [pc, #452]	; (80014ac <main+0x270>)
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b71      	ldr	r3, [pc, #452]	; (80014b0 <main+0x274>)
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	4b71      	ldr	r3, [pc, #452]	; (80014b4 <main+0x278>)
 80012f0:	61bb      	str	r3, [r7, #24]
						PID_LIM_MIN, PID_LIM_MAX, SAMPLE_TIME_S };

  PIDController_Init(&pid);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe3d 	bl	8000f74 <PIDController_Init>

  HAL_ADC_Start_IT(&hadc1);
 80012fa:	486f      	ldr	r0, [pc, #444]	; (80014b8 <main+0x27c>)
 80012fc:	f001 f8e8 	bl	80024d0 <HAL_ADC_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001300:	4b6e      	ldr	r3, [pc, #440]	; (80014bc <main+0x280>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6e      	ldr	r2, [pc, #440]	; (80014c0 <main+0x284>)
 8001306:	6814      	ldr	r4, [r2, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe13 	bl	8000f34 <__aeabi_f2uiz>
 800130e:	4603      	mov	r3, r0
 8001310:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <main+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6a      	ldr	r2, [pc, #424]	; (80014c0 <main+0x284>)
 8001318:	6814      	ldr	r4, [r2, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe0a 	bl	8000f34 <__aeabi_f2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 8001324:	4b65      	ldr	r3, [pc, #404]	; (80014bc <main+0x280>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <main+0x284>)
 800132a:	6814      	ldr	r4, [r2, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe01 	bl	8000f34 <__aeabi_f2uiz>
 8001332:	4603      	mov	r3, r0
 8001334:	63e3      	str	r3, [r4, #60]	; 0x3c

  //INITIAL POSITION

      //HALL A
      if (HAL_GPIO_ReadPin(HALL_A_GPIO_Port,HALL_A_Pin)) Sensors[0] = 1;
 8001336:	2101      	movs	r1, #1
 8001338:	4862      	ldr	r0, [pc, #392]	; (80014c4 <main+0x288>)
 800133a:	f002 fcc1 	bl	8003cc0 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <main+0x110>
 8001344:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <main+0x28c>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e002      	b.n	8001352 <main+0x116>
      else Sensors[0] = 0;
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <main+0x28c>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
      //HALL B
      if (HAL_GPIO_ReadPin(HALL_B_GPIO_Port,HALL_B_Pin)) Sensors[1] = 1;
 8001352:	2102      	movs	r1, #2
 8001354:	485b      	ldr	r0, [pc, #364]	; (80014c4 <main+0x288>)
 8001356:	f002 fcb3 	bl	8003cc0 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <main+0x12c>
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <main+0x28c>)
 8001362:	2201      	movs	r2, #1
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	e002      	b.n	800136e <main+0x132>
      else Sensors[1] = 0;
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <main+0x28c>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
      //HALL C
      if (HAL_GPIO_ReadPin(HALL_C_GPIO_Port,HALL_C_Pin)) Sensors[2] = 1;
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	4854      	ldr	r0, [pc, #336]	; (80014c4 <main+0x288>)
 8001374:	f002 fca4 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <main+0x14a>
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <main+0x28c>)
 8001380:	2201      	movs	r2, #1
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	e002      	b.n	800138c <main+0x150>
      else Sensors[2] = 0;
 8001386:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <main+0x28c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]

  while (1)
  {


	  if (power == 1){
 800138c:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <main+0x290>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d132      	bne.n	80013fa <main+0x1be>

		  HAL_ADC_Start_IT(&hadc1);
 8001394:	4848      	ldr	r0, [pc, #288]	; (80014b8 <main+0x27c>)
 8001396:	f001 f89b 	bl	80024d0 <HAL_ADC_Start_IT>
		  //HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox);


		  //CONTROL

		  PIDController_Update(&pid, vel_d, vel_rpm);
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <main+0x294>)
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <main+0x298>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	463b      	mov	r3, r7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe02 	bl	8000fae <PIDController_Update>


		  integral = pid.integrator;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <main+0x29c>)
 80013ae:	6013      	str	r3, [r2, #0]

		  u = pid.out;
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <main+0x2a0>)
 80013b4:	6013      	str	r3, [r2, #0]

		  duty_cycle = u;
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <main+0x2a0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a40      	ldr	r2, [pc, #256]	; (80014bc <main+0x280>)
 80013bc:	6013      	str	r3, [r2, #0]


		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <main+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <main+0x284>)
 80013c4:	6814      	ldr	r4, [r2, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fdb4 	bl	8000f34 <__aeabi_f2uiz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <main+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <main+0x284>)
 80013d6:	6814      	ldr	r4, [r2, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fdab 	bl	8000f34 <__aeabi_f2uiz>
 80013de:	4603      	mov	r3, r0
 80013e0:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty_cycle);
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <main+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <main+0x284>)
 80013e8:	6814      	ldr	r4, [r2, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fda2 	bl	8000f34 <__aeabi_f2uiz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	63e3      	str	r3, [r4, #60]	; 0x3c


		  //HALL DECODER

		  Hall_Decoder(); //Makes the hall encoding
 80013f4:	f000 fb08 	bl	8001a08 <Hall_Decoder>
 80013f8:	e7c8      	b.n	800138c <main+0x150>

	  //Poner modo sleep

	  else{
		  //Turn off the steering wheel leds
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	4831      	ldr	r0, [pc, #196]	; (80014c4 <main+0x288>)
 8001400:	f002 fc75 	bl	8003cee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140a:	482e      	ldr	r0, [pc, #184]	; (80014c4 <main+0x288>)
 800140c:	f002 fc6f 	bl	8003cee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001416:	482b      	ldr	r0, [pc, #172]	; (80014c4 <main+0x288>)
 8001418:	f002 fc69 	bl	8003cee <HAL_GPIO_WritePin>



		  //Turn off the low gates
		  HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2120      	movs	r1, #32
 8001420:	4828      	ldr	r0, [pc, #160]	; (80014c4 <main+0x288>)
 8001422:	f002 fc64 	bl	8003cee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2110      	movs	r1, #16
 800142a:	4826      	ldr	r0, [pc, #152]	; (80014c4 <main+0x288>)
 800142c:	f002 fc5f 	bl	8003cee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4816      	ldr	r0, [pc, #88]	; (8001490 <main+0x254>)
 8001436:	f002 fc5a 	bl	8003cee <HAL_GPIO_WritePin>



		  //TURN OFF PID

		  PIDController_Reset(&pid);
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe97 	bl	8001170 <PIDController_Reset>

		  integral = pid.integrator;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <main+0x29c>)
 8001446:	6013      	str	r3, [r2, #0]

		  u = pid.out;
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <main+0x2a0>)
 800144c:	6013      	str	r3, [r2, #0]

		  duty_cycle = u;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <main+0x2a0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <main+0x280>)
 8001454:	6013      	str	r3, [r2, #0]


		  //Turn off the high gates
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <main+0x2a0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <main+0x284>)
 800145c:	6814      	ldr	r4, [r2, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd68 	bl	8000f34 <__aeabi_f2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, u);
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <main+0x2a0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <main+0x284>)
 800146e:	6814      	ldr	r4, [r2, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fd5f 	bl	8000f34 <__aeabi_f2uiz>
 8001476:	4603      	mov	r3, r0
 8001478:	63a3      	str	r3, [r4, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, u);
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <main+0x2a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <main+0x284>)
 8001480:	6814      	ldr	r4, [r2, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd56 	bl	8000f34 <__aeabi_f2uiz>
 8001488:	4603      	mov	r3, r0
 800148a:	63e3      	str	r3, [r4, #60]	; 0x3c
	  if (power == 1){
 800148c:	e77e      	b.n	800138c <main+0x150>
 800148e:	bf00      	nop
 8001490:	40010800 	.word	0x40010800
 8001494:	20000110 	.word	0x20000110
 8001498:	2000005c 	.word	0x2000005c
 800149c:	20000158 	.word	0x20000158
 80014a0:	200000b4 	.word	0x200000b4
 80014a4:	3d23d70a 	.word	0x3d23d70a
 80014a8:	3dcccccd 	.word	0x3dcccccd
 80014ac:	3ca3d70a 	.word	0x3ca3d70a
 80014b0:	437f0000 	.word	0x437f0000
 80014b4:	3c23d70a 	.word	0x3c23d70a
 80014b8:	20000084 	.word	0x20000084
 80014bc:	20000038 	.word	0x20000038
 80014c0:	200000bc 	.word	0x200000bc
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	2000002c 	.word	0x2000002c
 80014cc:	20000028 	.word	0x20000028
 80014d0:	20000048 	.word	0x20000048
 80014d4:	20000050 	.word	0x20000050
 80014d8:	20000054 	.word	0x20000054
 80014dc:	20000058 	.word	0x20000058

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ea:	2228      	movs	r2, #40	; 0x28
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 f9b6 	bl	8005860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fc13 	bl	8003d50 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001530:	f000 fc8c 	bl	8001e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fe7e 	bl	8004250 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800155a:	f000 fc77 	bl	8001e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800155e:	2302      	movs	r3, #2
 8001560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f002 ffdb 	bl	8004524 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001574:	f000 fc6a 	bl	8001e4c <Error_Handler>
  }
}
 8001578:	bf00      	nop
 800157a:	3750      	adds	r7, #80	; 0x50
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_ADC1_Init+0x74>)
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <MX_ADC1_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_ADC1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_ADC1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015be:	f000 feaf 	bl	8002320 <HAL_ADC_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f000 fc40 	bl	8001e4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80015d4:	2304      	movs	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_ADC1_Init+0x74>)
 80015de:	f001 f905 	bl	80027ec <HAL_ADC_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80015e8:	f000 fc30 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000084 	.word	0x20000084
 80015f8:	40012400 	.word	0x40012400

080015fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_CAN_Init+0x9c>)
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <MX_CAN_Init+0xa0>)
 8001606:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <MX_CAN_Init+0x9c>)
 800160a:	2208      	movs	r2, #8
 800160c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_CAN_Init+0x9c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MX_CAN_Init+0x9c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_CAN_Init+0x9c>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_CAN_Init+0x9c>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_CAN_Init+0x9c>)
 800162a:	2200      	movs	r2, #0
 800162c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_CAN_Init+0x9c>)
 8001630:	2200      	movs	r2, #0
 8001632:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_CAN_Init+0x9c>)
 8001636:	2200      	movs	r2, #0
 8001638:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_CAN_Init+0x9c>)
 800163c:	2200      	movs	r2, #0
 800163e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_CAN_Init+0x9c>)
 8001642:	2200      	movs	r2, #0
 8001644:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_CAN_Init+0x9c>)
 8001648:	2200      	movs	r2, #0
 800164a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <MX_CAN_Init+0x9c>)
 800164e:	f001 fa69 	bl	8002b24 <HAL_CAN_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001658:	f000 fbf8 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8001660:	230a      	movs	r3, #10
 8001662:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x01<<5;
 8001668:	2320      	movs	r3, #32
 800166a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x01<<5;
 8001670:	2320      	movs	r3, #32
 8001672:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_CAN_Init+0x9c>)
 800168a:	f001 fb46 	bl	8002d1a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000005c 	.word	0x2000005c
 800169c:	40006400 	.word	0x40006400

080016a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2220      	movs	r2, #32
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 f8c1 	bl	8005860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <MX_TIM1_Init+0x168>)
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <MX_TIM1_Init+0x16c>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <MX_TIM1_Init+0x168>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <MX_TIM1_Init+0x168>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80016f0:	4b45      	ldr	r3, [pc, #276]	; (8001808 <MX_TIM1_Init+0x168>)
 80016f2:	22ff      	movs	r2, #255	; 0xff
 80016f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <MX_TIM1_Init+0x168>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <MX_TIM1_Init+0x168>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <MX_TIM1_Init+0x168>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001708:	483f      	ldr	r0, [pc, #252]	; (8001808 <MX_TIM1_Init+0x168>)
 800170a:	f002 ffc1 	bl	8004690 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001714:	f000 fb9a 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800171e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001722:	4619      	mov	r1, r3
 8001724:	4838      	ldr	r0, [pc, #224]	; (8001808 <MX_TIM1_Init+0x168>)
 8001726:	f003 fc29 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001730:	f000 fb8c 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001734:	4834      	ldr	r0, [pc, #208]	; (8001808 <MX_TIM1_Init+0x168>)
 8001736:	f003 f8a5 	bl	8004884 <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001740:	f000 fb84 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	4619      	mov	r1, r3
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <MX_TIM1_Init+0x168>)
 8001754:	f003 ff9e 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800175e:	f000 fb75 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4820      	ldr	r0, [pc, #128]	; (8001808 <MX_TIM1_Init+0x168>)
 8001788:	f003 fb3a 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001792:	f000 fb5b 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	2204      	movs	r2, #4
 800179c:	4619      	mov	r1, r3
 800179e:	481a      	ldr	r0, [pc, #104]	; (8001808 <MX_TIM1_Init+0x168>)
 80017a0:	f003 fb2e 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80017aa:	f000 fb4f 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	2208      	movs	r2, #8
 80017b4:	4619      	mov	r1, r3
 80017b6:	4814      	ldr	r0, [pc, #80]	; (8001808 <MX_TIM1_Init+0x168>)
 80017b8:	f003 fb22 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80017c2:	f000 fb43 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4807      	ldr	r0, [pc, #28]	; (8001808 <MX_TIM1_Init+0x168>)
 80017ea:	f003 ffb1 	bl	8005750 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80017f4:	f000 fb2a 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f8:	4803      	ldr	r0, [pc, #12]	; (8001808 <MX_TIM1_Init+0x168>)
 80017fa:	f000 fc37 	bl	800206c <HAL_TIM_MspPostInit>

}
 80017fe:	bf00      	nop
 8001800:	3758      	adds	r7, #88	; 0x58
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000bc 	.word	0x200000bc
 800180c:	40012c00 	.word	0x40012c00

08001810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800 - 1;
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <MX_TIM2_Init+0xe8>)
 800184a:	f240 321f 	movw	r2, #799	; 0x31f
 800184e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800186a:	4823      	ldr	r0, [pc, #140]	; (80018f8 <MX_TIM2_Init+0xe8>)
 800186c:	f002 ff10 	bl	8004690 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001876:	f000 fae9 	bl	8001e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001884:	4619      	mov	r1, r3
 8001886:	481c      	ldr	r0, [pc, #112]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001888:	f003 fb78 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001892:	f000 fadb 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_TIM2_Init+0xe8>)
 8001898:	f002 ff9c 	bl	80047d4 <HAL_TIM_OC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80018a2:	f000 fad3 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4619      	mov	r1, r3
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <MX_TIM2_Init+0xe8>)
 80018b6:	f003 feed 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018c0:	f000 fac4 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM2_Init+0xe8>)
 80018dc:	f003 fa38 	bl	8004d50 <HAL_TIM_OC_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018e6:	f000 fab1 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM2_Init+0xe8>)
 80018ec:	f000 fbbe 	bl	800206c <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000110 	.word	0x20000110

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <MX_GPIO_Init+0xfc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <MX_GPIO_Init+0xfc>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <MX_GPIO_Init+0xfc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_GPIO_Init+0xfc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <MX_GPIO_Init+0xfc>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_GPIO_Init+0xfc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_GPIO_Init+0xfc>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <MX_GPIO_Init+0xfc>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_GPIO_Init+0xfc>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_LOW_GPIO_Port, A_LOW_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2108      	movs	r1, #8
 800195c:	4827      	ldr	r0, [pc, #156]	; (80019fc <MX_GPIO_Init+0x100>)
 800195e:	f002 f9c6 	bl	8003cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_LOW_Pin|C_LOW_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2130      	movs	r1, #48	; 0x30
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <MX_GPIO_Init+0x104>)
 8001968:	f002 f9c1 	bl	8003cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_LOW_Pin */
  GPIO_InitStruct.Pin = A_LOW_Pin;
 800196c:	2308      	movs	r3, #8
 800196e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2302      	movs	r3, #2
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A_LOW_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	481e      	ldr	r0, [pc, #120]	; (80019fc <MX_GPIO_Init+0x100>)
 8001984:	f002 f818 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HALL_A_Pin HALL_B_Pin HALL_C_Pin */
  GPIO_InitStruct.Pin = HALL_A_Pin|HALL_B_Pin|HALL_C_Pin;
 8001988:	f240 4303 	movw	r3, #1027	; 0x403
 800198c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_GPIO_Init+0x108>)
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4619      	mov	r1, r3
 800199c:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_GPIO_Init+0x104>)
 800199e:	f002 f80b 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_LOW_Pin C_LOW_Pin */
  GPIO_InitStruct.Pin = B_LOW_Pin|C_LOW_Pin;
 80019a2:	2330      	movs	r3, #48	; 0x30
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <MX_GPIO_Init+0x104>)
 80019ba:	f001 fffd 	bl	80039b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2006      	movs	r0, #6
 80019c4:	f001 ffc1 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019c8:	2006      	movs	r0, #6
 80019ca:	f001 ffda 	bl	8003982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2007      	movs	r0, #7
 80019d4:	f001 ffb9 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019d8:	2007      	movs	r0, #7
 80019da:	f001 ffd2 	bl	8003982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	2028      	movs	r0, #40	; 0x28
 80019e4:	f001 ffb1 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e8:	2028      	movs	r0, #40	; 0x28
 80019ea:	f001 ffca 	bl	8003982 <HAL_NVIC_EnableIRQ>

}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	10310000 	.word	0x10310000

08001a08 <Hall_Decoder>:

//FUNCIONES



void Hall_Decoder(void){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	if (Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d123      	bne.n	8001a5c <Hall_Decoder+0x54>
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11f      	bne.n	8001a5c <Hall_Decoder+0x54>
 8001a1c:	4b74      	ldr	r3, [pc, #464]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11b      	bne.n	8001a5c <Hall_Decoder+0x54>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001a24:	2104      	movs	r1, #4
 8001a26:	4873      	ldr	r0, [pc, #460]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a28:	f003 f826 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4871      	ldr	r0, [pc, #452]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a30:	f003 f822 	bl	8004a78 <HAL_TIM_PWM_Stop>


		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	486f      	ldr	r0, [pc, #444]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001a3a:	f002 f958 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	486e      	ldr	r0, [pc, #440]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001a44:	f002 f953 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	486a      	ldr	r0, [pc, #424]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a4c:	f002 ff72 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	4868      	ldr	r0, [pc, #416]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001a56:	f002 f94a 	bl	8003cee <HAL_GPIO_WritePin>
 8001a5a:	e0c7      	b.n	8001bec <Hall_Decoder+0x1e4>



	}
	else if(Sensors[2] == 1 && Sensors[1] == 0 && Sensors[0] == 0) {
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d123      	bne.n	8001aac <Hall_Decoder+0xa4>
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d11f      	bne.n	8001aac <Hall_Decoder+0xa4>
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11b      	bne.n	8001aac <Hall_Decoder+0xa4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a74:	2100      	movs	r1, #0
 8001a76:	485f      	ldr	r0, [pc, #380]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a78:	f002 fffe 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	485d      	ldr	r0, [pc, #372]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a80:	f002 fffa 	bl	8004a78 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2120      	movs	r1, #32
 8001a88:	485b      	ldr	r0, [pc, #364]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001a8a:	f002 f930 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2108      	movs	r1, #8
 8001a92:	485a      	ldr	r0, [pc, #360]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001a94:	f002 f92b 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a98:	2108      	movs	r1, #8
 8001a9a:	4856      	ldr	r0, [pc, #344]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001a9c:	f002 ff4a 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	4854      	ldr	r0, [pc, #336]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001aa6:	f002 f922 	bl	8003cee <HAL_GPIO_WritePin>
 8001aaa:	e09f      	b.n	8001bec <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 1 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d123      	bne.n	8001afc <Hall_Decoder+0xf4>
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11f      	bne.n	8001afc <Hall_Decoder+0xf4>
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11b      	bne.n	8001afc <Hall_Decoder+0xf4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	484b      	ldr	r0, [pc, #300]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001ac8:	f002 ffd6 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001acc:	2104      	movs	r1, #4
 8001ace:	4849      	ldr	r0, [pc, #292]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001ad0:	f002 ffd2 	bl	8004a78 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,   GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001ada:	f002 f908 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	4845      	ldr	r0, [pc, #276]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001ae4:	f002 f903 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4842      	ldr	r0, [pc, #264]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001aec:	f002 ff22 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2108      	movs	r1, #8
 8001af4:	4841      	ldr	r0, [pc, #260]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001af6:	f002 f8fa 	bl	8003cee <HAL_GPIO_WritePin>
 8001afa:	e077      	b.n	8001bec <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 0) {
 8001afc:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d123      	bne.n	8001b4c <Hall_Decoder+0x144>
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11f      	bne.n	8001b4c <Hall_Decoder+0x144>
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11b      	bne.n	8001b4c <Hall_Decoder+0x144>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b14:	2100      	movs	r1, #0
 8001b16:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b18:	f002 ffae 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4835      	ldr	r0, [pc, #212]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b20:	f002 ffaa 	bl	8004a78 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2120      	movs	r1, #32
 8001b28:	4833      	ldr	r0, [pc, #204]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001b2a:	f002 f8e0 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	4831      	ldr	r0, [pc, #196]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001b34:	f002 f8db 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b3c:	f002 fefa 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2108      	movs	r1, #8
 8001b44:	482d      	ldr	r0, [pc, #180]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001b46:	f002 f8d2 	bl	8003cee <HAL_GPIO_WritePin>
 8001b4a:	e04f      	b.n	8001bec <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 1 && Sensors[0] == 1) {
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d123      	bne.n	8001b9c <Hall_Decoder+0x194>
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d11f      	bne.n	8001b9c <Hall_Decoder+0x194>
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d11b      	bne.n	8001b9c <Hall_Decoder+0x194>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b64:	2100      	movs	r1, #0
 8001b66:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b68:	f002 ff86 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b70:	f002 ff82 	bl	8004a78 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2110      	movs	r1, #16
 8001b78:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001b7a:	f002 f8b8 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2108      	movs	r1, #8
 8001b82:	481e      	ldr	r0, [pc, #120]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001b84:	f002 f8b3 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b88:	2104      	movs	r1, #4
 8001b8a:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001b8c:	f002 fed2 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2120      	movs	r1, #32
 8001b94:	4818      	ldr	r0, [pc, #96]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001b96:	f002 f8aa 	bl	8003cee <HAL_GPIO_WritePin>
 8001b9a:	e027      	b.n	8001bec <Hall_Decoder+0x1e4>

	}

	else if(Sensors[2] == 0 && Sensors[1] == 0 && Sensors[0] == 1) {
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d123      	bne.n	8001bec <Hall_Decoder+0x1e4>
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11f      	bne.n	8001bec <Hall_Decoder+0x1e4>
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <Hall_Decoder+0x1e8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d11b      	bne.n	8001bec <Hall_Decoder+0x1e4>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001bb8:	f002 ff5e 	bl	8004a78 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001bc0:	f002 ff5a 	bl	8004a78 <HAL_TIM_PWM_Stop>

		HAL_GPIO_WritePin(B_LOW_GPIO_Port , B_LOW_Pin,  GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001bca:	f002 f890 	bl	8003cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_LOW_GPIO_Port , A_LOW_Pin,  GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <Hall_Decoder+0x1f4>)
 8001bd4:	f002 f88b 	bl	8003cee <HAL_GPIO_WritePin>


		//delay
		//HAL_Delay(0.001);

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <Hall_Decoder+0x1ec>)
 8001bdc:	f002 feaa 	bl	8004934 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(C_LOW_GPIO_Port , C_LOW_Pin,  GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2120      	movs	r1, #32
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <Hall_Decoder+0x1f0>)
 8001be6:	f002 f882 	bl	8003cee <HAL_GPIO_WritePin>

	}
}
 8001bea:	e7ff      	b.n	8001bec <Hall_Decoder+0x1e4>
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000002c 	.word	0x2000002c
 8001bf4:	200000bc 	.word	0x200000bc
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40010800 	.word	0x40010800

08001c00 <HAL_ADC_ConvCpltCallback>:

//INTERRUPCIONES

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  adc_sample = HAL_ADC_GetValue(&hadc1);
 8001c08:	482d      	ldr	r0, [pc, #180]	; (8001cc0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001c0a:	f000 fd17 	bl	800263c <HAL_ADC_GetValue>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001c14:	801a      	strh	r2, [r3, #0]
  vel_d = adc_av/cruise_factor;
  duty_cycle = adc_av;
  */

  //PI control (reference)
  	adc_sum+= adc_sample/8.192;  // 13.65 para convertir de 12 bits a un intervalo de (0-500 rpm)
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fbfc 	bl	8000418 <__aeabi_f2d>
 8001c20:	4604      	mov	r4, r0
 8001c22:	460d      	mov	r5, r1
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fbe3 	bl	80003f4 <__aeabi_i2d>
 8001c2e:	a322      	add	r3, pc, #136	; (adr r3, 8001cb8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fd72 	bl	800071c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fa8c 	bl	800015c <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fe4e 	bl	80008ec <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c54:	6013      	str	r3, [r2, #0]
    counts += 1;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c60:	701a      	strb	r2, [r3, #0]

    if (counts == 1){
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d11a      	bne.n	8001ca0 <HAL_ADC_ConvCpltCallback+0xa0>
  	  adc_av = adc_sum/counts;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c6c:	681c      	ldr	r4, [r3, #0]
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff44 	bl	8000b00 <__aeabi_i2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f7ff f847 	bl	8000d10 <__aeabi_fdiv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f955 	bl	8000f34 <__aeabi_f2uiz>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001c90:	801a      	strh	r2, [r3, #0]
  	  adc_sum = 0;
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  	  counts = 0;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

    }

    vel_d = adc_av;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe ff27 	bl	8000af8 <__aeabi_ui2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cae:	6013      	str	r3, [r2, #0]

}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cbc:	4020624d 	.word	0x4020624d
 8001cc0:	20000084 	.word	0x20000084
 8001cc4:	2000003c 	.word	0x2000003c
 8001cc8:	20000040 	.word	0x20000040
 8001ccc:	2000003e 	.word	0x2000003e
 8001cd0:	20000044 	.word	0x20000044
 8001cd4:	20000048 	.word	0x20000048

08001cd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]


	//HALL A
	if (GPIO_Pin == GPIO_PIN_0) {
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d114      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x3a>

	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)) Sensors[0] = 1;
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4824      	ldr	r0, [pc, #144]	; (8001d7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cec:	f001 ffe8 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_EXTI_Callback+0x26>
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x2c>
	else Sensors[0] = 0;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

	steps+=1;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d0e:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
	else Sensors[2] = 0;

	steps+=1;
	}
}
 8001d10:	e030      	b.n	8001d74 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_1) {
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d114      	bne.n	8001d42 <HAL_GPIO_EXTI_Callback+0x6a>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)) Sensors[1] = 1;
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4818      	ldr	r0, [pc, #96]	; (8001d7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001d1c:	f001 ffd0 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_EXTI_Callback+0x56>
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x5c>
	else Sensors[1] = 0;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
	steps+=1;
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d3e:	801a      	strh	r2, [r3, #0]
}
 8001d40:	e018      	b.n	8001d74 <HAL_GPIO_EXTI_Callback+0x9c>
	else if (GPIO_Pin == GPIO_PIN_10) {
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d114      	bne.n	8001d74 <HAL_GPIO_EXTI_Callback+0x9c>
	if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) Sensors[2] = 1;
 8001d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4e:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001d50:	f001 ffb6 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_EXTI_Callback+0x8a>
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_EXTI_Callback+0x90>
	else Sensors[2] = 0;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
	steps+=1;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_GPIO_EXTI_Callback+0xac>)
 8001d72:	801a      	strh	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010c00 	.word	0x40010c00
 8001d80:	2000002c 	.word	0x2000002c
 8001d84:	2000004c 	.word	0x2000004c

08001d88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	//Formula para el motor de prueba
	//vel_rpm = 2*60*steps/90;  //cada MEDIO SEGUNDO se mide la cantidad de revoluciones por minuto

	//Formula para el motor de MK III
	vel_rpm = 2*60*steps/138;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001da0:	fb82 1203 	smull	r1, r2, r2, r3
 8001da4:	1192      	asrs	r2, r2, #6
 8001da6:	17db      	asrs	r3, r3, #31
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fea8 	bl	8000b00 <__aeabi_i2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001db4:	6013      	str	r3, [r2, #0]
	steps = 0;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]


	//Enviamos el valor de la velocidad

	if (vel_rpm > 255){
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	491c      	ldr	r1, [pc, #112]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f8ac 	bl	8000f20 <__aeabi_fcmpgt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d011      	beq.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		TxData[0] = 255;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001dd0:	22ff      	movs	r2, #255	; 0xff
 8001dd2:	701a      	strb	r2, [r3, #0]
		TxData[1] = vel_rpm - 255;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fdda 	bl	8000994 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f8a6 	bl	8000f34 <__aeabi_f2uiz>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001dee:	705a      	strb	r2, [r3, #1]
 8001df0:	e00b      	b.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x82>
	}
	else{
		TxData[0] = vel_rpm;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f89c 	bl	8000f34 <__aeabi_f2uiz>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e02:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	705a      	strb	r2, [r3, #1]
	}

	//Enviamos el estado ON OFF del sistema

	TxData[3] = power;  // Sending the ON (1) or OFF (0)
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e10:	70da      	strb	r2, [r3, #3]

	//Send by CAN
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e14:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e16:	490b      	ldr	r1, [pc, #44]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e1a:	f001 f88b 	bl	8002f34 <HAL_CAN_AddTxMessage>


};
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000004c 	.word	0x2000004c
 8001e2c:	76b981db 	.word	0x76b981db
 8001e30:	20000050 	.word	0x20000050
 8001e34:	437f0000 	.word	0x437f0000
 8001e38:	200000b4 	.word	0x200000b4
 8001e3c:	20000028 	.word	0x20000028
 8001e40:	20000104 	.word	0x20000104
 8001e44:	20000158 	.word	0x20000158
 8001e48:	2000005c 	.word	0x2000005c

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x8>
	...

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_MspInit+0x5c>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_MspInit+0x60>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_MspInit+0x60>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_ADC_MspInit+0x7c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d129      	bne.n	8001f30 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_ADC_MspInit+0x80>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SPEED_REF_Pin;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	2303      	movs	r3, #3
 8001f12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPEED_REF_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4809      	ldr	r0, [pc, #36]	; (8001f40 <HAL_ADC_MspInit+0x84>)
 8001f1c:	f001 fd4c 	bl	80039b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2012      	movs	r0, #18
 8001f26:	f001 fd10 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f2a:	2012      	movs	r0, #18
 8001f2c:	f001 fd29 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010800 	.word	0x40010800

08001f44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_CAN_MspInit+0xac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d141      	bne.n	8001fe8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_CAN_MspInit+0xb0>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <HAL_CAN_MspInit+0xb4>)
 8001faa:	f001 fd05 	bl	80039b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <HAL_CAN_MspInit+0xb4>)
 8001fc4:	f001 fcf8 	bl	80039b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2014      	movs	r0, #20
 8001fce:	f001 fcbc 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001fd2:	2014      	movs	r0, #20
 8001fd4:	f001 fcd5 	bl	8003982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2015      	movs	r0, #21
 8001fde:	f001 fcb4 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001fe2:	2015      	movs	r0, #21
 8001fe4:	f001 fccd 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40006400 	.word	0x40006400
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010800 	.word	0x40010800

08001ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_TIM_Base_MspInit+0x68>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10c      	bne.n	8002028 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002026:	e018      	b.n	800205a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d113      	bne.n	800205a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0x6c>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201c      	movs	r0, #28
 8002050:	f001 fc7b 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002054:	201c      	movs	r0, #28
 8002056:	f001 fc94 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a28      	ldr	r2, [pc, #160]	; (8002128 <HAL_TIM_MspPostInit+0xbc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d119      	bne.n	80020c0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 80020a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	481d      	ldr	r0, [pc, #116]	; (8002130 <HAL_TIM_MspPostInit+0xc4>)
 80020ba:	f001 fc7d 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020be:	e02f      	b.n	8002120 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d12a      	bne.n	8002120 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6193      	str	r3, [r2, #24]
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_TIM_MspPostInit+0xc0>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	480e      	ldr	r0, [pc, #56]	; (8002130 <HAL_TIM_MspPostInit+0xc4>)
 80020f8:	f001 fc5e 	bl	80039b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_TIM_MspPostInit+0xc8>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	4a06      	ldr	r2, [pc, #24]	; (8002134 <HAL_TIM_MspPostInit+0xc8>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	6053      	str	r3, [r2, #4]
}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40010800 	.word	0x40010800
 8002134:	40010000 	.word	0x40010000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217e:	f000 f8b3 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}

08002186 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPEED_REF_Pin);
 800218a:	2001      	movs	r0, #1
 800218c:	f001 fdc8 	bl	8003d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_B_Pin);
 8002198:	2002      	movs	r0, #2
 800219a:	f001 fdc1 	bl	8003d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <ADC1_2_IRQHandler+0x10>)
 80021aa:	f000 fa53 	bl	8002654 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000084 	.word	0x20000084

080021b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80021be:	f001 f8c9 	bl	8003354 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000005c 	.word	0x2000005c

080021cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <CAN1_RX1_IRQHandler+0x10>)
 80021d2:	f001 f8bf 	bl	8003354 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000005c 	.word	0x2000005c

080021e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM2_IRQHandler+0x10>)
 80021e6:	f002 fcab 	bl	8004b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000110 	.word	0x20000110

080021f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_C_Pin);
 80021f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021fc:	f001 fd90 	bl	8003d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002236:	f7ff ffe5 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f003 faed 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7fe fffd 	bl	800123c <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800224c:	080058b0 	.word	0x080058b0
  ldr r2, =_sbss
 8002250:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002254:	20000190 	.word	0x20000190

08002258 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <CAN1_SCE_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x28>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x28>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f001 fb61 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fdee 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fb79 	bl	800399e <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f001 fb41 	bl	800394a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x1c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x20>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a03      	ldr	r2, [pc, #12]	; (8002308 <HAL_IncTick+0x20>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000008 	.word	0x20000008
 8002308:	2000018c 	.word	0x2000018c

0800230c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <HAL_GetTick+0x10>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	2000018c 	.word	0x2000018c

08002320 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0be      	b.n	80024c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fdac 	bl	8001ebc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fb93 	bl	8002a90 <ADC_ConversionStop_Disable>
 800236a:	4603      	mov	r3, r0
 800236c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 8099 	bne.w	80024ae <HAL_ADC_Init+0x18e>
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 8095 	bne.w	80024ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800238c:	f023 0302 	bic.w	r3, r3, #2
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7b1b      	ldrb	r3, [r3, #12]
 80023a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b8:	d003      	beq.n	80023c2 <HAL_ADC_Init+0xa2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_ADC_Init+0xa8>
 80023c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c6:	e000      	b.n	80023ca <HAL_ADC_Init+0xaa>
 80023c8:	2300      	movs	r3, #0
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7d1b      	ldrb	r3, [r3, #20]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d119      	bne.n	800240c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7b1b      	ldrb	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	035a      	lsls	r2, r3, #13
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e00b      	b.n	800240c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_ADC_Init+0x1a8>)
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	430b      	orrs	r3, r1
 8002432:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243c:	d003      	beq.n	8002446 <HAL_ADC_Init+0x126>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d104      	bne.n	8002450 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	3b01      	subs	r3, #1
 800244c:	051b      	lsls	r3, r3, #20
 800244e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	430a      	orrs	r2, r1
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_ADC_Init+0x1ac>)
 800246c:	4013      	ands	r3, r2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	429a      	cmp	r2, r3
 8002472:	d10b      	bne.n	800248c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	f023 0303 	bic.w	r3, r3, #3
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800248a:	e018      	b.n	80024be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f023 0312 	bic.w	r3, r3, #18
 8002494:	f043 0210 	orr.w	r2, r3, #16
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ac:	e007      	b.n	80024be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024be:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	ffe1f7fd 	.word	0xffe1f7fd
 80024cc:	ff1f0efe 	.word	0xff1f0efe

080024d0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Start_IT+0x1a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0a0      	b.n	800262c <HAL_ADC_Start_IT+0x15c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa72 	bl	80029dc <ADC_Enable>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 808f 	bne.w	8002622 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_ADC_Start_IT+0x164>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d105      	bne.n	800252e <HAL_ADC_Start_IT+0x5e>
 8002522:	4b45      	ldr	r3, [pc, #276]	; (8002638 <HAL_ADC_Start_IT+0x168>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d026      	beq.n	8002596 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002558:	e01d      	b.n	8002596 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a33      	ldr	r2, [pc, #204]	; (8002638 <HAL_ADC_Start_IT+0x168>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_Start_IT+0xaa>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_ADC_Start_IT+0x164>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10d      	bne.n	8002596 <HAL_ADC_Start_IT+0xc6>
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_ADC_Start_IT+0x168>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800258e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f023 0206 	bic.w	r2, r3, #6
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0202 	mvn.w	r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025e6:	d113      	bne.n	8002610 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_ADC_Start_IT+0x164>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_ADC_Start_IT+0x168>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	e00c      	b.n	800262a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e003      	b.n	800262a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40012800 	.word	0x40012800
 8002638:	40012400 	.word	0x40012400

0800263c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b20      	cmp	r3, #32
 8002668:	d140      	bne.n	80026ec <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d139      	bne.n	80026ec <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800269a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800269e:	d11d      	bne.n	80026dc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d119      	bne.n	80026dc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0220 	bic.w	r2, r2, #32
 80026b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fa8f 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0212 	mvn.w	r2, #18
 80026ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d14f      	bne.n	800279a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d148      	bne.n	800279a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800272a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800272e:	d012      	beq.n	8002756 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800273a:	2b00      	cmp	r3, #0
 800273c:	d125      	bne.n	800278a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002748:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800274c:	d11d      	bne.n	800278a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f9c1 	bl	8002b12 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 020c 	mvn.w	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d114      	bne.n	80027d2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f809 	bl	80027da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x20>
 8002808:	2302      	movs	r3, #2
 800280a:	e0dc      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x1da>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b06      	cmp	r3, #6
 800281a:	d81c      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b05      	subs	r3, #5
 800282e:	221f      	movs	r2, #31
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	4019      	ands	r1, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3b05      	subs	r3, #5
 8002848:	fa00 f203 	lsl.w	r2, r0, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
 8002854:	e03c      	b.n	80028d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d81c      	bhi.n	8002898 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b23      	subs	r3, #35	; 0x23
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	4019      	ands	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	3b23      	subs	r3, #35	; 0x23
 800288a:	fa00 f203 	lsl.w	r2, r0, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
 8002896:	e01b      	b.n	80028d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b41      	subs	r3, #65	; 0x41
 80028aa:	221f      	movs	r2, #31
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4019      	ands	r1, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b41      	subs	r3, #65	; 0x41
 80028c4:	fa00 f203 	lsl.w	r2, r0, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d91c      	bls.n	8002912 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	3b1e      	subs	r3, #30
 80028ea:	2207      	movs	r2, #7
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4019      	ands	r1, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6898      	ldr	r0, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	3b1e      	subs	r3, #30
 8002904:	fa00 f203 	lsl.w	r2, r0, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	e019      	b.n	8002946 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6919      	ldr	r1, [r3, #16]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4019      	ands	r1, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6898      	ldr	r0, [r3, #8]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b10      	cmp	r3, #16
 800294c:	d003      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002952:	2b11      	cmp	r3, #17
 8002954:	d132      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d125      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d126      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800297c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d11a      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	0c9a      	lsrs	r2, r3, #18
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x1b2>
 80029aa:	e007      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012400 	.word	0x40012400
 80029d4:	20000000 	.word	0x20000000
 80029d8:	431bde83 	.word	0x431bde83

080029dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d040      	beq.n	8002a7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <ADC_Enable+0xac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <ADC_Enable+0xb0>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a18:	e002      	b.n	8002a20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a26:	f7ff fc71 	bl	800230c <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a2c:	e01f      	b.n	8002a6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2e:	f7ff fc6d 	bl	800230c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d918      	bls.n	8002a6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d011      	beq.n	8002a6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e007      	b.n	8002a7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d1d8      	bne.n	8002a2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	431bde83 	.word	0x431bde83

08002a90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d12e      	bne.n	8002b08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aba:	f7ff fc27 	bl	800230c <HAL_GetTick>
 8002abe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ac0:	e01b      	b.n	8002afa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ac2:	f7ff fc23 	bl	800230c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d914      	bls.n	8002afa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10d      	bne.n	8002afa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d0dc      	beq.n	8002ac2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0ed      	b.n	8002d12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff f9fe 	bl	8001f44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7ff fbd8 	bl	800230c <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b5e:	e012      	b.n	8002b86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b60:	f7ff fbd4 	bl	800230c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b0a      	cmp	r3, #10
 8002b6c:	d90b      	bls.n	8002b86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0c5      	b.n	8002d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0e5      	beq.n	8002b60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0202 	bic.w	r2, r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba4:	f7ff fbb2 	bl	800230c <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002baa:	e012      	b.n	8002bd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bac:	f7ff fbae 	bl	800230c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b0a      	cmp	r3, #10
 8002bb8:	d90b      	bls.n	8002bd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2205      	movs	r2, #5
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e09f      	b.n	8002d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7e1b      	ldrb	r3, [r3, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7e5b      	ldrb	r3, [r3, #25]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e9b      	ldrb	r3, [r3, #26]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e007      	b.n	8002c5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0220 	bic.w	r2, r2, #32
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7edb      	ldrb	r3, [r3, #27]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d108      	bne.n	8002c78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0210 	bic.w	r2, r2, #16
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0210 	orr.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7f1b      	ldrb	r3, [r3, #28]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d108      	bne.n	8002ca2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e007      	b.n	8002cb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0208 	bic.w	r2, r2, #8
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7f5b      	ldrb	r3, [r3, #29]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d108      	bne.n	8002ccc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0204 	orr.w	r2, r2, #4
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e007      	b.n	8002cdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	1e5a      	subs	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d003      	beq.n	8002d40 <HAL_CAN_ConfigFilter+0x26>
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	f040 80aa 	bne.w	8002e94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2201      	movs	r2, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d123      	bne.n	8002dc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	401a      	ands	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3248      	adds	r2, #72	; 0x48
 8002da2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002db6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	3348      	adds	r3, #72	; 0x48
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d122      	bne.n	8002e10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3248      	adds	r2, #72	; 0x48
 8002df0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	3348      	adds	r3, #72	; 0x48
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e2a:	e007      	b.n	8002e3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e56:	e007      	b.n	8002e68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e006      	b.n	8002ea2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d12e      	bne.n	8002f1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7ff fa18 	bl	800230c <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ede:	e012      	b.n	8002f06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ee0:	f7ff fa14 	bl	800230c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	d90b      	bls.n	8002f06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e012      	b.n	8002f2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e006      	b.n	8002f2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f52:	7ffb      	ldrb	r3, [r7, #31]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d003      	beq.n	8002f60 <HAL_CAN_AddTxMessage+0x2c>
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	f040 80b8 	bne.w	80030d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a0 	beq.w	80030c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	0e1b      	lsrs	r3, r3, #24
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d907      	bls.n	8002fa0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e09e      	b.n	80030de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10d      	bne.n	8002fce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	6809      	ldr	r1, [r1, #0]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3318      	adds	r3, #24
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	440b      	add	r3, r1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e00f      	b.n	8002fee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fe2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	440b      	add	r3, r1
 8002fec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3304      	adds	r3, #4
 8003000:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	7d1b      	ldrb	r3, [r3, #20]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d111      	bne.n	800302e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3318      	adds	r3, #24
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6811      	ldr	r1, [r2, #0]
 800301e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3318      	adds	r3, #24
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	440b      	add	r3, r1
 800302a:	3304      	adds	r3, #4
 800302c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3307      	adds	r3, #7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3306      	adds	r3, #6
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3305      	adds	r3, #5
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4313      	orrs	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	3204      	adds	r2, #4
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	4610      	mov	r0, r2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	ea43 0200 	orr.w	r2, r3, r0
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	440b      	add	r3, r1
 8003060:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003064:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3303      	adds	r3, #3
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	061a      	lsls	r2, r3, #24
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3302      	adds	r3, #2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3301      	adds	r3, #1
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	4313      	orrs	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	4610      	mov	r0, r2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	6811      	ldr	r1, [r2, #0]
 800308c:	ea43 0200 	orr.w	r2, r3, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	440b      	add	r3, r1
 8003096:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800309a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3318      	adds	r3, #24
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	4413      	add	r3, r2
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3318      	adds	r3, #24
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	440b      	add	r3, r1
 80030ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e00e      	b.n	80030de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e006      	b.n	80030de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d003      	beq.n	800310c <HAL_CAN_GetRxMessage+0x24>
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b02      	cmp	r3, #2
 8003108:	f040 80f3 	bne.w	80032f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10e      	bne.n	8003130 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0e7      	b.n	8003300 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0d8      	b.n	8003300 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	331b      	adds	r3, #27
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	4413      	add	r3, r2
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0204 	and.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10c      	bne.n	8003186 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	331b      	adds	r3, #27
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	4413      	add	r3, r2
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0d5b      	lsrs	r3, r3, #21
 800317c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e00b      	b.n	800319e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	331b      	adds	r3, #27
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	331b      	adds	r3, #27
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0202 	and.w	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	331b      	adds	r3, #27
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	331b      	adds	r3, #27
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	331b      	adds	r3, #27
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	4413      	add	r3, r2
 800321c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0a1a      	lsrs	r2, r3, #8
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0c1a      	lsrs	r2, r3, #16
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	3302      	adds	r3, #2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e1a      	lsrs	r2, r3, #24
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3303      	adds	r3, #3
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3304      	adds	r3, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0a1a      	lsrs	r2, r3, #8
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3305      	adds	r3, #5
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	4413      	add	r3, r2
 800329c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0c1a      	lsrs	r2, r3, #16
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3306      	adds	r3, #6
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e1a      	lsrs	r2, r3, #24
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3307      	adds	r3, #7
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0220 	orr.w	r2, r2, #32
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e007      	b.n	80032ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0220 	orr.w	r2, r2, #32
 80032ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e006      	b.n	8003300 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <HAL_CAN_ActivateNotification+0x1e>
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d109      	bne.n	800333c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6959      	ldr	r1, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e006      	b.n	800334a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d07c      	beq.n	8003494 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d023      	beq.n	80033ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f983 	bl	80036c2 <HAL_CAN_TxMailbox0CompleteCallback>
 80033bc:	e016      	b.n	80033ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e00c      	b.n	80033ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
 80033e4:	e002      	b.n	80033ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f986 	bl	80036f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d024      	beq.n	8003440 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f962 	bl	80036d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8003410:	e016      	b.n	8003440 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e00c      	b.n	8003440 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e002      	b.n	8003440 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f965 	bl	800370a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d024      	beq.n	8003494 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003452:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f941 	bl	80036e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003464:	e016      	b.n	8003494 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	e00c      	b.n	8003494 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e002      	b.n	8003494 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f944 	bl	800371c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2210      	movs	r2, #16
 80034b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2208      	movs	r2, #8
 80034d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f92a 	bl	800372e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fe5a 	bl	80011ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2210      	movs	r2, #16
 800351a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2208      	movs	r2, #8
 8003536:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f90a 	bl	8003752 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8f2 	bl	8003740 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d006      	beq.n	800357e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8f3 	bl	8003764 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2208      	movs	r2, #8
 8003598:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8eb 	bl	8003776 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d07b      	beq.n	80036a2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d072      	beq.n	800369a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f043 0304 	orr.w	r3, r3, #4
 8003606:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d043      	beq.n	800369a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03e      	beq.n	800369a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003622:	2b60      	cmp	r3, #96	; 0x60
 8003624:	d02b      	beq.n	800367e <HAL_CAN_IRQHandler+0x32a>
 8003626:	2b60      	cmp	r3, #96	; 0x60
 8003628:	d82e      	bhi.n	8003688 <HAL_CAN_IRQHandler+0x334>
 800362a:	2b50      	cmp	r3, #80	; 0x50
 800362c:	d022      	beq.n	8003674 <HAL_CAN_IRQHandler+0x320>
 800362e:	2b50      	cmp	r3, #80	; 0x50
 8003630:	d82a      	bhi.n	8003688 <HAL_CAN_IRQHandler+0x334>
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d019      	beq.n	800366a <HAL_CAN_IRQHandler+0x316>
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d826      	bhi.n	8003688 <HAL_CAN_IRQHandler+0x334>
 800363a:	2b30      	cmp	r3, #48	; 0x30
 800363c:	d010      	beq.n	8003660 <HAL_CAN_IRQHandler+0x30c>
 800363e:	2b30      	cmp	r3, #48	; 0x30
 8003640:	d822      	bhi.n	8003688 <HAL_CAN_IRQHandler+0x334>
 8003642:	2b10      	cmp	r3, #16
 8003644:	d002      	beq.n	800364c <HAL_CAN_IRQHandler+0x2f8>
 8003646:	2b20      	cmp	r3, #32
 8003648:	d005      	beq.n	8003656 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800364a:	e01d      	b.n	8003688 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003654:	e019      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800365e:	e014      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f043 0320 	orr.w	r3, r3, #32
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003668:	e00f      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003672:	e00a      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800367c:	e005      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003686:	e000      	b.n	800368a <HAL_CAN_IRQHandler+0x336>
            break;
 8003688:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003698:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f867 	bl	8003788 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <__NVIC_EnableIRQ+0x34>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	; (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	; (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff90 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff2d 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff42 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff90 	bl	800388c <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5f 	bl	8003838 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff35 	bl	8003800 <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa2 	bl	80038f0 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b08b      	sub	sp, #44	; 0x2c
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ca:	e169      	b.n	8003ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039cc:	2201      	movs	r2, #1
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	f040 8158 	bne.w	8003c9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a9a      	ldr	r2, [pc, #616]	; (8003c58 <HAL_GPIO_Init+0x2a0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d05e      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
 80039f4:	4a98      	ldr	r2, [pc, #608]	; (8003c58 <HAL_GPIO_Init+0x2a0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d875      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 80039fa:	4a98      	ldr	r2, [pc, #608]	; (8003c5c <HAL_GPIO_Init+0x2a4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d058      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
 8003a00:	4a96      	ldr	r2, [pc, #600]	; (8003c5c <HAL_GPIO_Init+0x2a4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d86f      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 8003a06:	4a96      	ldr	r2, [pc, #600]	; (8003c60 <HAL_GPIO_Init+0x2a8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d052      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
 8003a0c:	4a94      	ldr	r2, [pc, #592]	; (8003c60 <HAL_GPIO_Init+0x2a8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d869      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 8003a12:	4a94      	ldr	r2, [pc, #592]	; (8003c64 <HAL_GPIO_Init+0x2ac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d04c      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
 8003a18:	4a92      	ldr	r2, [pc, #584]	; (8003c64 <HAL_GPIO_Init+0x2ac>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d863      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 8003a1e:	4a92      	ldr	r2, [pc, #584]	; (8003c68 <HAL_GPIO_Init+0x2b0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d046      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
 8003a24:	4a90      	ldr	r2, [pc, #576]	; (8003c68 <HAL_GPIO_Init+0x2b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d85d      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 8003a2a:	2b12      	cmp	r3, #18
 8003a2c:	d82a      	bhi.n	8003a84 <HAL_GPIO_Init+0xcc>
 8003a2e:	2b12      	cmp	r3, #18
 8003a30:	d859      	bhi.n	8003ae6 <HAL_GPIO_Init+0x12e>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_GPIO_Init+0x80>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003ab3 	.word	0x08003ab3
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a9f 	.word	0x08003a9f
 8003a44:	08003ae1 	.word	0x08003ae1
 8003a48:	08003ae7 	.word	0x08003ae7
 8003a4c:	08003ae7 	.word	0x08003ae7
 8003a50:	08003ae7 	.word	0x08003ae7
 8003a54:	08003ae7 	.word	0x08003ae7
 8003a58:	08003ae7 	.word	0x08003ae7
 8003a5c:	08003ae7 	.word	0x08003ae7
 8003a60:	08003ae7 	.word	0x08003ae7
 8003a64:	08003ae7 	.word	0x08003ae7
 8003a68:	08003ae7 	.word	0x08003ae7
 8003a6c:	08003ae7 	.word	0x08003ae7
 8003a70:	08003ae7 	.word	0x08003ae7
 8003a74:	08003ae7 	.word	0x08003ae7
 8003a78:	08003ae7 	.word	0x08003ae7
 8003a7c:	08003a95 	.word	0x08003a95
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	4a79      	ldr	r2, [pc, #484]	; (8003c6c <HAL_GPIO_Init+0x2b4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a8a:	e02c      	b.n	8003ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	623b      	str	r3, [r7, #32]
          break;
 8003a92:	e029      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	623b      	str	r3, [r7, #32]
          break;
 8003a9c:	e024      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	623b      	str	r3, [r7, #32]
          break;
 8003aa6:	e01f      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	330c      	adds	r3, #12
 8003aae:	623b      	str	r3, [r7, #32]
          break;
 8003ab0:	e01a      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003aba:	2304      	movs	r3, #4
 8003abc:	623b      	str	r3, [r7, #32]
          break;
 8003abe:	e013      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ac8:	2308      	movs	r3, #8
 8003aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	611a      	str	r2, [r3, #16]
          break;
 8003ad2:	e009      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	615a      	str	r2, [r3, #20]
          break;
 8003ade:	e003      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	623b      	str	r3, [r7, #32]
          break;
 8003ae4:	e000      	b.n	8003ae8 <HAL_GPIO_Init+0x130>
          break;
 8003ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2bff      	cmp	r3, #255	; 0xff
 8003aec:	d801      	bhi.n	8003af2 <HAL_GPIO_Init+0x13a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	e001      	b.n	8003af6 <HAL_GPIO_Init+0x13e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2bff      	cmp	r3, #255	; 0xff
 8003afc:	d802      	bhi.n	8003b04 <HAL_GPIO_Init+0x14c>
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	e002      	b.n	8003b0a <HAL_GPIO_Init+0x152>
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	3b08      	subs	r3, #8
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	210f      	movs	r1, #15
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	6a39      	ldr	r1, [r7, #32]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80b1 	beq.w	8003c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a4c      	ldr	r2, [pc, #304]	; (8003c70 <HAL_GPIO_Init+0x2b8>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <HAL_GPIO_Init+0x2b8>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b50:	4a48      	ldr	r2, [pc, #288]	; (8003c74 <HAL_GPIO_Init+0x2bc>)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	3302      	adds	r3, #2
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a40      	ldr	r2, [pc, #256]	; (8003c78 <HAL_GPIO_Init+0x2c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_GPIO_Init+0x1ec>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <HAL_GPIO_Init+0x2c4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00d      	beq.n	8003ba0 <HAL_GPIO_Init+0x1e8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <HAL_GPIO_Init+0x1e4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_GPIO_Init+0x2cc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_GPIO_Init+0x1e0>
 8003b94:	2303      	movs	r3, #3
 8003b96:	e006      	b.n	8003ba6 <HAL_GPIO_Init+0x1ee>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e004      	b.n	8003ba6 <HAL_GPIO_Init+0x1ee>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e002      	b.n	8003ba6 <HAL_GPIO_Init+0x1ee>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_GPIO_Init+0x1ee>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	f002 0203 	and.w	r2, r2, #3
 8003bac:	0092      	lsls	r2, r2, #2
 8003bae:	4093      	lsls	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bb6:	492f      	ldr	r1, [pc, #188]	; (8003c74 <HAL_GPIO_Init+0x2bc>)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	492c      	ldr	r1, [pc, #176]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e006      	b.n	8003bec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bde:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4928      	ldr	r1, [pc, #160]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4922      	ldr	r1, [pc, #136]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	491e      	ldr	r1, [pc, #120]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	4918      	ldr	r1, [pc, #96]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	4914      	ldr	r1, [pc, #80]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d021      	beq.n	8003c8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	490e      	ldr	r1, [pc, #56]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60cb      	str	r3, [r1, #12]
 8003c54:	e021      	b.n	8003c9a <HAL_GPIO_Init+0x2e2>
 8003c56:	bf00      	nop
 8003c58:	10320000 	.word	0x10320000
 8003c5c:	10310000 	.word	0x10310000
 8003c60:	10220000 	.word	0x10220000
 8003c64:	10210000 	.word	0x10210000
 8003c68:	10120000 	.word	0x10120000
 8003c6c:	10110000 	.word	0x10110000
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010800 	.word	0x40010800
 8003c7c:	40010c00 	.word	0x40010c00
 8003c80:	40011000 	.word	0x40011000
 8003c84:	40011400 	.word	0x40011400
 8003c88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_GPIO_Init+0x304>)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	4909      	ldr	r1, [pc, #36]	; (8003cbc <HAL_GPIO_Init+0x304>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f47f ae8e 	bne.w	80039cc <HAL_GPIO_Init+0x14>
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	372c      	adds	r7, #44	; 0x2c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e001      	b.n	8003ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	807b      	strh	r3, [r7, #2]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cfe:	787b      	ldrb	r3, [r7, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d0a:	e003      	b.n	8003d14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	041a      	lsls	r2, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d36:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd ffca 	bl	8001cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40010400 	.word	0x40010400

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e26c      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8087 	beq.w	8003e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d70:	4b92      	ldr	r3, [pc, #584]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d7c:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d112      	bne.n	8003dae <HAL_RCC_OscConfig+0x5e>
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d10b      	bne.n	8003dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d06c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x12c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d168      	bne.n	8003e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e246      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x76>
 8003db8:	4b80      	ldr	r3, [pc, #512]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7f      	ldr	r2, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e02e      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x98>
 8003dce:	4b7b      	ldr	r3, [pc, #492]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b78      	ldr	r3, [pc, #480]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a77      	ldr	r2, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e01d      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0xbc>
 8003df2:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a71      	ldr	r2, [pc, #452]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003e0c:	4b6b      	ldr	r3, [pc, #428]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a67      	ldr	r2, [pc, #412]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fa6e 	bl	800230c <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe fa6a 	bl	800230c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1fa      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0xe4>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe fa5a 	bl	800230c <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fa56 	bl	800230c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1e6      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x10c>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d063      	beq.n	8003f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8a:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d11c      	bne.n	8003edc <HAL_RCC_OscConfig+0x18c>
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x176>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e1ba      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4939      	ldr	r1, [pc, #228]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	e03a      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee4:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fa0f 	bl	800230c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fa0b 	bl	800230c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e19b      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4927      	ldr	r1, [pc, #156]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_RCC_OscConfig+0x270>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe f9ee 	bl	800230c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe f9ea 	bl	800230c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e17a      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03a      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d019      	beq.n	8003f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6c:	f7fe f9ce 	bl	800230c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f74:	f7fe f9ca 	bl	800230c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e15a      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f000 faa8 	bl	80044e8 <RCC_Delay>
 8003f98:	e01c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fe f9b4 	bl	800230c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa6:	e00f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa8:	f7fe f9b0 	bl	800230c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e140      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	42420000 	.word	0x42420000
 8003fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b9e      	ldr	r3, [pc, #632]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e9      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a6 	beq.w	800412e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b97      	ldr	r3, [pc, #604]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b94      	ldr	r3, [pc, #592]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a93      	ldr	r2, [pc, #588]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]
 8003ffe:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b8e      	ldr	r3, [pc, #568]	; (8004248 <HAL_RCC_OscConfig+0x4f8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d118      	bne.n	800404c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401a:	4b8b      	ldr	r3, [pc, #556]	; (8004248 <HAL_RCC_OscConfig+0x4f8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a8a      	ldr	r2, [pc, #552]	; (8004248 <HAL_RCC_OscConfig+0x4f8>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fe f971 	bl	800230c <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fe f96d 	bl	800230c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b64      	cmp	r3, #100	; 0x64
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0fd      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b81      	ldr	r3, [pc, #516]	; (8004248 <HAL_RCC_OscConfig+0x4f8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x312>
 8004054:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a7a      	ldr	r2, [pc, #488]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e02d      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x334>
 800406a:	4b76      	ldr	r3, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4a75      	ldr	r2, [pc, #468]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6213      	str	r3, [r2, #32]
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4a72      	ldr	r2, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	6213      	str	r3, [r2, #32]
 8004082:	e01c      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b05      	cmp	r3, #5
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x356>
 800408c:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a6c      	ldr	r2, [pc, #432]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	e00b      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a66      	ldr	r2, [pc, #408]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6213      	str	r3, [r2, #32]
 80040b2:	4b64      	ldr	r3, [pc, #400]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a63      	ldr	r2, [pc, #396]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d015      	beq.n	80040f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fe f921 	bl	800230c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fe f91d 	bl	800230c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0ab      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	4b57      	ldr	r3, [pc, #348]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ee      	beq.n	80040ce <HAL_RCC_OscConfig+0x37e>
 80040f0:	e014      	b.n	800411c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f2:	f7fe f90b 	bl	800230c <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fe f907 	bl	800230c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e095      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004110:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b48      	ldr	r3, [pc, #288]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4a47      	ldr	r2, [pc, #284]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8081 	beq.w	800423a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004138:	4b42      	ldr	r3, [pc, #264]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d061      	beq.n	8004208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d146      	bne.n	80041da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_OscConfig+0x4fc>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fe f8db 	bl	800230c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe f8d7 	bl	800230c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e067      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	4b35      	ldr	r3, [pc, #212]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d108      	bne.n	8004194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004182:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	492d      	ldr	r1, [pc, #180]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a19      	ldr	r1, [r3, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	430b      	orrs	r3, r1
 80041a6:	4927      	ldr	r1, [pc, #156]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x4fc>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe f8ab 	bl	800230c <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe f8a7 	bl	800230c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e037      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x46a>
 80041d8:	e02f      	b.n	800423a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <HAL_RCC_OscConfig+0x4fc>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe f894 	bl	800230c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe f890 	bl	800230c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e020      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x498>
 8004206:	e018      	b.n	800423a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e013      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x4f4>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	429a      	cmp	r2, r3
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	40007000 	.word	0x40007000
 800424c:	42420060 	.word	0x42420060

08004250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0d0      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d910      	bls.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b67      	ldr	r3, [pc, #412]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4965      	ldr	r1, [pc, #404]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b63      	ldr	r3, [pc, #396]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0b8      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ac:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a52      	ldr	r2, [pc, #328]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d0:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	494d      	ldr	r1, [pc, #308]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d115      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e07f      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e073      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06b      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4936      	ldr	r1, [pc, #216]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7fd ffe4 	bl	800230c <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7fd ffe0 	bl	800230c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e053      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d210      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 0207 	bic.w	r2, r3, #7
 8004386:	4922      	ldr	r1, [pc, #136]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e032      	b.n	8004406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4916      	ldr	r1, [pc, #88]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	490e      	ldr	r1, [pc, #56]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043de:	f000 f821 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	490a      	ldr	r1, [pc, #40]	; (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f0:	5ccb      	ldrb	r3, [r1, r3]
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x1cc>)
 80043f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd ff42 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40022000 	.word	0x40022000
 8004414:	40021000 	.word	0x40021000
 8004418:	08005898 	.word	0x08005898
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004

08004424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b490      	push	{r4, r7}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800442a:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800442c:	1d3c      	adds	r4, r7, #4
 800442e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004434:	f240 2301 	movw	r3, #513	; 0x201
 8004438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d002      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x40>
 800445e:	2b08      	cmp	r3, #8
 8004460:	d003      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x46>
 8004462:	e02d      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004466:	623b      	str	r3, [r7, #32]
      break;
 8004468:	e02d      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	0c9b      	lsrs	r3, r3, #18
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004476:	4413      	add	r3, r2
 8004478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800447c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c5b      	lsrs	r3, r3, #17
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004496:	4413      	add	r3, r2
 8004498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800449c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a2:	fb02 f203 	mul.w	r2, r2, r3
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e004      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	623b      	str	r3, [r7, #32]
      break;
 80044be:	e002      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c2:	623b      	str	r3, [r7, #32]
      break;
 80044c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c6:	6a3b      	ldr	r3, [r7, #32]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc90      	pop	{r4, r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	08005888 	.word	0x08005888
 80044d8:	40021000 	.word	0x40021000
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	003d0900 	.word	0x003d0900
 80044e4:	007a1200 	.word	0x007a1200

080044e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <RCC_Delay+0x34>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <RCC_Delay+0x38>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0a5b      	lsrs	r3, r3, #9
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004504:	bf00      	nop
  }
  while (Delay --);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	60fa      	str	r2, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f9      	bne.n	8004504 <RCC_Delay+0x1c>
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	20000000 	.word	0x20000000
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d07d      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004540:	2300      	movs	r3, #0
 8004542:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004544:	4b4f      	ldr	r3, [pc, #316]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10d      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4a4b      	ldr	r2, [pc, #300]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455a:	61d3      	str	r3, [r2, #28]
 800455c:	4b49      	ldr	r3, [pc, #292]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b46      	ldr	r3, [pc, #280]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d118      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004584:	f7fd fec2 	bl	800230c <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458a:	e008      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458c:	f7fd febe 	bl	800230c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e06d      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045aa:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02e      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d027      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c8:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045d8:	4b2c      	ldr	r3, [pc, #176]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045de:	4a29      	ldr	r2, [pc, #164]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d014      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fd fe8d 	bl	800230c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f4:	e00a      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fd fe89 	bl	800230c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e036      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ee      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4917      	ldr	r1, [pc, #92]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	4313      	orrs	r3, r2
 8004628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	490b      	ldr	r1, [pc, #44]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	40007000 	.word	0x40007000
 800468c:	42420440 	.word	0x42420440

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd fca0 	bl	8001ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fd3c 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e03a      	b.n	80047be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIM_Base_Start_IT+0x98>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0x58>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d009      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0x58>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_TIM_Base_Start_IT+0x9c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0x58>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d111      	bne.n	80047ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d010      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	e007      	b.n	80047bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800

080047d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e041      	b.n	800486a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f839 	bl	8004872 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fc9a 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e041      	b.n	800491a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f839 	bl	8004922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fc42 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <HAL_TIM_PWM_Start+0x24>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e022      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d109      	bne.n	8004972 <HAL_TIM_PWM_Start+0x3e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e015      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d109      	bne.n	800498c <HAL_TIM_PWM_Start+0x58>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	bf14      	ite	ne
 8004984:	2301      	movne	r3, #1
 8004986:	2300      	moveq	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e008      	b.n	800499e <HAL_TIM_PWM_Start+0x6a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e05e      	b.n	8004a64 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0x82>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	e013      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x92>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c4:	e00b      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xa2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	e003      	b.n	80049de <HAL_TIM_PWM_Start+0xaa>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fe30 	bl	800564c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_PWM_Start+0x138>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_TIM_PWM_Start+0x138>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d009      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <HAL_TIM_PWM_Start+0x13c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIM_PWM_Start+0xfa>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <HAL_TIM_PWM_Start+0x140>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d111      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d010      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	e007      	b.n	8004a62 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fdde 	bl	800564c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <HAL_TIM_PWM_Stop+0xc4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d117      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_PWM_Stop+0x52>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f240 4344 	movw	r3, #1092	; 0x444
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_PWM_Stop+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Stop+0x92>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b08:	e013      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Stop+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b18:	e00b      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Stop+0xb2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	e003      	b.n	8004b32 <HAL_TIM_PWM_Stop+0xba>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40012c00 	.word	0x40012c00

08004b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0202 	mvn.w	r2, #2
 8004b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fac7 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 faba 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fac9 	bl	8005128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0204 	mvn.w	r2, #4
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa9d 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa90 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fa9f 	bl	8005128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0208 	mvn.w	r2, #8
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa73 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa66 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa75 	bl	8005128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0210 	mvn.w	r2, #16
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa49 	bl	8005116 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa3c 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa4b 	bl	8005128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0201 	mvn.w	r2, #1
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd f862 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fd8a 	bl	8005804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa0f 	bl	800513a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0220 	mvn.w	r2, #32
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fd55 	bl	80057f2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e046      	b.n	8004df8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d839      	bhi.n	8004dec <HAL_TIM_OC_ConfigChannel+0x9c>
 8004d78:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004ded 	.word	0x08004ded
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004ded 	.word	0x08004ded
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004ded 	.word	0x08004ded
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	08004ded 	.word	0x08004ded
 8004db0:	08004ddf 	.word	0x08004ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fa28 	bl	8005210 <TIM_OC1_SetConfig>
      break;
 8004dc0:	e015      	b.n	8004dee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa87 	bl	80052dc <TIM_OC2_SetConfig>
      break;
 8004dce:	e00e      	b.n	8004dee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 faea 	bl	80053b0 <TIM_OC3_SetConfig>
      break;
 8004ddc:	e007      	b.n	8004dee <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fb4d 	bl	8005484 <TIM_OC4_SetConfig>
      break;
 8004dea:	e000      	b.n	8004dee <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0ac      	b.n	8004f74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b0c      	cmp	r3, #12
 8004e26:	f200 809f 	bhi.w	8004f68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e65 	.word	0x08004e65
 8004e34:	08004f69 	.word	0x08004f69
 8004e38:	08004f69 	.word	0x08004f69
 8004e3c:	08004f69 	.word	0x08004f69
 8004e40:	08004ea5 	.word	0x08004ea5
 8004e44:	08004f69 	.word	0x08004f69
 8004e48:	08004f69 	.word	0x08004f69
 8004e4c:	08004f69 	.word	0x08004f69
 8004e50:	08004ee7 	.word	0x08004ee7
 8004e54:	08004f69 	.word	0x08004f69
 8004e58:	08004f69 	.word	0x08004f69
 8004e5c:	08004f69 	.word	0x08004f69
 8004e60:	08004f27 	.word	0x08004f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f9d0 	bl	8005210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6999      	ldr	r1, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	619a      	str	r2, [r3, #24]
      break;
 8004ea2:	e062      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa16 	bl	80052dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	619a      	str	r2, [r3, #24]
      break;
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fa5f 	bl	80053b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0208 	orr.w	r2, r2, #8
 8004f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0204 	bic.w	r2, r2, #4
 8004f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	61da      	str	r2, [r3, #28]
      break;
 8004f24:	e021      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 faa9 	bl	8005484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	021a      	lsls	r2, r3, #8
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	61da      	str	r2, [r3, #28]
      break;
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIM_ConfigClockSource+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0b3      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x180>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d03e      	beq.n	800504c <HAL_TIM_ConfigClockSource+0xd0>
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	f200 8087 	bhi.w	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	f000 8085 	beq.w	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	d87f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d01a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xa2>
 8004fe8:	2b70      	cmp	r3, #112	; 0x70
 8004fea:	d87b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d050      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x116>
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d877      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d03c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xf6>
 8004ff8:	2b50      	cmp	r3, #80	; 0x50
 8004ffa:	d873      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d058      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x136>
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d86f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d064      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d86b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d060      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d867      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d05a      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800501c:	e062      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f000 faee 	bl	800560e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005040:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	609a      	str	r2, [r3, #8]
      break;
 800504a:	e04e      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f000 fad7 	bl	800560e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506e:	609a      	str	r2, [r3, #8]
      break;
 8005070:	e03b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	f000 fa4e 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2150      	movs	r1, #80	; 0x50
 800508a:	4618      	mov	r0, r3
 800508c:	f000 faa5 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8005090:	e02b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 fa6c 	bl	800557c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2160      	movs	r1, #96	; 0x60
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fa95 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 80050b0:	e01b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fa2e 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fa85 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fa7c 	bl	80055da <TIM_ITRx_SetConfig>
        break;
 80050e2:	e002      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a26      	ldr	r2, [pc, #152]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a25      	ldr	r2, [pc, #148]	; (800520c <TIM_Base_SetConfig+0xc0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_Base_SetConfig+0xc0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f023 0201 	bic.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 0302 	bic.w	r3, r3, #2
 8005258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <TIM_OC1_SetConfig+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0308 	bic.w	r3, r3, #8
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <TIM_OC1_SetConfig+0xc8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d111      	bne.n	80052b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	621a      	str	r2, [r3, #32]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00

080052dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f023 0210 	bic.w	r2, r3, #16
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0320 	bic.w	r3, r3, #32
 8005326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <TIM_OC2_SetConfig+0xd0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10d      	bne.n	8005358 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a14      	ldr	r2, [pc, #80]	; (80053ac <TIM_OC2_SetConfig+0xd0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d113      	bne.n	8005388 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800536e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	40012c00 	.word	0x40012c00

080053b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <TIM_OC3_SetConfig+0xd0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10d      	bne.n	800542a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a14      	ldr	r2, [pc, #80]	; (8005480 <TIM_OC3_SetConfig+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d113      	bne.n	800545a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	621a      	str	r2, [r3, #32]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40012c00 	.word	0x40012c00

08005484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a0f      	ldr	r2, [pc, #60]	; (800551c <TIM_OC4_SetConfig+0x98>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d109      	bne.n	80054f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr
 800551c:	40012c00 	.word	0x40012c00

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f023 0210 	bic.w	r2, r3, #16
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	031b      	lsls	r3, r3, #12
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f043 0307 	orr.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005628:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	021a      	lsls	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	431a      	orrs	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	609a      	str	r2, [r3, #8]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1a      	ldr	r2, [r3, #32]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e046      	b.n	800573a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a16      	ldr	r2, [pc, #88]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d009      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a10      	ldr	r2, [pc, #64]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10c      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4313      	orrs	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800

08005750 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e03d      	b.n	80057e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
	...

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	2600      	movs	r6, #0
 800581c:	4d0c      	ldr	r5, [pc, #48]	; (8005850 <__libc_init_array+0x38>)
 800581e:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	f000 f822 	bl	8005870 <_init>
 800582c:	2600      	movs	r6, #0
 800582e:	4d0a      	ldr	r5, [pc, #40]	; (8005858 <__libc_init_array+0x40>)
 8005830:	4c0a      	ldr	r4, [pc, #40]	; (800585c <__libc_init_array+0x44>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080058a8 	.word	0x080058a8
 8005854:	080058a8 	.word	0x080058a8
 8005858:	080058a8 	.word	0x080058a8
 800585c:	080058ac 	.word	0x080058ac

08005860 <memset>:
 8005860:	4603      	mov	r3, r0
 8005862:	4402      	add	r2, r0
 8005864:	4293      	cmp	r3, r2
 8005866:	d100      	bne.n	800586a <memset+0xa>
 8005868:	4770      	bx	lr
 800586a:	f803 1b01 	strb.w	r1, [r3], #1
 800586e:	e7f9      	b.n	8005864 <memset+0x4>

08005870 <_init>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr

0800587c <_fini>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr
